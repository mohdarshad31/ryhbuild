{"version":3,"sources":["views/AdminDashboard/ClinicalTrial/ClinicalTrial.js","views/Loader/Loader.js"],"names":["popupImgUrl","process","localizer","momentLocalizer","moment","myEventsList","start","add","toDate","end","title","ClinicalTrial","props","scrollToTop","window","scrollTo","toggle","tab","state","activeTab","setState","toggle2","activeTab2","addDoctorToList","event","preventDefault","doctorList","selectedDoctor","value","doctorSelectIndex","doctorInfo","role","selectedRole","filter","item","authId","length","push","addPatientToList","patientList","userList","selectedPatient","patientSelectIndex","patientInfo","removeSelectedDoctor","index","splice","removeSelectedPatient","selectStageData","target","stagesData","remainingStages","i","startDate","endDate","removeStageForm","assignPatient","doctorId","assignPatientInfo","assignPatientToDoctor","assignPatientInfoWithDoctor","undefined","removeAssignedPatient","patientIndex","getTemplateWithDoctor","doctorTemplateInfo","categoryId","stagesWithPatientAppointment","patientInfoData","getTemplateList","assignTemplateToDoctor","templateList","selectedTemplate","removeDoctorAssignedTemplate","doctorTemplateWithStage","name","stageIndex","patientId","assignSTageRowToDoctor","assignSTageInfoToDoctor","stage","form","schedule_date","stageInfo","removeDoctorAssignedTemplateStage","getTemplateWithPatient","patientTemplateInfo","assignTemplateToPatient","removePatientAssignedTemplate","patientTemplateWithStage","assignSTageInfoToPatient","removePatientAssignedTemplateStage","setStepComleted","validateStep1","validateStep2","toast","error","toggleModal","modal","finishAddClinicalTrial","validateStep3","selectedDoctorInfo","Object","keys","forEach","key","val","doctorValue","doctorInfoData","p","v","clinicalTrialDetail","doctorTemplateId","templateId","doctorTemplateCategoryId","doctorRole","parseInt","scheduleDate","doctorDescription","description","patientTemplateId","patientform","patientTemplateCategoryId","patientDescription","clinicalTrialInfo","clinicalTrial","clinical_trial","clinicalTrialSchedular","trialCategoryId","subCategoryId","trialSubCategoryId","selectedDoctorRole","map","phase","cro","protocolNumber","sponsorId","loading","commonService","postAPIWithAccessToken","then","res","data","status","message","clinicalTrialId","catch","err","response","localStorage","clear","history","changeTrialHandler","subPracticeCategoryList","practiceCategory","disabledScheduleTime","exculdesTimes","rowIndex","formProccessing","formField","doctor_id","patient_id","doctor_categoryId","doctor_templateId","phoneNumber","address","city","country","errors","selectDoctor","selectPatient","formValid","filterItem","filter_doctor_id","custom_search","doctorTemplateList","categoryList","assignmentList","selectedDoctorCalendarIndex","errorStep1","practiceCategoryList","searchDoctor","specializationList","selectedSpecialization","sponsorsList","bind","this","doctorQuery","getAPIWithAccessToken","patientQuery","practiceSubCategory","console","log","profileList","parentId","setTemplateList","templateInfo","stagesInfo","Array","isArray","assignDoctorToPatientData","loaderElement","className","activeStep","connectorStyleConfig","disabledColor","activeColor","completedColor","style","connectorStateColors","label","children","StepsIcon","iconName","completed","active","md","htmlFor","placeholder","invalid","onChange","required","lg","type","id","categoryItem","SetCategoryDropDownItem","categoryName","subCategoryName","companyName","check","inline","checked","userInfo","specializationId","specializationName","firstName","lastName","disabled","onClick","selectDoctorInfo","doctorIndex","dateFormat","placeholderText","minDate","Date","maxDate","selected","date","assignPatientData","assignPatientIndex","categoryInfo","temaplateIndex","templateName","selectedTemplateInfo","selectedTemplateIndex","stagesWithPatientAppointmentInfo","stagesWithPatientAppointmentIndex","assignedPatient","assignedPatientIndex","readOnly","showTimeSelect","excludeTimes","onFocus","e","stageDetails","rows","events","startAccessor","views","endAccessor","popup","class","isOpen","src","alt","width","height","to","Component","Loader"],"mappings":"qdAeMA,G,gBAAW,UAAMC,8DAAN,0BACXC,EAAYC,YAAgBC,KAC5BC,EAAe,CACrB,CACAC,MAAOF,MAASG,IAAI,EAAG,QAAQC,SAC/BC,IAAKL,MACJG,IAAI,EAAG,QACPC,SACDE,MAAO,KAGDC,E,kDACJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IA+DRC,YAAc,kBAAMC,OAAOC,SAAS,EAAG,IAhErB,EA4VlBC,OAAS,SAAAC,GACJ,EAAKC,MAAMC,YAAcF,GAAK,EAAKG,SAAS,CAACD,UAAWF,KA7V3C,EAgWlBI,QAAU,SAAAJ,GACL,EAAKC,MAAMI,aAAeL,GAAK,EAAKG,SAAS,CAACE,WAAYL,KAjW7C,EAwWlBM,gBAAkB,SAAAC,GAChBA,EAAMC,iBACN,IAAIC,EAAa,EAAKR,MAAMQ,WACxBC,EAAiB,EAAKT,MAAMS,eAC5BC,EAAQ,EAAKV,MAAMW,kBAEvB,GAAa,KAAVD,EAAc,CACf,IAAIE,EAAaJ,EAAWE,GAC5BE,EAAWC,KAAO,EAAKb,MAAMc,aAIG,IAFRL,EAAeM,QAAO,SAASC,GAAQ,OAAOA,EAAKC,SAAWL,EAAWK,UAE5EC,QACnBT,EAAeU,KAAKP,GACtB,EAAKV,SAAS,CAACS,kBAAmB,GAAIG,aAAc,GAAIL,eAAgBA,SAGxE,EAAKP,SAAS,CAACS,kBAAmB,GAAIG,aAAc,MAzXtC,EA4XlBM,iBAAmB,SAAAd,GACjBA,EAAMC,iBACN,IAAIc,EAAc,EAAKrB,MAAMsB,SACzBC,EAAkB,EAAKvB,MAAMuB,gBAC7Bb,EAAQ,EAAKV,MAAMwB,mBAEvB,GAAa,KAAVd,EAAc,CACf,IAAIe,EAAcJ,EAAYX,GAGG,IADRa,EAAgBR,QAAO,SAASC,GAAQ,OAAOA,EAAKC,SAAWQ,EAAYR,UAC9EC,QACpBK,EAAgBJ,KAAKM,GACvB,EAAKvB,SAAS,CAACsB,mBAAoB,GAAID,gBAAiBA,SAGxD,EAAKrB,SAAS,CAACsB,mBAAoB,MA3YrB,EA8YlBE,qBAAuB,SAACC,EAAOrB,GAC7B,IAAIG,EAAiB,EAAKT,MAAMS,eAChCA,EAAemB,OAAOD,EAAO,GAC7B,EAAKzB,SAAS,CAACO,eAAgBA,KAjZf,EAmZlBoB,sBAAwB,SAACF,EAAOrB,GAC9B,IAAIiB,EAAkB,EAAKvB,MAAMuB,gBACjCA,EAAgBK,OAAOD,EAAO,GAC9B,EAAKzB,SAAS,CAACqB,gBAAiBA,KAtZhB,EAyZlBO,gBAAkB,SAAAxB,GAChB,IAAMI,EAAQJ,EAAMyB,OAAOrB,MACvBsB,EAAa,EAAKhC,MAAMgC,WACxBC,EAAyC,IAAtBD,EAAWd,OAAgBR,EAAQA,EAAQsB,EAAWd,OAC7E,GAAGe,EAAkB,EACnB,IAAI,IAAIC,EAAI,EAAGA,GAAKD,EAAiBC,IACnCF,EAAWb,KAAK,CAACgB,UAAW,GAAIC,QAAS,UAGrCH,EAAkB,GACxBD,EAAWJ,OAAOlB,EAAQ,EAAGsB,EAAWd,OAASR,GACnD,EAAKR,SAAS,CAAC8B,WAAYA,KApaX,EAwalBK,gBAAkB,SAACV,EAAOrB,GACxB,IAAI0B,EAAa,EAAKhC,MAAMgC,WAC5BA,EAAWJ,OAAOD,EAAO,GACzB,EAAKzB,SAAS,CAAC8B,WAAYA,KA3aX,EA8alBM,cAAgB,SAACC,EAAUjC,GACzB,IAAIkC,EAAoB,EAAKxC,MAAMwC,kBACnCA,EAAkBD,GAAYjC,EAAMyB,OAAOrB,MAC3C,EAAKR,SAAS,CAACsC,kBAAkBA,KAjbjB,EAoblBC,sBAAwB,SAACF,EAAUjC,GACjC,IAAIkC,EAAoB,EAAKxC,MAAMwC,kBAE/Bf,EADkB,EAAKzB,MAAMuB,gBACCiB,EAAkBD,IAChDG,EAA8B,EAAK1C,MAAM0C,iCACAC,IAA1CD,EAA4BH,GAEW,IADRG,EAA4BH,GAAUxB,QAAO,SAASC,GAAO,OAAOA,EAAKC,SAAWQ,EAAYR,UACnGC,QAC3BwB,EAA4BH,GAAUpB,KAAKM,GAG7CiB,EAA4BH,GAAY,CAACd,GAC3Ce,EAAkBD,GAAY,GAC9B,EAAKrC,SAAS,CAACsC,kBAAmBA,EAAmBE,4BAA6BA,KAjclE,EAoclBE,sBAAwB,SAACL,EAAUM,EAAcvC,GAC/C,IAAIoC,EAA8B,EAAK1C,MAAM0C,iCACAC,IAA1CD,EAA4BH,IAC7BG,EAA4BH,GAAUX,OAAOiB,EAAc,GAE7D,EAAK3C,SAAS,CAACwC,4BAA6BA,KAzc5B,EA4clBI,sBAAwB,SAACP,EAAUjC,GACjC,IAAIyC,EAAqB,EAAK/C,MAAM+C,wBACAJ,IAAjCI,EAAmBR,GACpBQ,EAAmBR,GAAUS,WAAa1C,EAAMyB,OAAOrB,MAEvDqC,EAAmBR,GAAY,CAAC,WAAajC,EAAMyB,OAAOrB,MAAOuC,6BAA8B,CAAC,CAACC,gBAAiB,MACpH,EAAKhD,SAAS,CAAC6C,mBAAoBA,IACnC,EAAKI,gBAAgB7C,EAAMyB,OAAOrB,MAAO6B,EAAU,WAndnC,EAsdlBa,uBAAyB,SAACb,EAAUjC,GAClC,IAAIyC,EAAqB,EAAK/C,MAAM+C,wBACAJ,IAAjCI,EAAmBR,IAAkD,KAAvBjC,EAAMyB,OAAOrB,YACXiC,IAA9CI,EAAmBR,GAAUc,oBACuBV,IAAlDI,EAAmBR,GAAUe,iBAC9BP,EAAmBR,GAAUe,iBAAiBnC,KAAK4B,EAAmBR,GAAUc,aAAa/C,EAAMyB,OAAOrB,QAE1GqC,EAAmBR,GAAUe,iBAAmB,CAACP,EAAmBR,GAAUc,aAAa/C,EAAMyB,OAAOrB,SAK9G,EAAKR,SAAS,CAAC6C,mBAAoBA,KAlenB,EAqelBQ,6BAA+B,SAAChB,EAAUZ,EAAOrB,GAC/C,IAAIyC,EAAqB,EAAK/C,MAAM+C,wBACAJ,IAAjCI,EAAmBR,SACiCI,IAAlDI,EAAmBR,GAAUe,kBAC9BP,EAAmBR,GAAUe,iBAAiB1B,OAAOD,EAAO,GAMhE,EAAKzB,SAAS,CAAC6C,mBAAoBA,KA/enB,EAkflBS,wBAA0B,SAACjB,EAAUkB,EAAM/C,GAA2C,IAE1D,EAFsBgD,EAAmC,uDAAtB,EAAGC,EAAmB,uDAAP,GACxEZ,EAAqB,EAAK/C,MAAM+C,mBACxB,gBAATU,OACmCd,IAAjCI,EAAmBR,GACpBQ,EAAmBR,GAAUkB,GAAQ/C,EAGrCqC,EAAmBR,IAAnB,mBAAiCkB,EAAO/C,GAAxC,6CAA6E,CAAC,CAACwC,gBAAiB,MAAhG,QAGkCP,IAAjCI,EAAmBR,QAC6CI,IAA9DI,EAAmBR,GAAUU,6BAC3BF,EAAmBR,GAAUU,6BAA6B/B,OAASwC,EACxD,UAATD,GAA6B,SAATA,OAC8Ed,IAAhGI,EAAmBR,GAAnB,6BAA6DmB,GAA7D,qBAC6Gf,IAA3GI,EAAmBR,GAAnB,6BAA6DmB,GAA7D,gBAA4FC,GAC7FZ,EAAmBR,GAAnB,6BAA6DmB,GAA7D,gBAA4FC,GAAWF,GAAQ/C,EAEjHqC,EAAmBR,GAAnB,6BAA6DmB,GAA7D,gBAA4FC,GAA5F,eAA2GF,EAAO/C,GAGlHqC,EAAmBR,GAAnB,6BAA6DmB,GAA7D,+BAAgGC,EAAhG,eAA8GF,EAAO/C,IAIvHqC,EAAmBR,GAAnB,6BAA6DmB,GAAYD,GAAQ/C,EAIvE,UAAT+C,GAA6B,SAATA,OACqEd,IAAvFI,EAAmBR,GAAnB,6BAA6D,GAA7D,qBACoGI,IAAlGI,EAAmBR,GAAnB,6BAA6D,GAA7D,gBAAmFoB,GACpFZ,EAAmBR,GAAnB,6BAA6D,GAA7D,gBAAmFoB,GAAWF,GAAQ/C,EAExGqC,EAAmBR,GAAnB,6BAA6D,GAA7D,gBAAmFoB,GAAnF,eAAkGF,EAAO/C,GAGzGqC,EAAmBR,GAAnB,6BAA6D,GAA7D,+BAAuFoB,EAAvF,eAAqGF,EAAO/C,IAI9GqC,EAAmBR,GAAnB,6BAA6D,GAAGkB,GAAQ/C,GAK5EqC,EAAmBR,GAAnB,6BAA+D,CAAC,CAACW,gBAAiB,KACtE,UAATO,GAA6B,SAATA,OACgFd,IAAlGI,EAAmBR,GAAnB,6BAA6D,GAA7D,gBAAmFoB,GACpFZ,EAAmBR,GAAnB,6BAA6D,GAA7D,gBAAmFoB,GAAWF,GAAQ/C,EAEtGqC,EAAmBR,GAAnB,6BAA6D,GAA7D,gBAAmFoB,GAAnF,eAAkGF,EAAO/C,GAI3GqC,EAAmBR,GAAnB,6BAA6D,GAAGkB,GAAQ/C,IAQ5EqC,EAAmBR,GAAY,CAACU,6BAA8B,CAAC,CAACC,gBAAiB,MACrE,UAATO,GAA6B,SAATA,OACgFd,IAAlGI,EAAmBR,GAAnB,6BAA6D,GAA7D,gBAAmFoB,GACpFZ,EAAmBR,GAAnB,6BAA6D,GAA7D,gBAAmFoB,GAAWF,GAAQ/C,EAEtGqC,EAAmBR,GAAnB,6BAA6D,GAA7D,gBAAmFoB,GAAnF,eAAkGF,EAAO/C,GAI3GqC,EAAmBR,GAAnB,6BAA6D,GAAGkB,GAAQ/C,GAI9E,EAAKR,SAAS,CAAC6C,mBAAoBA,KA9jBnB,EAikBlBa,uBAAyB,SAACrB,GACxB,IAAIQ,EAAqB,EAAK/C,MAAM+C,wBACAJ,IAAjCI,EAAmBR,QAC6CI,IAA9DI,EAAmBR,GAAUU,6BAC9BF,EAAmBR,GAAUU,6BAA6B9B,KAAK,CAAC+B,gBAAiB,KAEjFH,EAAmBR,GAAY,CAACU,6BAA8B,CAAC,CAACC,gBAAiB,MAInFH,EAAkB,eAAKR,EAAW,CAACU,6BAA8B,CAAC,CAACC,gBAAiB,OAEtF,EAAKhD,SAAS,CAAC6C,mBAAoBA,KA7kBnB,EAglBlBc,wBAA0B,SAACtB,GACzB,IAAIQ,EAAqB,EAAK/C,MAAM+C,mBACpC,QAAoCJ,IAAjCI,EAAmBR,IACjBQ,EAAmBR,GAAUuB,OAASf,EAAmBR,GAAUwB,MAAQhB,EAAmBR,GAAUyB,cAAe,CACxH,IAAIV,EAAmBP,EAAmBR,GAAUe,iBAE9CW,EAAY,CAACH,MAAOf,EAAmBR,GAAUuB,MAAOC,KAAMT,EAAiBP,EAAmBR,GAAUwB,MAAOC,cAAejB,EAAmBR,GAAUyB,oBACrHrB,IAA3CI,EAAmBR,GAAU0B,UAC9BlB,EAAmBR,GAAU0B,UAAU9C,KAAK8C,GAE5ClB,EAAmBR,GAAU0B,UAAY,CAACA,GAKlD,EAAK/D,SAAS,CAAC6C,mBAAoBA,KA/lBnB,EAimBlBmB,kCAAoC,SAAC3B,EAAUZ,EAAOrB,GACpD,IAAIyC,EAAqB,EAAK/C,MAAM+C,wBACAJ,IAAjCI,EAAmBR,SAC0BI,IAA3CI,EAAmBR,GAAU0B,WAC9BlB,EAAmBR,GAAU0B,UAAUrC,OAAOD,EAAO,GAMzD,EAAKzB,SAAS,CAAC6C,mBAAoBA,KA3mBnB,EA8mBlBoB,uBAAyB,SAACR,EAAWrD,GACnC,IAAI8D,EAAsB,EAAKpE,MAAMoE,yBACCzB,IAAnCyB,EAAoBT,GACrBS,EAAoBT,GAAWX,WAAa1C,EAAMyB,OAAOrB,MAEzD0D,EAAoBT,GAAa,CAAC,WAAarD,EAAMyB,OAAOrB,OAC9D,EAAKR,SAAS,CAACkE,oBAAqBA,IACpC,EAAKjB,gBAAgB7C,EAAMyB,OAAOrB,MAAOiD,EAAW,YArnBpC,EAwnBlBU,wBAA0B,SAACV,EAAWrD,GACpC,IAAI8D,EAAsB,EAAKpE,MAAMoE,yBACCzB,IAAnCyB,EAAoBT,IAAmD,KAAvBrD,EAAMyB,OAAOrB,YACXiC,IAAhDyB,EAAoBT,GAAWN,oBACuBV,IAApDyB,EAAoBT,GAAWL,iBAChCc,EAAoBT,GAAWL,iBAAiBnC,KAAKiD,EAAoBT,GAAWN,aAAa/C,EAAMyB,OAAOrB,QAE9G0D,EAAoBT,GAAWL,iBAAmB,CAACc,EAAoBT,GAAWN,aAAa/C,EAAMyB,OAAOrB,SAKlH,EAAKR,SAAS,CAACkE,oBAAqBA,KApoBpB,EAuoBlBE,8BAAgC,SAACX,EAAWhC,EAAOrB,GACjD,IAAI8D,EAAsB,EAAKpE,MAAMoE,yBACCzB,IAAnCyB,EAAoBT,SACkChB,IAApDyB,EAAoBT,GAAWL,kBAChCc,EAAoBT,GAAWL,iBAAiB1B,OAAOD,EAAO,GAMlE,EAAKzB,SAAS,CAACkE,oBAAqBA,KAjpBpB,EAopBlBG,yBAA2B,SAACZ,EAAWF,EAAM/C,GAC3C,IAAI0D,EAAsB,EAAKpE,MAAMoE,yBACCzB,IAAnCyB,EAAoBT,GACrBS,EAAoBT,GAAWF,GAAQ/C,EAEvC0D,EAAoBT,GAApB,eAAmCF,EAAM/C,GAC3C,EAAKR,SAAS,CAACkE,oBAAqBA,KA1pBpB,EA6pBlBI,yBAA2B,SAACb,GAC1B,IAAIS,EAAsB,EAAKpE,MAAMoE,oBACrC,QAAsCzB,IAAnCyB,EAAoBT,IAClBS,EAAoBT,GAAWG,OAASM,EAAoBT,GAAWI,KAAO,CAC/E,IAAIT,EAAmBc,EAAoBT,GAAWL,iBAEhDW,EAAY,CAACH,MAAOM,EAAoBT,GAAWG,MAAOC,KAAMT,EAAiBc,EAAoBT,GAAWI,YACpEpB,IAA7CyB,EAAoBT,GAAWM,UAChCG,EAAoBT,GAAWM,UAAU9C,KAAK8C,GAE9CG,EAAoBT,GAAWM,UAAY,CAACA,GAKpD,EAAK/D,SAAS,CAACkE,oBAAqBA,KA5qBpB,EA8qBlBK,mCAAqC,SAACd,EAAWhC,EAAOrB,GACtD,IAAI8D,EAAsB,EAAKpE,MAAMoE,yBACCzB,IAAnCyB,EAAoBT,SAC2BhB,IAA7CyB,EAAoBT,GAAWM,WAChCG,EAAoBT,GAAWM,UAAUrC,OAAOD,EAAO,GAM3D,EAAKzB,SAAS,CAACkE,oBAAqBA,KAxrBpB,EA2rBlBM,gBAAkB,SAACzE,GACjB,GAAiB,IAAdA,EAAgB,CACjB,IAAI,EAAK0E,gBACP,OAAO,EAGP,EAAKzE,SAAS,CAACD,UAAWA,SAEzB,GAAiB,IAAdA,EAAgB,CACtB,IAAI,EAAK2E,gBAEP,OADAC,IAAMC,MAAM,sCACL,EAGP,EAAK5E,SAAS,CAACD,UAAWA,SAG9B,EAAKC,SAAS,CAACD,UAAWA,IAC3B,EAAKN,eA7sBY,EAgtBlBoF,YAAc,WACZ,EAAK7E,SAAS,CACZ8E,OAAQ,EAAKhF,MAAMgF,SAltBL,EAstBlBC,uBAAyB,WACvB,IAAI,EAAKC,gBAEP,OADAL,IAAMC,MAAM,sDACL,EAGP,IAAIK,EAAqB,GAEzBC,OAAOC,KAAK,EAAKrF,MAAM+C,oBAAoBuC,SAAQ,SAACC,EAAKC,GACvD,IAAIC,EAAc,EAAKzF,MAAM+C,mBAAmBwC,GAE5CG,EAAiB,EAAK1F,MAAMS,eAAeM,QAAO,SAASC,GAAO,OAAOA,EAAKC,SAAWsE,KAE7F,GAAGE,EAAYxC,6BAA6B/B,OAAS,EAAE,CAAC,IAAD,gBACxCuE,EAAYxC,8BAD4B,yBAC7C0C,EAD6C,QAEnDP,OAAOC,KAAKM,EAAEzC,iBAAiBoC,SAAQ,SAAC3B,EAAWiC,GACjD,IAAIlF,EAAQiF,EAAEzC,gBAAgBS,GAC1BkC,EAAsB,GAC1BA,EAAoBtD,SAAWgD,EAC/BM,EAAoBC,sBAA4DnD,IAAzC8C,EAAYnC,iBAAiBqC,EAAE5B,MAAsB0B,EAAYnC,iBAAiBqC,EAAE5B,MAAMgC,WAAa,GAC9IF,EAAoBG,8BAAoErD,IAAzC8C,EAAYnC,iBAAiBqC,EAAE5B,MAAsB0B,EAAYnC,iBAAiBqC,EAAE5B,MAAMf,WAAa,GACnJ0C,EAAexE,OAAS,EACzB2E,EAAoBI,WAAaP,EAAe,GAAG7E,KAEnDgF,EAAoBI,WAAa,GACnCJ,EAAoBlC,UAAYA,EAChCkC,EAAoB/B,MAAQoC,SAASP,EAAE7B,OAAS,EAChD+B,EAAoBM,aAAezF,EAAMsD,cACzC6B,EAAoBO,kBAAoBX,EAAYY,aAAe,GACnER,EAAoBS,uBAAwE3D,IAApD8C,EAAYnC,iBAAiB5C,EAAM6F,aAA6Bd,EAAYnC,iBAAiB5C,EAAM6F,aAAaR,WAAa,GACrKF,EAAoBW,+BAAgF7D,IAApD8C,EAAYnC,iBAAiB5C,EAAM6F,aAA6Bd,EAAYnC,iBAAiB5C,EAAM6F,aAAavD,WAAa,GAC7K6C,EAAoBY,mBAAqB,GAEzCtB,EAAmBhE,KAAK0E,OAnB5B,IAAI,EAAJ,qBAAuD,IADF,mCA2BzD,IAAIa,EAAoB,CACtBC,cAAe,EAAK3G,MAAM4G,eAC1BzE,UAAW,EAAKnC,MAAMmC,UACtBC,QAAS,EAAKpC,MAAMoC,QACpBJ,WAAY,EAAKhC,MAAMgC,WACvB6E,uBAAwB1B,EACxBnC,WAAY,EAAKhD,MAAM8G,gBACvBC,cAAe,EAAK/G,MAAMgH,mBAC1BC,mBAAoB,EAAKjH,MAAMS,eAAeyG,KAAI,SAAAlG,GAAU,MAAO,CAACuB,SAAUvB,EAAKC,OAAQJ,KAAMG,EAAKH,SACtGJ,eAAgB,EAAKT,MAAMS,eAAeyG,KAAI,SAAAlG,GAAI,OAAIA,EAAKC,UAC3DM,gBAAiB,EAAKvB,MAAMuB,gBAAgB2F,KAAI,SAAAlG,GAAI,OAAIA,EAAKC,UAC7DkG,MAAO,EAAKnH,MAAMmH,MAClBC,IAAK,EAAKpH,MAAMoH,IAChBC,eAAgB,EAAKrH,MAAMqH,eAC3BC,UAAW,EAAKtH,MAAMsH,WAGxB,EAAKpH,SAAS,CAACqH,SAAS,IAAO,WAC7BC,IAAcC,uBAAuB,iBAAkBf,GACpDgB,MAAM,SAAAC,GAGL,QAAKhF,IAAcgF,EAAIC,KAAKA,OAASD,EAAIC,KAAKC,OAG5C,OAFA,EAAK3H,SAAU,CAAEqH,SAAS,SAC1B1C,IAAMC,MAAM6C,EAAIC,KAAKE,SAIvB,EAAK5H,SAAS,CAACqH,SAAQ,EAAOQ,gBAAiBJ,EAAIC,KAAKA,KAAKG,gBAAiB/C,OAAO,OAGtFgD,OAAO,SAAAC,QACctF,IAAjBsF,EAAIC,UAAkD,MAAxBD,EAAIC,SAASL,QAC5CM,aAAaC,QACb,EAAK1I,MAAM2I,QAAQlH,KAAK,YAGxB,EAAKjB,SAAU,CAAEqH,SAAS,IAC1B1C,IAAMC,MAAMmD,EAAIH,iBApyBV,EAo5BlBQ,mBAAqB,SAAAhI,GACnB,IAAMI,EAAQJ,EAAMyB,OAAOrB,MAC3B,EAAKR,SAAS,CAAC4G,gBAAiBpG,EAAOc,mBAAoB,KAC3D,EAAK+G,wBAAwB7H,GAC7B,EAAKW,YAAY,CAACmH,iBAAkB9H,KAx5BpB,EA25BlB+H,qBAAuB,SAAClG,EAAUjC,GAChC,IAAIyC,EAAqB,EAAK/C,MAAM+C,wBAEAJ,IAAjCI,EAAmBR,IAAyB,WAC7C,IAD4C,EACxCmG,EAAgB,GAChBxF,EAAkBH,EAAmBR,GAAUU,6BAA6BiE,KAAI,SAAAlG,GAAI,OAAIA,EAAKkC,mBAFrD,cAG/BA,GAH+B,yBAGpCyC,EAHoC,QAI1CP,OAAOC,KAAKM,GAAGL,SAAQ,SAACC,EAAK5D,QACCgB,IAAzBgD,EAAEJ,GAAKvB,eACR0E,EAAcvH,KAAKwE,EAAEJ,GAAKvB,mBAHhC,IAAI,EAAJ,qBAA8B,IAHc,8BAS5CjB,EAAmBR,GAAnB,cAAgDmG,EAChD,EAAKxI,SAAS,CAAC6C,mBAAoBA,IAVU,IA55B/C,EAAK/C,MAAQ,CACXgF,OAAO,EACPxE,WAAY,GACZ+G,SAAS,EACToB,UAAW,EACXC,iBAAiB,EACjBtH,SAAU,GACVuH,UAAW,CAACC,UAAW,GAAIC,WAAY,GAAI/F,WAAY,GAAI+C,WAAY,GAAIiD,kBAAmB,GAAIC,kBAAmB,GAAIjF,cAAe,GAAKkF,YAAa,GAAIC,QAAS,GAAIC,KAAM,GAAIpJ,MAAO,GAAIqJ,QAAS,GAAIhD,YAAa,GAAIxF,KAAM,GAAIgH,OAAQ,IAChPyB,OAAQ,CAACC,aAAc,GAAIC,cAAe,GAAIxG,WAAY,GAAI+C,WAAY,GAAIiD,kBAAmB,GAAIC,kBAAmB,GAAIjF,cAAe,IAC3IyF,WAAW,EACXC,WAAY,CAAEC,iBAAkB,GAAIN,QAAS,GAAIrJ,MAAO,GAAI4J,cAAe,IAC3EvG,aAAc,GACdwG,mBAAmB,GACnBC,aAAc,GACdC,eAAgB,GAChB9J,UAAW,EACXG,WAAY,IACZO,kBAAmB,GACnBF,eAAgB,GAChBe,mBAAoB,GACpBD,gBAAiB,GACjBS,WAAY,GACZQ,kBAAmB,GACnBE,4BAA6B,GAC7BK,mBAAoB,GACpBqB,oBAAqB,GACrB4F,4BAA6B,GAC7BC,WAAY,GACZ9H,UAAU,GACVC,QAAQ,GACRwE,eAAgB,GAChBsD,qBAAsB,GACtBpD,gBAAiB,GACjBE,mBAAoB,GACpBuB,wBAAyB,GACzB4B,aAAc,OACdC,mBAAoB,GACpBC,uBAAwB,GACxBvJ,aAAc,GACdwJ,aAAc,GACdhD,UAAW,GACXH,MAAO,GACPC,IAAK,GACLC,eAAgB,IAIlB,EAAKkB,wBAA0B,EAAKA,wBAAwBgC,KAA7B,gBAjDf,E,gEAwDhBC,KAAKhK,aACLgK,KAAKnJ,cACLmJ,KAAKV,eACLU,KAAKJ,qBACLI,KAAKN,uBACLM,KAAKF,iB,mCAKsB,IAAD,OAAjBZ,EAAiB,uDAAJ,GAClBe,EAAc,QAEQ9H,IAAvB+G,EAAWL,SAAgD,KAAvBK,EAAWL,UAChDoB,GAA+B,KAAfA,EAAsB,YAAYf,EAAWL,QAAS,YAAYK,EAAWL,cACvE1G,IAArB+G,EAAW1J,OAA4C,KAArB0J,EAAW1J,QAC9CyK,GAA+B,KAAfA,EAAsB,UAAUf,EAAW1J,MAAO,UAAU0J,EAAW1J,YACzD2C,IAA7B+G,EAAWE,eAA4D,KAA7BF,EAAWE,gBACtDa,GAA+B,KAAfA,EAAsB,YAAYf,EAAWE,cAAe,YAAYF,EAAWE,oBAC5DjH,IAAtC+G,EAAWW,wBAA8E,KAAtCX,EAAWW,yBAC/DI,GAA+B,KAAfA,EAAsB,qBAAqBf,EAAWW,uBAAwB,qBAAqBX,EAAWW,wBAChIG,KAAKtK,SAAS,CAACqH,SAAS,IAAO,WAC7BC,IAAckD,sBAAsB,UAAUD,GAC3C/C,MAAM,SAAAC,GAGL,QAAKhF,IAAcgF,EAAIC,KAAKA,OAASD,EAAIC,KAAKC,OAG5C,OAFA,EAAK3H,SAAU,CAAEqH,SAAS,SAC1B1C,IAAMC,MAAM6C,EAAIC,KAAKE,SAIvB,EAAK5H,SAAS,CAACqH,SAAQ,EAAO/G,WAAYmH,EAAIC,KAAKA,UAGpDI,OAAO,SAAAC,QACctF,IAAjBsF,EAAIC,UAAkD,MAAxBD,EAAIC,SAASL,QAC5CM,aAAaC,QACb,EAAK1I,MAAM2I,QAAQlH,KAAK,YAGxB,EAAKjB,SAAU,CAAEqH,SAAS,IAC1B1C,IAAMC,MAAMmD,EAAIH,kB,oCAMI,IAAD,OAAjB4B,EAAiB,uDAAJ,GAEnBiB,EAAe,QACgBhI,IAAhC+G,EAAWlB,kBAAkE,KAAhCkB,EAAWlB,mBACzDmC,GAAiC,KAAhBA,EAAuB,qBAAqBjB,EAAWlB,iBAAkB,qBAAqBkB,EAAWlB,uBACtF7F,IAAnC+G,EAAWkB,qBAAwE,KAAnClB,EAAWkB,sBAC5DD,GAAiC,KAAhBA,EAAuB,wBAAwBjB,EAAWkB,oBAAqB,wBAAwBlB,EAAWkB,qBACtIpD,IAAckD,sBAAsB,eAAeC,GAC/CjD,MAAM,SAAAC,GAGL,GAFAkD,QAAQC,IAAInD,QAEPhF,IAAcgF,EAAIC,KAAKA,OAASD,EAAIC,KAAKC,OAG5C,OAFA,EAAK3H,SAAU,CAAGqH,SAAS,SAC3B1C,IAAMC,MAAM6C,EAAIC,KAAKE,SAIvB,EAAK5H,SAAS,CAACqH,SAAQ,EAAOjG,SAAUqG,EAAIC,KAAKA,KAAKmD,iBAGvD/C,OAAO,SAAAC,QAEctF,IAAjBsF,EAAIC,UAAkD,MAAxBD,EAAIC,SAASL,QAC5CM,aAAaC,QACb,EAAK1I,MAAM2I,QAAQlH,KAAK,YAGxB,EAAKjB,SAAU,CAAEqH,SAAS,IAC1B1C,IAAMC,MAAMmD,EAAIH,e,qCAKR,IAAD,OAEbN,IAAckD,sBAAsB,qBACjChD,MAAM,SAAAC,GAGL,GAFAkD,QAAQC,IAAInD,QAEPhF,IAAcgF,EAAIC,KAAKA,OAASD,EAAIC,KAAKC,OAG5C,OAFA,EAAK3H,SAAU,CAAGqH,SAAS,SAC3B1C,IAAMC,MAAM6C,EAAIC,KAAKE,SAIvB,EAAK5H,SAAS,CAAC4J,aAAcnC,EAAIC,KAAKA,UAGvCI,OAAO,SAAAC,QACctF,IAAjBsF,EAAIC,UAAkD,MAAxBD,EAAIC,SAASL,QAC5CM,aAAaC,QACb,EAAK1I,MAAM2I,QAAQlH,KAAK,WAGxB0D,IAAMC,MAAMmD,EAAIH,c,6CAMA,IAAD,OAErBN,IAAckD,sBAAsB,YACjChD,MAAM,SAAAC,GAGL,GAFAkD,QAAQC,IAAInD,QAEPhF,IAAcgF,EAAIC,KAAKA,OAASD,EAAIC,KAAKC,OAG5C,OAFA,EAAK3H,SAAU,CAAGqH,SAAS,SAC3B1C,IAAMC,MAAM6C,EAAIC,KAAKE,SAIvB,EAAK5H,SAAS,CAACgK,qBAAsBvC,EAAIC,KAAKA,UAG/CI,OAAO,SAAAC,QACctF,IAAjBsF,EAAIC,UAAkD,MAAxBD,EAAIC,SAASL,QAC5CM,aAAaC,QACb,EAAK1I,MAAM2I,QAAQlH,KAAK,WAGxB0D,IAAMC,MAAMmD,EAAIH,c,8CAMA9E,GAAa,IAAD,OAChB,KAAfA,EAIHwH,KAAKtK,SAAS,CAACqH,SAAS,IAAO,WAC7BC,IAAckD,sBAAsB,YAAY1H,GAC/C0E,MAAM,SAAAC,GAGL,GAFAkD,QAAQC,IAAInD,QAEPhF,IAAcgF,EAAIC,KAAKA,OAASD,EAAIC,KAAKC,OAG5C,OAFA,EAAK3H,SAAU,CAAGqH,SAAS,SAC3B1C,IAAMC,MAAM6C,EAAIC,KAAKE,SAIvB,EAAK5H,SAAS,CAACqI,wBAAyBZ,EAAIC,KAAKA,KAAMZ,mBAAoB,GAAIO,SAAS,OAGzFS,OAAO,SAAAC,GACN,EAAK/H,SAAS,CAACqH,SAAS,SACJ5E,IAAjBsF,EAAIC,UAAkD,MAAxBD,EAAIC,SAASL,QAC5CM,aAAaC,QACb,EAAK1I,MAAM2I,QAAQlH,KAAK,WAGxB0D,IAAMC,MAAMmD,EAAIH,eAxBpB0C,KAAKtK,SAAS,CAACqI,wBAAyB,GAAIvB,mBAAoB,O,2CA+B9C,IAAD,OAEnBQ,IAAckD,sBAAsB,kBACjChD,MAAM,SAAAC,GAGL,GAFAkD,QAAQC,IAAInD,QAEPhF,IAAcgF,EAAIC,KAAKA,OAASD,EAAIC,KAAKC,OAG5C,OAFA,EAAK3H,SAAU,CAAGqH,SAAS,SAC3B1C,IAAMC,MAAM6C,EAAIC,KAAKE,SAIvB,EAAK5H,SAAS,CAACkK,mBAAoBzC,EAAIC,KAAKA,UAG7CI,OAAO,SAAAC,QACctF,IAAjBsF,EAAIC,UAAkD,MAAxBD,EAAIC,SAASL,QAC5CM,aAAaC,QACb,EAAK1I,MAAM2I,QAAQlH,KAAK,WAGxB0D,IAAMC,MAAMmD,EAAIH,c,qCAOT,IAAD,OACZN,IAAckD,sBAAsB,YACjChD,MAAM,SAAAC,GAGL,QAAKhF,IAAcgF,EAAIC,KAAKA,OAASD,EAAIC,KAAKC,OAG5C,OAFA,EAAK3H,SAAU,CAAGqH,SAAS,SAC3B1C,IAAMC,MAAM6C,EAAIC,KAAKE,SAIvB,EAAK5H,SAAS,CAACoK,aAAc3C,EAAIC,KAAKA,UAGvCI,OAAO,SAAAC,QACctF,IAAjBsF,EAAIC,UAAkD,MAAxBD,EAAIC,SAASL,QAC5CM,aAAaC,QACb,EAAK1I,MAAM2I,QAAQlH,KAAK,WAGxB0D,IAAMC,MAAMmD,EAAIH,c,sCAKR9E,EAAYgI,GAAyD,IAAD,OAA9CC,EAA8C,uDAA5B,SAEtD,GAAkB,KAAfjI,EAmBHwH,KAAKtK,SAAU,CAAEqH,SAAS,IAAO,WAE/BC,IAAckD,sBAAsB,uBAAuB1H,GAC1D0E,MAAM,SAAAC,GAGL,GAFAkD,QAAQC,IAAInD,QAEPhF,IAAcgF,EAAIC,KAAKA,OAASD,EAAIC,KAAKC,OAG5C,OAFA,EAAK3H,SAAU,CAAGqH,SAAS,SAC3B1C,IAAMC,MAAM6C,EAAIC,KAAKE,SASvB,GAAuB,WAApBmD,EAA6B,CAC9B,IAAIlI,EAAqB,EAAK/C,MAAM+C,wBACAJ,IAAjCI,EAAmBiI,GACpBjI,EAAmBiI,GAAU3H,aAAesE,EAAIC,KAAKA,KAErD7E,EAAmBiI,GAAY,CAACE,aAAcvD,EAAIC,KAAKA,KAAM3E,6BAA8B,CAAC,CAACC,gBAAiB,MAChH,EAAKhD,SAAS,CAAC6C,mBAAoBA,SAEhC,GAAuB,YAApBkI,EAA8B,CACpC,IAAI7G,EAAsB,EAAKpE,MAAMoE,yBACAzB,IAAlCyB,EAAoB4G,GACrB5G,EAAoB4G,GAAU3H,aAAesE,EAAIC,KAAKA,KAEtDxD,EAAoB4G,GAAY,CAACE,aAAcvD,EAAIC,KAAKA,MAC1D,EAAK1H,SAAS,CAACkE,oBAAqBA,IAEtC,EAAKlE,SAAS,CAACqH,SAAS,OAGzBS,OAAO,SAAAC,QACctF,IAAjBsF,EAAIC,UAAkD,MAAxBD,EAAIC,SAASL,QAC5CM,aAAaC,QACb,EAAK1I,MAAM2I,QAAQlH,KAAK,YAGxB,EAAKjB,SAAU,CAAGqH,SAAS,IAC3B1C,IAAMC,MAAMmD,EAAIH,qBA7DpB,GAAuB,WAApBmD,EAA6B,CAC9B,IAAIlI,EAAqByH,KAAKxK,MAAM+C,wBACAJ,IAAjCI,EAAmBiI,GACpBjI,EAAmBiI,GAAU3H,aAAe,GAE5CN,EAAmBiI,GAAY,CAACE,aAAc,GAAIjI,6BAA8B,CAAC,CAACC,gBAAiB,MACrGsH,KAAKtK,SAAS,CAAC6C,mBAAoBA,SAEhC,GAAuB,YAApBkI,EAA8B,CACpC,IAAI7G,EAAsBoG,KAAKxK,MAAMoE,yBACAzB,IAAlCyB,EAAoB4G,GACrB5G,EAAoB4G,GAAU3H,aAAe,GAE7Ce,EAAoB4G,GAAY,CAACE,aAAc,IACjDV,KAAKtK,SAAS,CAACkE,oBAAqBA,O,gCA8DhCnE,GACRuK,KAAKtK,SAAS,CAACD,UAAWA,M,sCAwc1B,IAAIwJ,GAAY,EACZQ,EAAa,GAmCjB,GAlCwC,IAArCO,KAAKxK,MAAMS,eAAeS,SAC3B+I,EAAWxJ,eAAiB,6CAC5BgJ,GAAY,GAE2B,IAAtCe,KAAKxK,MAAMuB,gBAAgBL,SAC5B+I,EAAW1I,gBAAkB,wCAC7BkI,GAAY,GAGmB,KAA9Be,KAAKxK,MAAM4G,iBACZqD,EAAWrD,eAAiB,iCAC5B6C,GAAY,GAGoB,KAA/Be,KAAKxK,MAAM8G,kBACZmD,EAAWnD,gBAAkB,wBAC7B2C,GAAY,GAGuB,KAAlCe,KAAKxK,MAAMgH,qBACZiD,EAAWjD,mBAAqB,4BAChCyC,GAAY,GAGc,KAAzBe,KAAKxK,MAAMmC,YACZ8H,EAAW9H,UAAY,sCACvBsH,GAAY,GAGY,KAAvBe,KAAKxK,MAAMoC,UACZ6H,EAAW7H,QAAU,oCACrBqH,GAAY,GAGsB,IAAjCe,KAAKxK,MAAMgC,WAAWd,OACvB+I,EAAWjI,WAAa,kCACxByH,GAAY,OAGZ,IAAI,IAAIvH,EAAI,EAAGA,EAAIsI,KAAKxK,MAAMgC,WAAWd,OAAQgB,IAAI,CAEnD,IAAIiJ,EAAaX,KAAKxK,MAAMgC,WAAWE,GAEX,KAAzBiJ,EAAWhJ,WAA2C,KAAvBgJ,EAAW/I,UAC3C6H,EAAWjI,WAAa,yDACxByH,GAAY,GAMlB,OADAe,KAAKtK,SAAS,CAAC+J,WAAYA,IACpBR,I,sCAIO,IAAD,OACTA,GAAY,EAUhB,OARkE,IAA/DrE,OAAOC,KAAKmF,KAAKxK,MAAM0C,6BAA6BxB,OACrDuI,GAAY,EAEZrE,OAAOC,KAAKmF,KAAKxK,MAAM0C,6BAA6B4C,SAAQ,SAACC,EAAK5D,GAC5DyJ,MAAMC,QAAQ,EAAKrL,MAAM0C,4BAA4B6C,KAAgE,IAAvD,EAAKvF,MAAM0C,4BAA4B6C,GAAKrE,SAC5GuI,GAAY,MAGXA,I,sCAIP,IAAIA,GAAY,EA4BhB,OAzByD,IAAtDrE,OAAOC,KAAKmF,KAAKxK,MAAM+C,oBAAoB7B,QAAgBkE,OAAOC,KAAKmF,KAAKxK,MAAM+C,oBAAoB7B,SAAWsJ,KAAKxK,MAAMS,eAAeS,OAC5IuI,GAAY,EAEZrE,OAAOC,KAAKmF,KAAKxK,MAAM+C,oBAAoBuC,SAAQ,SAACC,EAAK5D,OAsBpD8H,I,+BA2BC,IAAD,WAE2Ie,KAAKxK,MAA/IC,EAFD,EAECA,UAAWO,EAFZ,EAEYA,WAAYc,EAFxB,EAEwBA,SAAU2I,EAFlC,EAEkCA,WAAY1C,EAF9C,EAE8CA,QAAS2C,EAFvD,EAEuDA,qBAAsB3B,EAF7E,EAE6EA,wBAAyB6B,EAFtG,EAEsGA,mBAAoBE,EAF1H,EAE0HA,aAC7HgB,EAA4B,GAHzB,cAIMd,KAAKxK,MAAMuB,iBAJjB,yBAICoE,EAJD,QAKLP,OAAOC,KAAK,EAAKrF,MAAM0C,6BAA6B4C,SAAQ,SAACC,EAAK5D,GAEhE,GADyB,EAAK3B,MAAM0C,4BAA4B6C,GAAKxE,QAAO,SAASC,GAAQ,OAAOA,EAAKC,SAAW0E,EAAE1E,UAChGC,OAAS,EAAG,CAChC,IAAIN,EAAa,EAAKZ,MAAMS,eAAeM,QAAO,SAASC,GAAO,OAAOA,EAAKC,SAAWsE,KACtF3E,EAAWM,OAAS,SACsByB,IAAxC2I,EAA0B3F,EAAE1E,QAC7BqK,EAA0B3F,EAAE1E,QAAQE,KAAKP,EAAW,IAGpD0K,EAA0B3F,EAAE1E,QAAU,CAACL,EAAW,UAV5D,IAAI,EAAJ,qBAAyC,IAJlC,8BAmBP,IAAI2K,EAAe,GAKvB,OAHOhE,IACDgE,EAAgB,kBAAC,IAAD,OAGtB,yBAAKC,UAAU,4BACXD,EACD,yBAAKC,UAAU,uBACZ,yBAAKA,UAAU,sBACZ,kBAAC,IAAD,CAASC,WAAYxL,EAAWuL,UAAU,QAAQE,qBAAwB,CAACC,cAAe,UAAWC,YAAa,UAAWC,eAAgB,UAAWC,MAAO,SAAUC,sBAAwB,GACjM,kBAAC,IAAD,CAAMC,MAAM,wBAAwBR,UAA2B,IAAdvL,EAAkB,SAAW,GAAIgM,SAClF,kBAACC,EAAD,CAAWC,SAAU,qCACrBC,UAAanM,EAAY,EAAkBoM,OAAwB,IAAdpM,IACrD,kBAAC,IAAD,CAAM+L,MAAM,yBAAyBR,UAA2B,IAAdvL,EAAkB,SAAW,GAAIgM,SACnF,kBAACC,EAAD,CAAWC,SAAU,kCACrBC,UAAanM,EAAY,EAAiBoM,OAAwB,IAAdpM,IACpD,kBAAC,IAAD,CAAM+L,MAAM,wBAAwBR,UAA2B,IAAdvL,EAAkB,SAAW,GAAIgM,SAClF,kBAACC,EAAD,CAAWC,SAAU,6BACrBC,UAAanM,GAAa,EAAmBoM,OAAwB,IAAdpM,KAExC,IAAdA,GAAmB,yBAAKuL,UAAU,kBAC5B,kBAAC,IAAD,KAEM,kBAAC,IAAD,CAAKc,GAAI,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAQ,QAAf,wBACA,kBAAC,IAAD,CAAOC,YAAY,uBAAuBC,aAAyC9J,IAA9BsH,EAAWrD,gBAA8D,KAA9BqD,EAAWrD,eAAsCnD,KAAK,iBAAiBiJ,SAAY,SAACpM,GAAW,EAAKJ,SAAS,CAAC0G,eAAgBtG,EAAMyB,OAAOrB,SAAUiM,UAAQ,IAC7P,yBAAKnB,UAAU,oBACZvB,EAAWrD,kBAIlB,kBAAC,IAAD,CAAKgG,GAAI,GACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOL,QAAQ,yBAAf,gBAAoD,0BAAMf,UAAU,aAAhB,MACpD,kBAAC,IAAD,CAAOqB,KAAK,SAASL,YAAY,GAAGM,GAAG,wBAAwBL,aAA2C9J,IAAlCsH,EAAU,iBAAuE,KAAlCA,EAAU,gBAA4BxG,KAAK,wBAAwB/C,MAAO8J,KAAKxK,MAAM8G,gBAAiB4F,SAAUlC,KAAKlC,oBAC1O,4BAAQ5H,MAAM,IAAd,UACCwJ,EAAqBhD,KAAI,SAAC6F,EAAcpL,GAAf,OACxB,kBAACqL,EAAD,CAAyBzH,IAAK5D,EAAOoL,aAAcA,QAGvD,yBAAKvB,UAAU,oBACVvB,EAAU,mBAInB,kBAAC,IAAD,CAAK2C,GAAI,GACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOL,QAAQ,4BAAf,mBAA0D,0BAAMf,UAAU,aAAhB,MAC1D,kBAAC,IAAD,CAAOqB,KAAK,SAASL,YAAY,GAAGM,GAAG,2BAA2BL,aAA8C9J,IAArCsH,EAAU,oBAA6E,KAArCA,EAAU,mBAA+BxG,KAAK,2BAA2B/C,MAAO8J,KAAKxK,MAAMgH,mBAAoB0F,SAAU,SAACpM,GAAW,EAAKJ,SAAS,CAAC8G,mBAAoB1G,EAAMyB,OAAOrB,MAAOc,mBAAoB,KAAM,EAAKH,YAAY,CAACmH,iBAAkB,EAAKxI,MAAM8G,gBAAiB8D,oBAAqBtK,EAAMyB,OAAOrB,UACnb,4BAAQA,MAAM,IAAd,UACC6H,EAAwBrB,KAAI,SAAC6F,EAAcpL,GAAf,OAC3B,kBAACqL,EAAD,CAAyBzH,IAAK5D,EAAOoL,aAAc,CAAC/J,WAAY+J,EAAahG,cAAekG,aAAcF,EAAaG,uBAG3H,yBAAK1B,UAAU,oBACVvB,EAAU,sBAInB,kBAAC,IAAD,CAAKqC,GAAI,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAQ,QAAf,SACA,kBAAC,IAAD,CAAOC,YAAY,QAAQC,aAAgC9J,IAArBsH,EAAW9C,OAA4C,KAArB8C,EAAW9C,MAA6B1D,KAAK,QAAQiJ,SAAY,SAACpM,GAAW,EAAKJ,SAAS,CAACiH,MAAO7G,EAAMyB,OAAOrB,WACxL,yBAAK8K,UAAU,oBACZvB,EAAW9C,SAIlB,kBAAC,IAAD,CAAKmF,GAAI,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAQ,QAAf,OACA,kBAAC,IAAD,CAAOC,YAAY,MAAMC,aAA8B9J,IAAnBsH,EAAW7C,KAAwC,KAAnB6C,EAAW7C,IAA2B3D,KAAK,MAAMiJ,SAAY,SAACpM,GAAW,EAAKJ,SAAS,CAACkH,IAAK9G,EAAMyB,OAAOrB,WAC9K,yBAAK8K,UAAU,oBACZvB,EAAW7C,OAIlB,kBAAC,IAAD,CAAKkF,GAAI,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAQ,QAAf,mBACA,kBAAC,IAAD,CAAOC,YAAY,kBAAkBC,aAAyC9J,IAA9BsH,EAAW5C,gBAA8D,KAA9B4C,EAAW5C,eAAsC5D,KAAK,iBAAiBiJ,SAAY,SAACpM,GAAW,EAAKJ,SAAS,CAACmH,eAAgB/G,EAAMyB,OAAOrB,WACtO,yBAAK8K,UAAU,oBACZvB,EAAW5C,kBAIlB,kBAAC,IAAD,CAAKuF,GAAI,GACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOL,QAAQ,aAAf,kBACA,kBAAC,IAAD,CAAOM,KAAK,SAASL,YAAY,GAAGM,GAAG,YAAYL,aAAqC9J,IAA5BsH,EAAU,WAA2D,KAA5BA,EAAU,UAAsBxG,KAAK,YAAY/C,MAAO8J,KAAKxK,MAAMsH,UAAWoF,SAAU,SAACpM,GAAW,EAAKJ,SAAS,CAACoH,UAAWhH,EAAMyB,OAAOrB,UAC9O,4BAAQA,MAAM,IAAd,UACC4J,EAAapD,KAAI,SAAC6F,EAAcpL,GAAf,OAChB,kBAACqL,EAAD,CAAyBzH,IAAK5D,EAAOoL,aAAc,CAAC/J,WAAY+J,EAAazF,UAAW2F,aAAcF,EAAaI,mBAGvH,yBAAK3B,UAAU,oBACVvB,EAAU,aAInB,kBAAC,IAAD,CAAKqC,GAAI,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAQ,OAAOa,OAAK,GAA3B,4BAEF,kBAAC,IAAD,CAAWA,OAAK,EAACC,QAAM,GACrB,kBAAC,IAAD,CAAOd,QAAQ,OAAOa,OAAK,GAAC,kBAAC,IAAD,CAAOP,KAAK,QAAQnM,MAAQ,OAAO4M,QAAwC,SAA5B9C,KAAKxK,MAAMmK,aAAuCuC,SAAY,SAACpM,GAAY,EAAKJ,SAAS,CAACiK,aAAc,OAAQxJ,kBAAmB,KAAM,EAAKH,gBAAzN,SAEF,kBAAC,IAAD,CAAW4M,OAAK,EAACC,QAAM,GACrB,kBAAC,IAAD,CAAOd,QAAQ,OAAOa,OAAK,GAAC,kBAAC,IAAD,CAAOP,KAAK,QAAQpJ,KAAK,iBAAiB6J,QAAwC,mBAA5B9C,KAAKxK,MAAMmK,aAAiDuC,SAAY,SAACpM,GAAY,EAAKJ,SAAS,CAACiK,aAAc,iBAAkBE,uBAAwB,GAAI1J,kBAAmB,KAAM,EAAKH,gBAAhR,oBAK0B,mBAA5BgK,KAAKxK,MAAMmK,cAAqC,kBAAC,IAAD,CAAKmC,GAAK,KACxD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAQ,QAAf,yBACA,kBAAC,IAAD,CAAOM,KAAK,SAASL,YAAY,0BAA0B9L,MAAS8J,KAAKxK,MAAMqK,uBAAwByC,GAAG,yBAAyBJ,SAAY,SAACpM,GAAY,EAAKJ,SAAS,CAACmK,uBAAwB/J,EAAMyB,OAAOrB,MAAOC,kBAAmB,KAAO,EAAKH,WAAW,CAAC6J,uBAAwB/J,EAAMyB,OAAOrB,SAAY+C,KAAK,0BACpT,4BAAQ/C,MAAM,IAAd,UACC0J,EAAmBlD,KAAI,SAACqG,EAAU5L,GAAX,OACtB,4BAAQjB,MAAS6M,EAASC,iBAAkBjI,IAAK5D,GAAQ4L,EAASE,wBAGxE,yBAAKjC,UAAU,oBACZvB,EAAWxJ,kBAKpB,kBAAC,IAAD,CAAK6L,GAAI,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAQ,QAAf,uBACA,kBAAC,IAAD,CAAOM,KAAK,SAASL,YAAY,wBAAwBC,aAAyC9J,IAA9BsH,EAAWxJ,gBAA8D,KAA9BwJ,EAAWxJ,eAAsCC,MAAS8J,KAAKxK,MAAMW,kBAAmBmM,GAAG,SAASJ,SAAY,SAACpM,GAAY,EAAKJ,SAAS,CAACS,kBAAmBL,EAAMyB,OAAOrB,SAAY+C,KAAK,UACxS,4BAAQ/C,MAAM,IAAd,UACCF,EAAW0G,KAAI,SAACqG,EAAU5L,GAAX,OACd,4BAAQjB,MAASiB,EAAO4D,IAAK5D,GAAQ4L,EAAS/N,MAA9C,IAAsD+N,EAASG,UAA/D,IAA2EH,EAASI,cAG1F,yBAAKnC,UAAU,oBACZvB,EAAWxJ,kBAKlB,kBAAC,IAAD,CAAK6L,GAAI,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAQ,QAAf,4BACA,kBAAC,IAAD,CAAOM,KAAK,SAASL,YAAY,6BAA6B9L,MAAS8J,KAAKxK,MAAMc,aAAcgM,GAAG,eAAeJ,SAAY,SAACpM,GAAY,EAAKJ,SAAS,CAACY,aAAcR,EAAMyB,OAAOrB,SAAY+C,KAAK,gBAClM,4BAAQ/C,MAAM,IAAd,UACA,4BAAQA,MAAM,0BAAd,0BACA,4BAAQA,MAAM,oBAAd,oBACA,4BAAQA,MAAM,eAAd,eACA,8BAAUsL,MAAM,mBACd,4BAAQtL,MAAM,iBAAd,iBACA,4BAAQA,MAAM,iBAAd,iBACA,4BAAQA,MAAM,iBAAd,qBAOV,kBAAC,IAAD,CAAK4L,GAAI,KACP,yBAAKd,UAAU,0BAA0BoC,SAA6C,KAAjCpD,KAAKxK,MAAMW,kBAAyCkN,QAAWrD,KAAKnK,iBAAzH,QAEAmK,KAAKxK,MAAMS,eAAeS,OAAS,GAAK,kBAAC,IAAD,CAAKoL,GAAM,MACnD,yBAAKd,UAAU,UACb,kBAAC,IAAD,KACGhB,KAAKxK,MAAMS,eAAeyG,KAAI,SAAC4G,EAAkBC,GAAnB,OAC7B,kBAAC,IAAD,CAAKzB,GAAI,IAAK/G,IAAOwI,GACnB,yBAAKvC,UAAU,oBACZsC,EAAiBJ,UADpB,IACgCI,EAAiBH,SADjD,SACsFhL,IAA1BmL,EAAiBjN,MAAgD,KAA1BiN,EAAiBjN,KAAxD,WAA0EiN,EAAiBjN,KAA3F,KAAqG,GAC/J,4BAAQ2K,UAAU,4BAA4BqC,QAAW,SAACvN,GAAW,EAAKoB,qBAAqBqM,EAAazN,KAAS,uBAAGkL,UAAU,0BAatJ,kBAAC,IAAD,CAAKA,UAAU,QACP,kBAAC,IAAD,CAAKc,GAAI,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAQ,QAAf,kBACA,kBAAC,IAAD,CAAOM,KAAK,SAASL,YAAY,mBAAmBC,aAA0C9J,IAA/BsH,EAAW1I,iBAAgE,KAA/B0I,EAAW1I,gBAAuCb,MAAS8J,KAAKxK,MAAMwB,mBAAoBsL,GAAG,UAAUJ,SAAY,SAACpM,GAAY,EAAKJ,SAAS,CAACsB,mBAAoBlB,EAAMyB,OAAOrB,SAAY+C,KAAK,WACxS,4BAAQ/C,MAAM,IAAd,UACCY,EAAS4F,KAAI,SAACqG,EAAU5L,GAAX,OACZ,4BAAQjB,MAASiB,EAAO4D,IAAK5D,GAAQ4L,EAASG,UAA9C,IAA0DH,EAASI,cAGvE,yBAAKnC,UAAU,oBACZvB,EAAW1I,mBAKpB,kBAAC,IAAD,CAAK+K,GAAI,KACP,yBAAKd,UAAU,0BAA0BoC,SAA8C,KAAlCpD,KAAKxK,MAAMwB,mBAA0CqM,QAAWrD,KAAKpJ,kBAA1H,QAGNoJ,KAAKxK,MAAMuB,gBAAgBL,OAAS,GAAK,kBAAC,IAAD,CAAKoL,GAAM,MAClD,yBAAKd,UAAU,UACf,kBAAC,IAAD,KACGhB,KAAKxK,MAAMuB,gBAAgB2F,KAAI,SAACzF,EAAaoB,GAAd,OAC9B,kBAAC,IAAD,CAAKyJ,GAAI,IAAK/G,IAAO1C,GACnB,yBAAK2I,UAAU,oBACZ/J,EAAYiM,UADf,IAC2BjM,EAAYkM,SACrC,4BAAQnC,UAAU,4BAA4BqC,QAAW,SAACvN,GAAW,EAAKuB,sBAAsBgB,EAAcvC,KAAS,uBAAGkL,UAAU,0BAWlJ,kBAAC,IAAD,CAAKA,UAAU,QACP,kBAAC,IAAD,CAAKc,GAAI,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAQ,QAAf,uBACA,kBAAC,IAAD,CAAYf,UAAY,eAAeiB,aAAoC9J,IAAzBsH,EAAW9H,WAAoD,KAAzB8H,EAAW9H,UAAiC6L,WAAa,aAAcC,gBAAkB,aAAaC,QAAU,IAAIC,KAAQC,QAAW5D,KAAKxK,MAAMoC,QAASiM,SAAY7D,KAAKxK,MAAMmC,UAAWuK,SAAY,SAAC4B,GAAU,EAAKpO,SAAS,CAACiC,UAAWmM,KAAU9B,YAAY,eAAeM,GAAG,YAAarJ,KAAK,YAAYkJ,UAAQ,IACpZ,yBAAKnB,UAAU,6BACZvB,EAAW9H,aAMlB,kBAAC,IAAD,CAAKmK,GAAI,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAQ,QAAf,mBACA,kBAAC,IAAD,CAAYf,UAAY,eAAeiB,aAAkC9J,IAAvBsH,EAAW7H,SAAgD,KAAvB6H,EAAW7H,QAA+B4L,WAAa,aAAaC,gBAAkB,WAAWC,aAAoCvL,IAAzB6H,KAAKxK,MAAMmC,WAAoD,KAAzBqI,KAAKxK,MAAMmC,UAAmBqI,KAAKxK,MAAMmC,UAAY,IAAIgM,KAAQE,SAAY7D,KAAKxK,MAAMoC,QAASsK,SAAY,SAAC4B,GAAU,EAAKpO,SAAS,CAACkC,QAASkM,KAAW9B,YAAY,aAAaM,GAAG,UAAWrJ,KAAK,UAAUkJ,UAAQ,IACjc,yBAAKnB,UAAU,6BACZvB,EAAW7H,YAM1B,kBAAC,IAAD,CAAKoJ,UAAU,QACP,kBAAC,IAAD,CAAKc,GAAI,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAQ,QAAf,iBACA,kBAAC,IAAD,CAAOM,KAAK,SAASJ,aAAqC9J,IAA1BsH,EAAWjI,YAAsD,KAA1BiI,EAAWjI,WAAkCwK,YAAY,iBAAiB9L,MAAM,GAAGoM,GAAG,QAAQJ,SAAYlC,KAAK1I,gBAAkB2B,KAAK,SACzM,4BAAQ/C,MAAM,IAAd,UACA,4BAAQA,MAAM,KAAd,WACA,4BAAQA,MAAM,KAAd,WACA,4BAAQA,MAAM,KAAd,WACA,4BAAQA,MAAM,KAAd,WACA,4BAAQA,MAAM,KAAd,WACA,4BAAQA,MAAM,KAAd,WACA,4BAAQA,MAAM,KAAd,WACA,4BAAQA,MAAM,KAAd,WACA,4BAAQA,MAAM,KAAd,WACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,aAGF,yBAAK8K,UAAU,oBACZvB,EAAWjI,cAKlBwI,KAAKxK,MAAMgC,WAAWd,OAAS,GAAM,kBAAC,IAAD,CAAKoL,GAAM,MAC9C,yBAAKd,UAAU,gBAEZhB,KAAKxK,MAAMgC,WAAWkF,KAAI,SAACjD,EAAWP,GAAZ,OAC3B,yBAAK8H,UAAU,YACb,kBAAC,IAAD,CAAMjG,IAAO7B,GAEX,kBAAC,IAAD,CAAK4I,GAAI,KACT,yBAAKd,UAAU,sBAAf,SACU9H,EAAa,EACf,4BAAQ8H,UAAU,WAAWqC,QAAW,SAACvN,GAAW,EAAK+B,gBAAgBqB,EAAYpD,KAAS,uBAAGkL,UAAU,mBAKnH,kBAAC,IAAD,CAAKc,GAAI,KACD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAQ,QAAf,uBACA,kBAAC,IAAD,CAAYf,UAAY,eAAewC,WAAa,aAAaC,gBAAkB,aACjFC,QAA0B,IAAfxK,EAAmB,EAAK1D,MAAMmC,UAA8D,KAAlD,EAAKnC,MAAMgC,WAAW0B,EAAa,GAAGtB,QAAiB,EAAKpC,MAAMgC,WAAW0B,EAAa,GAAGtB,QAAU,EAAKpC,MAAMmC,UACvKiM,QAAiC,KAAtBnK,EAAU7B,QAAiB6B,EAAU7B,QAAS,EAAKpC,MAAMgC,WAAWd,OAASwC,EAAa,GAAwD,KAApD,EAAK1D,MAAMgC,WAAW0B,EAAa,GAAGvB,UAAmB,EAAKnC,MAAMgC,WAAW0B,EAAa,GAAGvB,UAAiC,EAAKnC,MAAMoC,QACpPiM,SAAYpK,EAAU9B,UACtBuK,SAAY,SAAC4B,GAAW,IAAItM,EAAa,EAAKhC,MAAMgC,WAAYA,EAAW0B,GAAYvB,UAAYmM,EAAM,EAAKpO,SAAS,CAAC8B,WAAYA,KAAgBwK,YAAY,eAAeM,GAAG,YAAarJ,KAAK,YAAYkJ,UAAQ,MAK9N,kBAAC,IAAD,CAAKL,GAAI,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAQ,QAAf,mBACA,kBAAC,IAAD,CAAYf,UAAY,eAAewC,WAAa,aAAaC,gBAAkB,WAClFC,QAAmC,KAAxBjK,EAAU9B,UAAmB8B,EAAU9B,UAA2B,IAAfuB,EAAmB,EAAK1D,MAAMmC,UAA8D,KAAlD,EAAKnC,MAAMgC,WAAW0B,EAAa,GAAGtB,QAAiB,EAAKpC,MAAMgC,WAAW0B,EAAa,GAAGtB,QAAU,EAAKpC,MAAMmC,UAC1NiM,QAAW,EAAKpO,MAAMgC,WAAWd,OAASwC,EAAa,GAAwD,KAApD,EAAK1D,MAAMgC,WAAW0B,EAAa,GAAGvB,UAAmB,EAAKnC,MAAMgC,WAAW0B,EAAa,GAAGvB,UAAiC,EAAKnC,MAAMoC,QACtMiM,SAAYpK,EAAU7B,QAAWoK,YAAY,aAAaM,GAAG,UAAWrJ,KAAK,UAC5EiJ,SAAY,SAAC4B,GAAW,IAAItM,EAAa,EAAKhC,MAAMgC,WAAYA,EAAW0B,GAAYtB,QAAUkM,EAAM,EAAKpO,SAAS,CAAC8B,WAAYA,KAAgB2K,UAAQ,eAezK,IAAd1M,GAAmB,yBAAKuL,UAAU,kBACjC,kBAAC,IAAD,KACF,kBAAC,IAAD,CAAKc,GAAI,MAGK9B,KAAKxK,MAAMS,eAAeyG,KAAI,SAACtG,EAAYmN,GAAb,OACzB,yBAAKvC,UAAU,kBAClB,kBAAC,IAAD,CAAKjG,IAAMwI,GACT,kBAAC,IAAD,CAAKzB,GAAI,MAAM,uBAAGd,UAAU,WAAW5K,EAAW8M,UAAnC,IAA+C9M,EAAW+M,SAA1D,SAAyFhL,IAApB/B,EAAWC,MAA0C,KAApBD,EAAWC,KAA5C,WAA8DD,EAAWC,KAAzE,KAAmF,KACvK,kBAAC,IAAD,CAAKyL,GAAI,KACT,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAQ,QAAf,kBACA,kBAAC,IAAD,CAAOM,KAAK,SAASL,YAAY,mBAAmB9L,MAAS,EAAKV,MAAMwC,kBAAkB5B,EAAWK,QAAS6L,GAAG,UAAUJ,SAAY,SAACpM,GAAY,EAAKgC,cAAc1B,EAAWK,OAAQX,IAAUmD,KAAK,UAAUkJ,UAAQ,GACvN,4BAAQjM,MAAM,IAAd,UACC,EAAKV,MAAMuB,gBAAgB2F,KAAI,SAACqG,EAAU5L,GAAX,OAC9B,4BAAQjB,MAASiB,EAAO4D,IAAK5D,GAAQ4L,EAASG,UAA9C,IAA0DH,EAASI,gBAK7E,kBAAC,IAAD,CAAKrB,GAAI,KACP,yBAAKd,UAAU,0BAA0BoC,cAAgEjL,IAApD,EAAK3C,MAAMwC,kBAAkB5B,EAAWK,SAA2D,KAAlC,EAAKjB,MAAMwB,mBAA0CqM,QAAW,WAAO,EAAKpL,sBAAsB7B,EAAWK,UAAnO,QAENmK,MAAMC,QAAQ,EAAKrL,MAAM0C,4BAA4B9B,EAAWK,UAAY,EAAKjB,MAAM0C,4BAA4B9B,EAAWK,QAAQC,OAAS,GAAK,kBAAC,IAAD,CAAKoL,GAAM,MAC/J,yBAAKd,UAAU,UACb,kBAAC,IAAD,KACG,EAAKxL,MAAM0C,4BAA4B9B,EAAWK,QAAQiG,KAAI,SAACqH,EAAmBC,GAApB,OAC7D,kBAAC,IAAD,CAAKlC,GAAI,IAAK/G,IAAOiJ,GACnB,yBAAKhD,UAAU,oBACZ+C,EAAkBb,UADrB,IACiCa,EAAkBZ,SACjD,4BAAQnC,UAAU,4BAA4BqC,QAAW,SAACvN,GAAW,EAAKsC,sBAAsBhC,EAAWK,OAAQuN,EAAoBlO,KAAS,uBAAGkL,UAAU,iCA4CpK,IAAdvL,GAAmB,yBAAKuL,UAAU,kBACjC,kBAAC,IAAD,KACK,kBAAC,IAAD,CAAKc,GAAI,KAGG9B,KAAKxK,MAAMS,eAAeyG,KAAI,SAACtG,EAAYmN,GAAb,OAC9B,yBAAKvC,UAAU,kBACZ,wDACA,kBAAC,IAAD,CAAKjG,IAAMwI,GACR,kBAAC,IAAD,CAAKzB,GAAI,MAAM,uBAAGd,UAAU,aAAa5K,EAAW8M,UAArC,IAAiD9M,EAAW+M,WAC3E,kBAAC,IAAD,CAAKrB,GAAI,KACT,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAQ,QAAf,mBACA,kBAAC,IAAD,CAAOM,KAAK,SAASL,YAAY,mBAAmB9L,WAA6DiC,IAApD,EAAK3C,MAAMwC,kBAAkB5B,EAAWK,QAAwB,EAAKjB,MAAMwC,kBAAkB5B,EAAWK,QAAQ+B,WAAa,GAAI8J,GAAG,UAAUJ,SAAY,SAACpM,GAAY,EAAKwC,sBAAsBlC,EAAWK,OAAQX,IAAUmD,KAAK,UAAUkJ,UAAQ,GAChT,4BAAQjM,MAAM,IAAd,UACC,EAAKV,MAAM8J,aAAa5C,KAAI,SAACuH,EAAc9M,GAAf,OAC3B,4BAAQjB,MAAS+N,EAAazL,WAAYuC,IAAK5D,GAAQ8M,EAAaxB,oBAK9E,kBAAC,IAAD,CAAKX,GAAI,KACN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAQ,QAAf,mBACA,kBAAC,IAAD,CAAOM,KAAK,SAASL,YAAY,oBAAoB9L,MAAQ,GAAGgM,SAAY,SAACpM,GAAY,EAAK8C,uBAAuBxC,EAAWK,OAAQX,IAAUmD,KAAK,YAAYkJ,UAAQ,GACxK,4BAAQjM,MAAM,IAAd,eAEuDiC,IAArD,EAAK3C,MAAM+C,mBAAmBnC,EAAWK,SAAyBmK,MAAMC,QAAQ,EAAKrL,MAAM+C,mBAAmBnC,EAAWK,QAAQoC,eAC/H,oCAAI,EAAKrD,MAAM+C,mBAAmBnC,EAAWK,QAAQoC,aAAa6D,KAAI,SAACgE,EAAcwD,GAAf,OAClE,4BAAQhO,MAAOgO,GAAiBxD,EAAayD,0BASRhM,IAArD,EAAK3C,MAAM+C,mBAAmBnC,EAAWK,SAAyBmK,MAAMC,QAAQ,EAAKrL,MAAM+C,mBAAmBnC,EAAWK,QAAQqC,mBAAqB,EAAKtD,MAAM+C,mBAAmBnC,EAAWK,QAAQqC,iBAAiBpC,OAAS,GAAK,kBAAC,IAAD,CAAKoL,GAAM,MACjP,yBAAKd,UAAU,UACZ,kBAAC,IAAD,KACI,EAAKxL,MAAM+C,mBAAmBnC,EAAWK,QAAQqC,iBAAiB4D,KAAI,SAAC0H,EAAsBC,GAAvB,OACpE,kBAAC,IAAD,CAAKvC,GAAI,IAAK/G,IAAOsJ,GAClB,yBAAKrD,UAAU,oBACXoD,EAAqBD,aACtB,4BAAQnD,UAAU,4BAA4BqC,QAAW,SAACvN,GAAW,EAAKiD,6BAA6B3C,EAAWK,OAAQ4N,EAAuBvO,KAAS,uBAAGkL,UAAU,yBAUtL,kBAAC,IAAD,CAAKc,GAAM,WAC8C3J,IAArD,EAAK3C,MAAM+C,mBAAmBnC,EAAWK,SAAyBmK,MAAMC,QAAQ,EAAKrL,MAAM+C,mBAAmBnC,EAAWK,QAAQgC,+BAAiC,EAAKjD,MAAM+C,mBAAmBnC,EAAWK,QAAQgC,6BAA6B/B,OAAS,GAAK,oCAE5P,EAAKlB,MAAM+C,mBAAmBnC,EAAWK,QAAQgC,6BAA6BiE,KAAI,SAAC4H,EAAkCC,GAAnC,OAClF,kBAAC,IAAD,CAAKvD,UAAU,+BAA+BjG,IAAMwJ,GAClD,kBAAC,IAAD,CAAKzC,GAAI,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAQ,QAAf,iBACE,kBAAC,IAAD,CAAOM,KAAK,SAASL,YAAY,iBAAiB9L,MAAOoO,EAAiChL,MAAQ4I,SAAY,SAACpM,GAAW,EAAKkD,wBAAwB5C,EAAWK,OAAQ,QAASX,EAAMyB,OAAOrB,MAAOqO,IAAsCtL,KAAK,QAAQkJ,UAAQ,GAChQ,4BAAQjM,MAAM,IAAd,UAGE,EAAKV,MAAMgC,WAAWkF,KAAI,SAACjD,EAAWP,GAAZ,OACxB,4BAAQhD,MAAOgD,GAAf,SAAkCA,EAAW,SAMzD,kBAAC,IAAD,CAAK4I,GAAM,KACT,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAQ,QAAf,gBACA,kBAAC,IAAD,CAAOM,KAAK,SAASL,YAAY,gBAAgB9L,MAAOoO,EAAiC/K,KAASN,KAAK,OAAOiJ,SAAY,SAACpM,GAAW,EAAKkD,wBAAwB5C,EAAWK,OAAQ,OAAQX,EAAMyB,OAAOrB,MAAOqO,IAAqCpC,UAAQ,GAC7P,4BAAQjM,MAAM,IAAd,eAEuDiC,IAArD,EAAK3C,MAAM+C,mBAAmBnC,EAAWK,SAAyBmK,MAAMC,QAAQ,EAAKrL,MAAM+C,mBAAmBnC,EAAWK,QAAQqC,mBAC/H,oCAAI,EAAKtD,MAAM+C,mBAAmBnC,EAAWK,QAAQqC,iBAAiB4D,KAAI,SAACgE,EAAcwD,GAAf,OACtE,4BAAQhO,MAAOgO,GAAiBxD,EAAayD,qBAO3D,kBAAC,IAAD,CAAKrC,GAAK,MACR,kBAAC,IAAD,+DAEiE3J,IAA9D,EAAK3C,MAAM0C,4BAA4B9B,EAAWK,SAAyB,EAAKjB,MAAM0C,4BAA4B9B,EAAWK,QAAQiG,KAAI,SAAC8H,EAAiBC,GAAlB,OACrI,kBAAC,IAAD,CAAK1J,IAAO0J,GACV,kBAAC,IAAD,CAAK3C,GAAI,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAQ,eAAf,YACC,kBAAC,IAAD,CAAOM,KAAK,OAAOqC,UAAW,EAAM1C,YAAY,iBAAiB9L,MAAK,UAAKsO,EAAgBtB,UAArB,YAAkCsB,EAAgBrB,UAAelK,KAAK,cAGjJ,kBAAC,IAAD,CAAK6I,GAAM,KACR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAQ,QAAf,wBACA,kBAAC,IAAD,CAAOM,KAAK,SAASL,YAAY,gBAAgB9L,WAA4DiC,IAArDmM,EAAiC5L,sBAA8GP,IAA7EmM,EAAiC5L,gBAAgB8L,EAAgB/N,QAAwB6N,EAAiC5L,gBAAgB8L,EAAgB/N,QAAQsF,YAAe,GAAO9C,KAAK,cAAciJ,SAAY,SAACpM,GAAW,EAAKkD,wBAAwB5C,EAAWK,OAAQ,cAAeX,EAAMyB,OAAOrB,MAAOqO,EAAmCC,EAAgB/N,SAAU0L,UAAQ,GACnf,4BAAQjM,MAAM,IAAd,eAEuDiC,IAArD,EAAK3C,MAAM+C,mBAAmBnC,EAAWK,SAAyBmK,MAAMC,QAAQ,EAAKrL,MAAM+C,mBAAmBnC,EAAWK,QAAQqC,mBAC/H,oCAAI,EAAKtD,MAAM+C,mBAAmBnC,EAAWK,QAAQqC,iBAAiB4D,KAAI,SAACgE,EAAcwD,GAAf,OACtE,4BAAQhO,MAAOgO,GAAiBxD,EAAayD,qBAO3D,kBAAC,IAAD,CAAKrC,GAAI,KACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAQ,QAAf,iBACA,kBAAC,IAAD,CAAYf,UAAY,eAAewC,WAAa,qBAAqBmB,gBAAc,EAACC,kBAAqEzM,IAArD,EAAK3C,MAAM+C,mBAAmBnC,EAAWK,SAAyBmK,MAAMC,QAAQ,EAAKrL,MAAM+C,mBAAmBnC,EAAWK,QAAQyH,eAAiB,EAAK1I,MAAM+C,mBAAmBnC,EAAWK,QAAQyH,cAAgB,GAC3TgE,SAAY,SAAC4B,GAAU,EAAK9K,wBAAwB5C,EAAWK,OAAQ,gBAAiBqN,EAAMS,EAAmCC,EAAgB/N,SAChJwC,KAAO,gBACPwK,gBAAkB,gBAClBC,aAAgEvL,IAArD,EAAK3C,MAAM+C,mBAAmBnC,EAAWK,cAAoF0B,IAA3D,EAAK3C,MAAM+C,mBAAmBnC,EAAWK,QAAQ6C,OAAkF,KAA3D,EAAK9D,MAAM+C,mBAAmBnC,EAAWK,QAAQ6C,MAAe,EAAK9D,MAAMgC,WAAW,EAAKhC,MAAM+C,mBAAmBnC,EAAWK,QAAQ6C,OAAO3B,UAAY,EAAKnC,MAAMmC,UAC1TiM,aAAgEzL,IAArD,EAAK3C,MAAM+C,mBAAmBnC,EAAWK,cAAoF0B,IAA3D,EAAK3C,MAAM+C,mBAAmBnC,EAAWK,QAAQ6C,OAAkF,KAA3D,EAAK9D,MAAM+C,mBAAmBnC,EAAWK,QAAQ6C,MAAe,EAAK9D,MAAMgC,WAAW,EAAKhC,MAAM+C,mBAAmBnC,EAAWK,QAAQ6C,OAAO1B,QAAU,EAAKpC,MAAMoC,QACxTiM,cAAiE1L,IAArDmM,EAAiC5L,sBAA8GP,IAA7EmM,EAAiC5L,gBAAgB8L,EAAgB/N,QAAwB6N,EAAiC5L,gBAAgB8L,EAAgB/N,QAAQ+C,cAAiB,GACjQqL,QAAW,SAACC,GAAQ,EAAK7G,qBAAqB7H,EAAWK,OAAQqO,IACjE3C,UAAQ,gBAyB8BhK,IAArD,EAAK3C,MAAM+C,mBAAmBnC,EAAWK,SAAyBmK,MAAMC,QAAQ,EAAKrL,MAAM+C,mBAAmBnC,EAAWK,QAAQgD,YAAc,EAAKjE,MAAM+C,mBAAmBnC,EAAWK,QAAQgD,UAAU/C,OAAS,GAAK,kBAAC,IAAD,CAAKoL,GAAM,MACnO,yBAAKd,UAAU,UACZ,kBAAC,IAAD,KACI,EAAKxL,MAAM+C,mBAAmBnC,EAAWK,QAAQgD,UAAUiD,KAAI,SAACqI,EAAc7L,GAAf,OAC7D,kBAAC,IAAD,CAAK4I,GAAI,IAAK/G,IAAO7B,GAClB,yBAAK8H,UAAU,oBACZ,uCAAatF,SAASqJ,EAAazL,OAAS,GAC5C,8BAAOyL,EAAaxL,KAAK4K,cACzB,4BAAQnD,UAAU,4BAA4BqC,QAAW,SAACvN,GAAW,EAAK4D,kCAAkCtD,EAAWK,OAAQyC,EAAYpD,KAAS,uBAAGkL,UAAU,6BAYpL,EAAKxL,MAAMgC,WAAWd,OAAS,GACjC,kBAAC,IAAD,CAAKoL,GAAI,KACT,yBAAKd,UAAU,0BAA0BqC,QAAW,WAAO,EAAKjK,uBAAuBhD,EAAWK,UAAlG,qBAON,kBAAC,IAAD,CAAKqL,GAAM,MACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAQ,QAAf,eACA,kBAAC,IAAD,CAAOM,KAAM,WAAW2C,KAAO,IAAI9O,WAA4DiC,IAArD,EAAK3C,MAAM+C,mBAAmBnC,EAAWK,QAAwB,EAAKjB,MAAM+C,mBAAmBnC,EAAWK,QAAQoF,YAAe,GAAIqG,SAAY,SAACpM,GAAW,EAAKkD,wBAAwB5C,EAAWK,OAAQ,cAAeX,EAAMyB,OAAOrB,QAAS8L,YAAY,cAAcG,UAAQ,MAIpU,kBAAC,IAAD,CAAKL,GAAM,MAEP,kBAAC,IAAD,CAAKd,UAAU,QACb,kBAAC,IAAD,CAAKc,GAAI,KACP,uBAAGd,UAAU,kBAAb,0BAG6D7I,IAA9D,EAAK3C,MAAM0C,4BAA4B9B,EAAWK,SAAyB,EAAKjB,MAAM0C,4BAA4B9B,EAAWK,QAAQiG,KAAI,SAAC8H,EAAiBC,GAAlB,OACrI,kBAAC,IAAD,CAAK3C,GAAI,IAAK/G,IAAO0J,GAClB,uBAAGzD,UAAU,gBAAgBwD,EAAgBtB,UAA7C,IAAyDsB,EAAgBrB,sBAuJhG,kBAAC,IAAD,CAAKrB,GAAI,IAAKd,UAAU,iBACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOe,QAAQ,QAAf,yBACA,kBAAC,IAAD,CAAOM,KAAK,SAASL,YAAY,wBAAwB9L,MAAS8J,KAAKxK,MAAMgK,4BAA6B8C,GAAG,SAASJ,SAAY,SAACpM,GAAY,EAAKJ,SAAS,CAAC8J,4BAA6B1J,EAAMyB,OAAOrB,SAAY+C,KAAK,SAASkJ,UAAQ,GACvO,4BAAQjM,MAAM,IAAd,UACCF,EAAW0G,KAAI,SAACqG,EAAU5L,GAAX,OACd,4BAAQjB,MAASiB,EAAO4D,IAAK5D,GAAQ4L,EAASG,UAA9C,IAA0DH,EAASI,eAI9B,KAA3CnD,KAAKxK,MAAMgK,6BAAsC,kBAAC,IAAD,KAC/C,kBAAC,IAAD,KAAQxJ,EAAWgK,KAAKxK,MAAMgK,6BAA6B0D,UAA3D,IAAuElN,EAAWgK,KAAKxK,MAAMgK,6BAA6B2D,WAE7H,kBAAC,IAAD,CACA3O,UAAWA,EACXyQ,OAAQtQ,EACRuQ,cAAc,QACdC,MAAS,CAAC,SACVC,YAAY,MACZC,OAAS,IAEX,yBAAKrE,UAAU,eACb,iDACA,yBAAKA,UAAU,kBACZ,iCACA,iCACA,iCACA,iCACA,mCAGH,oDAEA,kBAAC,IAAD,CAAKA,UAAU,gBACf,kBAAC,IAAD,CAAKc,GAAI,KACN,yBAAKd,UAAU,eAAf,aADH,iBAIA,kBAAC,IAAD,CAAKc,GAAI,KACN,uBAAGd,UAAU,eAAc,uBAAGsE,MAAM,0BAIvC,kBAAC,IAAD,CAAKtE,UAAU,gBACf,kBAAC,IAAD,CAAKc,GAAI,KACN,yBAAKd,UAAU,eAAf,aADH,iBAIA,kBAAC,IAAD,CAAKc,GAAI,KACN,uBAAGd,UAAU,eAAc,uBAAGsE,MAAM,0BAIvC,kBAAC,IAAD,CAAKtE,UAAU,gBACf,kBAAC,IAAD,CAAKc,GAAI,KACN,yBAAKd,UAAU,eAAf,aADH,iBAIA,kBAAC,IAAD,CAAKc,GAAI,KACN,uBAAGd,UAAU,eAAc,uBAAGsE,MAAM,6BAOpC,IAAd7P,GAAmB,yBAAKuL,UAAU,sBAAsBqC,QAAW,WAAQ,EAAKnJ,gBAAgBzE,EAAU,KAAvF,QACL,IAAdA,EAAkB,yBAAKuL,UAAU,sBAAsBqC,QAAW,WAAQ,EAAKnJ,gBAAgBzE,EAAU,KAAvF,QAAyG,yBAAKuL,UAAU,sBAAsBqC,QAAWrD,KAAKvF,wBAArD,YAIvI,kBAAC,IAAD,CAAO8K,OAAQvF,KAAKxK,MAAMgF,MAAOlF,OAAQ0K,KAAKzF,YAAayG,UAAU,iEAC/D,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKc,GAAM,MACX,yBAAKd,UAAU,kBACd,yBAAKwE,IAAMlR,EAAa0M,UAAU,UAAUyE,IAAK,MAAMC,MAAQ,QAAQC,OAAS,WAEjF,yBAAK3E,UAAU,WACb,mEAEA,kBAAC,OAAD,CAAM4E,GAAE,6CAA0C5F,KAAKxK,MAAM+H,iBAAmByD,UAAU,uBAA1F,gC,GAhwDY6E,aA4wD5B,SAASrD,EAAyBtN,GAChC,IAAMqN,EAAerN,EAAMqN,aAC3B,OAAQ,4BAAQrM,MAAOqM,EAAa/J,YAAc+J,EAAaE,cAGlDxN,YAER,IAAMyM,EAAb,uKAEA,OAAQ,uBAAGV,UAAS,UAAKhB,KAAK9K,MAAMyM,gBAFpC,GAAgCkE,c,iCC7yDhC,2BAYeC,IAVA,WACX,OACI,yBAAK9E,UAAU,iBACV,yBAAKA,UAAU,8BAA8B3K,KAAK,UAC7C,0BAAM2K,UAAU,WAAhB,kB","file":"static/js/45.e325c97d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Col, Row, Input, FormGroup, Label, Modal, ModalBody} from 'reactstrap';\r\nimport  { Link } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport commonService from '../../../core/services/commonService';\r\nimport Loader from '../../Loader/Loader';\r\nimport { Calendar, momentLocalizer } from 'react-big-calendar'\r\nimport moment from 'moment';\r\nimport { Stepper, Step } from 'react-form-stepper';\r\nimport '../../../assets/css/Glyphter.css';\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport './ClinicalTrial.css';\r\n\r\nconst popupImgUrl = `${process.env.PUBLIC_URL}/images/popup-img.png`;\r\nconst localizer = momentLocalizer(moment);\r\nconst myEventsList = [\r\n{\r\nstart: moment().add(2, \"days\").toDate(),\r\nend: moment()\r\n.add(2, \"days\")\r\n.toDate(),\r\ntitle: \"\"\r\n}\r\n];\r\nclass ClinicalTrial extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      modal: false,      \r\n      doctorList: [],\r\n      loading: true,\r\n      rowIndex: -1,\r\n      formProccessing: false,\r\n      userList: [],\r\n      formField: {doctor_id: '', patient_id: '', categoryId: '', templateId: '', doctor_categoryId: '', doctor_templateId: '', schedule_date: '',  phoneNumber: '', address: '', city: '', state: '', country: '', description: '', role: '', status: '' },\r\n      errors: {selectDoctor: '', selectPatient: '', categoryId: '', templateId: '', doctor_categoryId: '', doctor_templateId: '', schedule_date: ''},\r\n      formValid: true,\r\n      filterItem: { filter_doctor_id: '', country: '', state: '', custom_search: ''},\r\n      templateList: [],\r\n      doctorTemplateList:[],\r\n      categoryList: [],\r\n      assignmentList: [],\r\n      activeTab: 0,\r\n      activeTab2: '1',\r\n      doctorSelectIndex: \"\",\r\n      selectedDoctor: [],\r\n      patientSelectIndex: \"\",\r\n      selectedPatient: [],\r\n      stagesData: [],\r\n      assignPatientInfo: {},\r\n      assignPatientInfoWithDoctor: {},\r\n      doctorTemplateInfo: {},\r\n      patientTemplateInfo: {},\r\n      selectedDoctorCalendarIndex: \"\",\r\n      errorStep1: {},\r\n      startDate:\"\",\r\n      endDate:\"\",\r\n      clinical_trial: \"\",\r\n      practiceCategoryList: [],\r\n      trialCategoryId: \"\",\r\n      trialSubCategoryId: \"\",\r\n      subPracticeCategoryList: [],\r\n      searchDoctor: \"name\",\r\n      specializationList: [],\r\n      selectedSpecialization: \"\",\r\n      selectedRole: \"\",\r\n      sponsorsList: [],\r\n      sponsorId: \"\",\r\n      phase: \"\",\r\n      cro: \"\",\r\n      protocolNumber: \"\",\r\n\r\n\r\n    } \r\n    this.subPracticeCategoryList = this.subPracticeCategoryList.bind(this);\r\n    \r\n    \r\n    \r\n  }\r\n  // Fetch the doctor List\r\n  componentDidMount() { \r\n    this.doctorList();\r\n    this.patientList();\r\n    this.categoryList();\r\n    this.specializationList();\r\n    this.practiceCategoryList();\r\n    this.sponsorsList();\r\n  }\r\n\r\n  scrollToTop = () => window.scrollTo(0, 0);\r\n\r\n  doctorList(filterItem = {}) {\r\n    let doctorQuery = \"\";\r\n    \r\n    if(filterItem.country !== undefined && filterItem.country !== \"\" ) \r\n      doctorQuery += (doctorQuery !==\"\" ) ? \"&country=\"+filterItem.country: \"?country=\"+filterItem.country;\r\n    if(filterItem.state !== undefined && filterItem.state !== \"\" ) \r\n      doctorQuery += (doctorQuery !==\"\" ) ? \"&state=\"+filterItem.state: \"?state=\"+filterItem.state;\r\n    if(filterItem.custom_search !== undefined && filterItem.custom_search !== \"\" ) \r\n      doctorQuery += (doctorQuery !==\"\" ) ? \"&keyword=\"+filterItem.custom_search: \"?keyword=\"+filterItem.custom_search;\r\n    if(filterItem.selectedSpecialization !== undefined && filterItem.selectedSpecialization !== \"\" ) \r\n      doctorQuery += (doctorQuery !==\"\" ) ? \"&specializationId=\"+filterItem.selectedSpecialization: \"?specializationId=\"+filterItem.selectedSpecialization;\r\n    this.setState({loading: true}, () => {  \r\n      commonService.getAPIWithAccessToken('doctors'+doctorQuery)\r\n        .then( res => {\r\n          \r\n           \r\n          if ( undefined === res.data.data || !res.data.status ) {\r\n            this.setState( { loading: false } );\r\n            toast.error(res.data.message);\r\n            return;\r\n          }   \r\n\r\n          this.setState({loading:false, doctorList: res.data.data});     \r\n         \r\n        } )\r\n        .catch( err => {         \r\n          if(err.response !== undefined && err.response.status === 401) {\r\n            localStorage.clear();\r\n            this.props.history.push('/login');\r\n          }\r\n          else {\r\n            this.setState( { loading: false } );\r\n            toast.error(err.message);\r\n          }\r\n        } )\r\n    });  \r\n  }\r\n\r\n  patientList(filterItem = {}) {\r\n\r\n    let patientQuery = \"\";\r\n    if(filterItem.practiceCategory !== undefined && filterItem.practiceCategory !== \"\" ) \r\n      patientQuery += (patientQuery !==\"\" ) ? \"&practiceCategory=\"+filterItem.practiceCategory: \"?practiceCategory=\"+filterItem.practiceCategory;\r\n    if(filterItem.practiceSubCategory !== undefined && filterItem.practiceSubCategory !== \"\" ) \r\n      patientQuery += (patientQuery !==\"\" ) ? \"&practiceSubCategory=\"+filterItem.practiceSubCategory: \"?practiceSubCategory=\"+filterItem.practiceSubCategory;\r\n   commonService.getAPIWithAccessToken(`profile/list`+patientQuery)\r\n      .then( res => {\r\n        console.log(res);\r\n         \r\n        if ( undefined === res.data.data || !res.data.status ) {\r\n          this.setState( {  loading: false } );\r\n          toast.error(res.data.message);    \r\n          return;\r\n        }   \r\n        \r\n        this.setState({loading:false, userList: res.data.data.profileList});     \r\n       \r\n      } )\r\n      .catch( err => {   \r\n             \r\n        if(err.response !== undefined && err.response.status === 401) {\r\n          localStorage.clear();\r\n          this.props.history.push('/login');\r\n        }\r\n        else {\r\n          this.setState( { loading: false } );\r\n          toast.error(err.message); \r\n        }  \r\n      } )\r\n  }\r\n\r\n  categoryList() {   \r\n   \r\n    commonService.getAPIWithAccessToken('template/category')\r\n      .then( res => {\r\n        console.log(res);\r\n         \r\n        if ( undefined === res.data.data || !res.data.status ) {\r\n          this.setState( {  loading: false } );\r\n          toast.error(res.data.message);    \r\n          return;\r\n        }   \r\n\r\n        this.setState({categoryList: res.data.data});     \r\n       \r\n      } )\r\n      .catch( err => {         \r\n        if(err.response !== undefined && err.response.status === 401) {\r\n          localStorage.clear();\r\n          this.props.history.push('/login');\r\n        }\r\n        else           \r\n          toast.error(err.message);    \r\n        \r\n      } )\r\n    \r\n  }\r\n\r\n  practiceCategoryList() {   \r\n   \r\n    commonService.getAPIWithAccessToken('category')\r\n      .then( res => {\r\n        console.log(res);\r\n         \r\n        if ( undefined === res.data.data || !res.data.status ) {\r\n          this.setState( {  loading: false } );\r\n          toast.error(res.data.message);    \r\n          return;\r\n        }   \r\n\r\n        this.setState({practiceCategoryList: res.data.data});     \r\n       \r\n      } )\r\n      .catch( err => {         \r\n        if(err.response !== undefined && err.response.status === 401) {\r\n          localStorage.clear();\r\n          this.props.history.push('/login');\r\n        }\r\n        else           \r\n          toast.error(err.message);    \r\n        \r\n      } )\r\n    \r\n  }\r\n\r\n  subPracticeCategoryList(categoryId) {\r\n    if(categoryId === \"\") {\r\n      this.setState({subPracticeCategoryList: [], trialSubCategoryId: \"\"});\r\n      return;\r\n    }\r\n    this.setState({loading: true}, () => {\r\n      commonService.getAPIWithAccessToken('category/'+categoryId)\r\n      .then( res => {\r\n        console.log(res);\r\n         \r\n        if ( undefined === res.data.data || !res.data.status ) {\r\n          this.setState( {  loading: false } );\r\n          toast.error(res.data.message);    \r\n          return;\r\n        }   \r\n\r\n        this.setState({subPracticeCategoryList: res.data.data, trialSubCategoryId: \"\", loading: false});     \r\n       \r\n      } )\r\n      .catch( err => {   \r\n        this.setState({loading: false});      \r\n        if(err.response !== undefined && err.response.status === 401) {\r\n          localStorage.clear();\r\n          this.props.history.push('/login');\r\n        }\r\n        else           \r\n          toast.error(err.message);    \r\n        \r\n      } )\r\n    });\r\n\r\n  }\r\n\r\n  specializationList() {   \r\n   \r\n    commonService.getAPIWithAccessToken('specialization')\r\n      .then( res => {\r\n        console.log(res);\r\n         \r\n        if ( undefined === res.data.data || !res.data.status ) {\r\n          this.setState( {  loading: false } );\r\n          toast.error(res.data.message);    \r\n          return;\r\n        }   \r\n\r\n        this.setState({specializationList: res.data.data});     \r\n       \r\n      } )\r\n      .catch( err => {         \r\n        if(err.response !== undefined && err.response.status === 401) {\r\n          localStorage.clear();\r\n          this.props.history.push('/login');\r\n        }\r\n        else           \r\n          toast.error(err.message);    \r\n        \r\n      } )\r\n    \r\n  }\r\n\r\n  /*sponsorsList List API*/\r\n  sponsorsList(){\r\n    commonService.getAPIWithAccessToken('sponsors')\r\n      .then( res => {\r\n        \r\n         \r\n        if ( undefined === res.data.data || !res.data.status ) {\r\n          this.setState( {  loading: false } );\r\n          toast.error(res.data.message);    \r\n          return;\r\n        }   \r\n\r\n        this.setState({sponsorsList: res.data.data});     \r\n       \r\n      } )\r\n      .catch( err => {         \r\n        if(err.response !== undefined && err.response.status === 401) {\r\n          localStorage.clear();\r\n          this.props.history.push('/login');\r\n        }\r\n        else           \r\n          toast.error(err.message);    \r\n        \r\n      } )\r\n  }\r\n\r\n  getTemplateList(categoryId, parentId, setTemplateList = \"doctor\", hideSubcat = true){\r\n    \r\n    if(categoryId === \"\") {  \r\n      if(setTemplateList === \"doctor\"){\r\n        let doctorTemplateInfo = this.state.doctorTemplateInfo;\r\n        if(doctorTemplateInfo[parentId] !== undefined)\r\n          doctorTemplateInfo[parentId].templateList = [];\r\n        else\r\n          doctorTemplateInfo[parentId] = {templateInfo: [], stagesWithPatientAppointment: [{patientInfoData: {}}]};\r\n        this.setState({doctorTemplateInfo: doctorTemplateInfo});\r\n      }\r\n      else if(setTemplateList === \"patient\"){\r\n        let patientTemplateInfo = this.state.patientTemplateInfo;\r\n        if(patientTemplateInfo[parentId] !== undefined)\r\n          patientTemplateInfo[parentId].templateList = [];\r\n        else\r\n          patientTemplateInfo[parentId] = {templateInfo: []};\r\n        this.setState({patientTemplateInfo: patientTemplateInfo});\r\n      }\r\n      return;\r\n    }\r\n    this.setState( { loading: true}, () => { \r\n      //let organizationIdQuery = \"\";\r\n      commonService.getAPIWithAccessToken(\"template?categoryId=\"+categoryId)\r\n      .then( res => {\r\n        console.log(res);\r\n         \r\n        if ( undefined === res.data.data || !res.data.status ) {\r\n          this.setState( {  loading: false } );\r\n          toast.error(res.data.message);    \r\n          return;\r\n        }   \r\n        /*if(hideSubcat){\r\n          if(setTemplateList === \"templateList\")\r\n            formField.consent_template_id = '';\r\n          else\r\n            formField.deep_profile_template_id = '';\r\n        }*/\r\n        if(setTemplateList === \"doctor\"){\r\n          let doctorTemplateInfo = this.state.doctorTemplateInfo;\r\n          if(doctorTemplateInfo[parentId] !== undefined)\r\n            doctorTemplateInfo[parentId].templateList = res.data.data;\r\n          else\r\n            doctorTemplateInfo[parentId] = {templateInfo: res.data.data, stagesWithPatientAppointment: [{patientInfoData: {}}]};\r\n          this.setState({doctorTemplateInfo: doctorTemplateInfo});\r\n        }\r\n        else if(setTemplateList === \"patient\"){\r\n          let patientTemplateInfo = this.state.patientTemplateInfo;\r\n          if(patientTemplateInfo[parentId] !== undefined)\r\n            patientTemplateInfo[parentId].templateList = res.data.data;\r\n          else\r\n            patientTemplateInfo[parentId] = {templateInfo: res.data.data};\r\n          this.setState({patientTemplateInfo: patientTemplateInfo});\r\n        }\r\n        this.setState({loading: false});     \r\n        \r\n      } )\r\n      .catch( err => {         \r\n        if(err.response !== undefined && err.response.status === 401) {\r\n          localStorage.clear();\r\n          this.props.history.push('/login');\r\n        }\r\n        else { \r\n          this.setState( {  loading: false } );        \r\n          toast.error(err.message); \r\n\r\n        }\r\n      } )\r\n    })\r\n  }\r\n\r\n  toggle = tab => {\r\n    if(this.state.activeTab !== tab) this.setState({activeTab: tab});\r\n  }\r\n\r\n  toggle2 = tab => {\r\n    if(this.state.activeTab2 !== tab) this.setState({activeTab2: tab});\r\n  }  \r\n\r\n  moveSteps(activeTab){\r\n    this.setState({activeTab: activeTab});\r\n  }\r\n\r\n  addDoctorToList = event => {\r\n    event.preventDefault();\r\n    let doctorList = this.state.doctorList;\r\n    let selectedDoctor = this.state.selectedDoctor;\r\n    let value = this.state.doctorSelectIndex;\r\n\r\n    if(value !== \"\") {\r\n      let doctorInfo = doctorList[value];\r\n      doctorInfo.role = this.state.selectedRole;\r\n      \r\n      let checkDoctorExists = selectedDoctor.filter(function(item) { return item.authId === doctorInfo.authId;});\r\n      \r\n      if(checkDoctorExists.length === 0)\r\n        selectedDoctor.push(doctorInfo);\r\n      this.setState({doctorSelectIndex: \"\", selectedRole: \"\", selectedDoctor: selectedDoctor});\r\n    }\r\n    else\r\n      this.setState({doctorSelectIndex: \"\", selectedRole: \"\"});\r\n  } \r\n\r\n  addPatientToList = event => {\r\n    event.preventDefault();\r\n    let patientList = this.state.userList;\r\n    let selectedPatient = this.state.selectedPatient;\r\n    let value = this.state.patientSelectIndex;\r\n    \r\n    if(value !== \"\") {\r\n      let patientInfo = patientList[value];\r\n      \r\n      let checkPatientExists = selectedPatient.filter(function(item) { return item.authId === patientInfo.authId;});\r\n      if(checkPatientExists.length === 0)\r\n        selectedPatient.push(patientInfo);\r\n      this.setState({patientSelectIndex: \"\", selectedPatient: selectedPatient});\r\n    }\r\n    else\r\n      this.setState({patientSelectIndex: \"\"});\r\n  }\r\n\r\n  removeSelectedDoctor = (index, event) => {\r\n    let selectedDoctor = this.state.selectedDoctor;\r\n    selectedDoctor.splice(index, 1);\r\n    this.setState({selectedDoctor: selectedDoctor});\r\n  } \r\n  removeSelectedPatient = (index, event) => {\r\n    let selectedPatient = this.state.selectedPatient;\r\n    selectedPatient.splice(index, 1);\r\n    this.setState({selectedPatient: selectedPatient});\r\n  } \r\n\r\n  selectStageData = event => {\r\n    const value = event.target.value;\r\n    let stagesData = this.state.stagesData;\r\n    let remainingStages = (stagesData.length === 0) ? value : value - stagesData.length; \r\n    if(remainingStages > 0 ) {\r\n      for(let i = 1; i <= remainingStages; i++){\r\n        stagesData.push({startDate: '', endDate: ''});\r\n      }\r\n    }\r\n    else if(remainingStages < 0)\r\n      stagesData.splice(value - 1, stagesData.length - value);\r\n    this.setState({stagesData: stagesData})\r\n\r\n  }\r\n\r\n  removeStageForm = (index, event) => {\r\n    let stagesData = this.state.stagesData;\r\n    stagesData.splice(index, 1);\r\n    this.setState({stagesData: stagesData});\r\n  }\r\n\r\n  assignPatient = (doctorId, event) => {\r\n    let assignPatientInfo = this.state.assignPatientInfo;\r\n    assignPatientInfo[doctorId] = event.target.value;\r\n    this.setState({assignPatientInfo:assignPatientInfo});\r\n  }\r\n\r\n  assignPatientToDoctor = (doctorId, event) => {\r\n    let assignPatientInfo = this.state.assignPatientInfo;\r\n    let selectedPatient = this.state.selectedPatient;\r\n    let patientInfo = selectedPatient[assignPatientInfo[doctorId]];\r\n    let assignPatientInfoWithDoctor = this.state.assignPatientInfoWithDoctor;\r\n    if(assignPatientInfoWithDoctor[doctorId] !== undefined){\r\n      let checkPatientAlreadyExists = assignPatientInfoWithDoctor[doctorId].filter(function(item){ return item.authId === patientInfo.authId;});\r\n      if(checkPatientAlreadyExists.length === 0)\r\n        assignPatientInfoWithDoctor[doctorId].push(patientInfo);\r\n    }\r\n    else\r\n      assignPatientInfoWithDoctor[doctorId] = [patientInfo];\r\n    assignPatientInfo[doctorId] = \"\";\r\n    this.setState({assignPatientInfo: assignPatientInfo, assignPatientInfoWithDoctor: assignPatientInfoWithDoctor});\r\n  }\r\n\r\n  removeAssignedPatient = (doctorId, patientIndex, event) => {\r\n    let assignPatientInfoWithDoctor = this.state.assignPatientInfoWithDoctor;\r\n    if(assignPatientInfoWithDoctor[doctorId] !== undefined){\r\n      assignPatientInfoWithDoctor[doctorId].splice(patientIndex, 1);\r\n    }\r\n    this.setState({assignPatientInfoWithDoctor: assignPatientInfoWithDoctor})\r\n  }\r\n\r\n  getTemplateWithDoctor = (doctorId, event) => {\r\n    let doctorTemplateInfo = this.state.doctorTemplateInfo;\r\n    if(doctorTemplateInfo[doctorId] !== undefined)\r\n      doctorTemplateInfo[doctorId].categoryId = event.target.value;\r\n    else\r\n      doctorTemplateInfo[doctorId] = {\"categoryId\":event.target.value, stagesWithPatientAppointment: [{patientInfoData: {}}]};\r\n    this.setState({doctorTemplateInfo: doctorTemplateInfo});\r\n    this.getTemplateList(event.target.value, doctorId, \"doctor\");\r\n  }\r\n\r\n  assignTemplateToDoctor = (doctorId, event) => {\r\n    let doctorTemplateInfo = this.state.doctorTemplateInfo;\r\n    if(doctorTemplateInfo[doctorId] !== undefined && event.target.value !== \"\"){   \r\n      if(doctorTemplateInfo[doctorId].templateList !== undefined) {\r\n        if(doctorTemplateInfo[doctorId].selectedTemplate !== undefined)\r\n          doctorTemplateInfo[doctorId].selectedTemplate.push(doctorTemplateInfo[doctorId].templateList[event.target.value]);\r\n        else\r\n          doctorTemplateInfo[doctorId].selectedTemplate = [doctorTemplateInfo[doctorId].templateList[event.target.value]];\r\n      }\r\n      \r\n    }\r\n    \r\n    this.setState({doctorTemplateInfo: doctorTemplateInfo});\r\n  }\r\n\r\n  removeDoctorAssignedTemplate = (doctorId, index, event) => {\r\n    let doctorTemplateInfo = this.state.doctorTemplateInfo;\r\n    if(doctorTemplateInfo[doctorId] !== undefined){   \r\n      if(doctorTemplateInfo[doctorId].selectedTemplate !== undefined)\r\n        doctorTemplateInfo[doctorId].selectedTemplate.splice(index, 1);\r\n          \r\n      \r\n      \r\n    }\r\n    \r\n    this.setState({doctorTemplateInfo: doctorTemplateInfo});\r\n  }\r\n\r\n  doctorTemplateWithStage = (doctorId, name, value, stageIndex = 0, patientId = \"\") => {\r\n    let doctorTemplateInfo = this.state.doctorTemplateInfo;\r\n    if(name === \"description\"){\r\n      if(doctorTemplateInfo[doctorId] !== undefined){\r\n        doctorTemplateInfo[doctorId][name] = value;\r\n      }\r\n      else\r\n        doctorTemplateInfo[doctorId] = {[name]: value, stagesWithPatientAppointment: [{patientInfoData: {}}]};\r\n    }\r\n    else{\r\n      if(doctorTemplateInfo[doctorId] !== undefined){\r\n        if(doctorTemplateInfo[doctorId].stagesWithPatientAppointment !== undefined){\r\n          if(doctorTemplateInfo[doctorId].stagesWithPatientAppointment.length > stageIndex ){\r\n            if(name !== \"stage\" && name !== \"form\"){\r\n              if(doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][stageIndex]['patientInfoData'] !== undefined){\r\n                if(doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][stageIndex]['patientInfoData'][patientId] !== undefined)\r\n                  doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][stageIndex]['patientInfoData'][patientId][name] = value;\r\n                else\r\n                doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][stageIndex]['patientInfoData'][patientId] = {[name]: value};\r\n              }\r\n              else\r\n                doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][stageIndex]['patientInfoData'] = {[patientId]: {[name]: value}};\r\n              /*doctorTemplateInfo[doctorId] = {[name]:value, stagesWithPatientAppointment: [{patientInfoData: {}}]};*/\r\n            }\r\n            else{\r\n              doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][stageIndex][name] = value;\r\n            }\r\n          }\r\n          else{\r\n            if(name !== \"stage\" && name !== \"form\"){\r\n              if(doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0]['patientInfoData'] !== undefined){\r\n                if(doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0]['patientInfoData'][patientId] !== undefined)\r\n                  doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0]['patientInfoData'][patientId][name] = value;\r\n                else\r\n                doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0]['patientInfoData'][patientId] = {[name]: value};\r\n              }\r\n              else\r\n                doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0]['patientInfoData'] = {[patientId]: {[name]: value}};\r\n              /*doctorTemplateInfo[doctorId] = {[name]:value, stagesWithPatientAppointment: [{patientInfoData: {}}]};*/\r\n            }\r\n            else{\r\n              doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0][name] = value;\r\n            }\r\n          }\r\n        }\r\n        else{\r\n          doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'] = [{patientInfoData: {}}];\r\n          if(name !== \"stage\" && name !== \"form\"){\r\n            if(doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0]['patientInfoData'][patientId] !== undefined)\r\n              doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0]['patientInfoData'][patientId][name] = value;\r\n            else\r\n              doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0]['patientInfoData'][patientId] = {[name]: value};\r\n            /*doctorTemplateInfo[doctorId] = {[name]:value, stagesWithPatientAppointment: [{patientInfoData: {}}]};*/\r\n          }\r\n          else{\r\n            doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0][name] = value;\r\n          }\r\n        }\r\n        /*if(name === \"stage\")\r\n          doctorTemplateInfo[doctorId].schedule_date = \"\";\r\n        doctorTemplateInfo[doctorId][name] = value;*/\r\n      }\r\n      else{\r\n        doctorTemplateInfo[doctorId] = {stagesWithPatientAppointment: [{patientInfoData: {}}]}\r\n        if(name !== \"stage\" && name !== \"form\"){\r\n          if(doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0]['patientInfoData'][patientId] !== undefined)\r\n            doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0]['patientInfoData'][patientId][name] = value;\r\n          else\r\n            doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0]['patientInfoData'][patientId] = {[name]: value};\r\n          /*doctorTemplateInfo[doctorId] = {[name]:value, stagesWithPatientAppointment: [{patientInfoData: {}}]};*/\r\n        }\r\n        else{\r\n          doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0][name] = value;\r\n        }\r\n      }\r\n    }\r\n    this.setState({doctorTemplateInfo: doctorTemplateInfo});\r\n  }\r\n\r\n  assignSTageRowToDoctor = (doctorId) => {\r\n    let doctorTemplateInfo = this.state.doctorTemplateInfo;\r\n    if(doctorTemplateInfo[doctorId] !== undefined){\r\n      if(doctorTemplateInfo[doctorId].stagesWithPatientAppointment !== undefined){\r\n        doctorTemplateInfo[doctorId].stagesWithPatientAppointment.push({patientInfoData: {}});\r\n      }else{\r\n        doctorTemplateInfo[doctorId] = {stagesWithPatientAppointment: [{patientInfoData: {}}]};\r\n      }\r\n    }\r\n    else{\r\n      doctorTemplateInfo = {[doctorId]: {stagesWithPatientAppointment: [{patientInfoData: {}}]}};\r\n    }\r\n    this.setState({doctorTemplateInfo: doctorTemplateInfo});\r\n  }\r\n\r\n  assignSTageInfoToDoctor = (doctorId) => {\r\n    let doctorTemplateInfo = this.state.doctorTemplateInfo;\r\n    if(doctorTemplateInfo[doctorId] !== undefined){\r\n      if(doctorTemplateInfo[doctorId].stage && doctorTemplateInfo[doctorId].form && doctorTemplateInfo[doctorId].schedule_date) {\r\n        let selectedTemplate = doctorTemplateInfo[doctorId].selectedTemplate;\r\n        \r\n          let stageInfo = {stage: doctorTemplateInfo[doctorId].stage, form: selectedTemplate[doctorTemplateInfo[doctorId].form], schedule_date: doctorTemplateInfo[doctorId].schedule_date};\r\n          if(doctorTemplateInfo[doctorId].stageInfo !== undefined)\r\n            doctorTemplateInfo[doctorId].stageInfo.push(stageInfo);\r\n          else\r\n            doctorTemplateInfo[doctorId].stageInfo = [stageInfo];\r\n        \r\n      }\r\n    }\r\n    \r\n    this.setState({doctorTemplateInfo: doctorTemplateInfo});\r\n  }\r\n  removeDoctorAssignedTemplateStage = (doctorId, index, event) => {\r\n    let doctorTemplateInfo = this.state.doctorTemplateInfo;\r\n    if(doctorTemplateInfo[doctorId] !== undefined){   \r\n      if(doctorTemplateInfo[doctorId].stageInfo !== undefined)\r\n        doctorTemplateInfo[doctorId].stageInfo.splice(index, 1);\r\n          \r\n      \r\n      \r\n    }\r\n    \r\n    this.setState({doctorTemplateInfo: doctorTemplateInfo});\r\n  }\r\n\r\n  getTemplateWithPatient = (patientId, event) => {\r\n    let patientTemplateInfo = this.state.patientTemplateInfo;\r\n    if(patientTemplateInfo[patientId] !== undefined)\r\n      patientTemplateInfo[patientId].categoryId = event.target.value;\r\n    else\r\n      patientTemplateInfo[patientId] = {\"categoryId\":event.target.value};\r\n    this.setState({patientTemplateInfo: patientTemplateInfo});\r\n    this.getTemplateList(event.target.value, patientId, \"patient\");\r\n  }\r\n\r\n  assignTemplateToPatient = (patientId, event) => {\r\n    let patientTemplateInfo = this.state.patientTemplateInfo;\r\n    if(patientTemplateInfo[patientId] !== undefined && event.target.value !== \"\"){   \r\n      if(patientTemplateInfo[patientId].templateList !== undefined) {\r\n        if(patientTemplateInfo[patientId].selectedTemplate !== undefined)\r\n          patientTemplateInfo[patientId].selectedTemplate.push(patientTemplateInfo[patientId].templateList[event.target.value]);\r\n        else\r\n          patientTemplateInfo[patientId].selectedTemplate = [patientTemplateInfo[patientId].templateList[event.target.value]];\r\n      }\r\n      \r\n    }\r\n    \r\n    this.setState({patientTemplateInfo: patientTemplateInfo});\r\n  }\r\n\r\n  removePatientAssignedTemplate = (patientId, index, event) => {\r\n    let patientTemplateInfo = this.state.patientTemplateInfo;\r\n    if(patientTemplateInfo[patientId] !== undefined){   \r\n      if(patientTemplateInfo[patientId].selectedTemplate !== undefined)\r\n        patientTemplateInfo[patientId].selectedTemplate.splice(index, 1);\r\n          \r\n      \r\n      \r\n    }\r\n    \r\n    this.setState({patientTemplateInfo: patientTemplateInfo});\r\n  }\r\n\r\n  patientTemplateWithStage = (patientId, name, value) => {\r\n    let patientTemplateInfo = this.state.patientTemplateInfo;\r\n    if(patientTemplateInfo[patientId] !== undefined)\r\n      patientTemplateInfo[patientId][name] = value;\r\n    else\r\n      patientTemplateInfo[patientId] = {[name]:value};\r\n    this.setState({patientTemplateInfo: patientTemplateInfo});\r\n  }\r\n\r\n  assignSTageInfoToPatient = (patientId) => {\r\n    let patientTemplateInfo = this.state.patientTemplateInfo;\r\n    if(patientTemplateInfo[patientId] !== undefined){\r\n      if(patientTemplateInfo[patientId].stage && patientTemplateInfo[patientId].form ) {\r\n        let selectedTemplate = patientTemplateInfo[patientId].selectedTemplate;\r\n        \r\n          let stageInfo = {stage: patientTemplateInfo[patientId].stage, form: selectedTemplate[patientTemplateInfo[patientId].form]};\r\n          if(patientTemplateInfo[patientId].stageInfo !== undefined)\r\n            patientTemplateInfo[patientId].stageInfo.push(stageInfo);\r\n          else\r\n            patientTemplateInfo[patientId].stageInfo = [stageInfo];\r\n        \r\n      }\r\n    }\r\n    \r\n    this.setState({patientTemplateInfo: patientTemplateInfo});\r\n  }\r\n  removePatientAssignedTemplateStage = (patientId, index, event) => {\r\n    let patientTemplateInfo = this.state.patientTemplateInfo;\r\n    if(patientTemplateInfo[patientId] !== undefined){   \r\n      if(patientTemplateInfo[patientId].stageInfo !== undefined)\r\n        patientTemplateInfo[patientId].stageInfo.splice(index, 1);\r\n          \r\n      \r\n      \r\n    }\r\n    \r\n    this.setState({patientTemplateInfo: patientTemplateInfo});\r\n  }\r\n\r\n  setStepComleted = (activeTab) => {\r\n    if(activeTab === 1){\r\n      if(!this.validateStep1()){\r\n        return false;\r\n      }\r\n      else\r\n        this.setState({activeTab: activeTab});\r\n    }\r\n    else if(activeTab === 2){\r\n      if(!this.validateStep2()){\r\n        toast.error(\"Please assign patient to a doctor\");\r\n        return false;\r\n      }\r\n      else\r\n        this.setState({activeTab: activeTab});\r\n    }\r\n    else\r\n    this.setState({activeTab: activeTab});\r\n   this.scrollToTop();\r\n  }\r\n\r\n  toggleModal = () => {\r\n    this.setState({\r\n      modal: !this.state.modal,      \r\n    });\r\n  }\r\n\r\n  finishAddClinicalTrial = () => {\r\n    if(!this.validateStep3()){\r\n      toast.error(\"Every patient and doctors should assign template \");\r\n      return false;\r\n    }\r\n    else {\r\n      let selectedDoctorInfo = [];\r\n      \r\n      Object.keys(this.state.doctorTemplateInfo).forEach((key, val) => {\r\n        let doctorValue = this.state.doctorTemplateInfo[key];\r\n        //let assignedPatient = this.state.assignPatientInfoWithDoctor[key];\r\n        let doctorInfoData = this.state.selectedDoctor.filter(function(item){ return item.authId === key;});\r\n        \r\n        if(doctorValue.stagesWithPatientAppointment.length > 0){\r\n          for(let p of doctorValue.stagesWithPatientAppointment){            \r\n            Object.keys(p.patientInfoData).forEach((patientId, v) => {\r\n              let value = p.patientInfoData[patientId];\r\n              let clinicalTrialDetail = {};\r\n              clinicalTrialDetail.doctorId = key;\r\n              clinicalTrialDetail.doctorTemplateId = doctorValue.selectedTemplate[p.form] !== undefined ? doctorValue.selectedTemplate[p.form].templateId : \"\";\r\n              clinicalTrialDetail.doctorTemplateCategoryId = doctorValue.selectedTemplate[p.form] !== undefined ? doctorValue.selectedTemplate[p.form].categoryId : \"\";\r\n              if(doctorInfoData.length > 0 )\r\n                clinicalTrialDetail.doctorRole = doctorInfoData[0].role;\r\n              else\r\n                clinicalTrialDetail.doctorRole = \"\";\r\n              clinicalTrialDetail.patientId = patientId;\r\n              clinicalTrialDetail.stage = parseInt(p.stage) + 1;\r\n              clinicalTrialDetail.scheduleDate = value.schedule_date;\r\n              clinicalTrialDetail.doctorDescription = doctorValue.description || \"\";\r\n              clinicalTrialDetail.patientTemplateId = doctorValue.selectedTemplate[value.patientform] !== undefined ? doctorValue.selectedTemplate[value.patientform].templateId : \"\";\r\n              clinicalTrialDetail.patientTemplateCategoryId = doctorValue.selectedTemplate[value.patientform] !== undefined ? doctorValue.selectedTemplate[value.patientform].categoryId : \"\";\r\n              clinicalTrialDetail.patientDescription = \"\";\r\n              \r\n              selectedDoctorInfo.push(clinicalTrialDetail);\r\n            });\r\n          }\r\n        }\r\n        \r\n      });\r\n      \r\n      let clinicalTrialInfo = {\r\n        clinicalTrial: this.state.clinical_trial,\r\n        startDate: this.state.startDate,\r\n        endDate: this.state.endDate,\r\n        stagesData: this.state.stagesData,\r\n        clinicalTrialSchedular: selectedDoctorInfo,\r\n        categoryId: this.state.trialCategoryId,\r\n        subCategoryId: this.state.trialSubCategoryId,\r\n        selectedDoctorRole: this.state.selectedDoctor.map(item => { return {doctorId: item.authId, role: item.role};}),\r\n        selectedDoctor: this.state.selectedDoctor.map(item => item.authId),\r\n        selectedPatient: this.state.selectedPatient.map(item => item.authId),\r\n        phase: this.state.phase,\r\n        cro: this.state.cro,\r\n        protocolNumber: this.state.protocolNumber,\r\n        sponsorId: this.state.sponsorId\r\n\r\n      }\r\n      this.setState({loading: true}, () => {\r\n        commonService.postAPIWithAccessToken('clinical-trial', clinicalTrialInfo)\r\n          .then( res => {\r\n            \r\n             \r\n            if ( undefined === res.data.data || !res.data.status ) {\r\n              this.setState( { loading: false } );\r\n              toast.error(res.data.message);\r\n              return;\r\n            }   \r\n            \r\n            this.setState({loading:false, clinicalTrialId: res.data.data.clinicalTrialId, modal: true});     \r\n           \r\n          } )\r\n          .catch( err => {         \r\n            if(err.response !== undefined && err.response.status === 401) {\r\n              localStorage.clear();\r\n              this.props.history.push('/login');\r\n            }\r\n            else {\r\n              this.setState( { loading: false } );\r\n              toast.error(err.message);\r\n            }\r\n          } )\r\n        \r\n      });\r\n    }\r\n  }\r\n\r\n  validateStep1(){\r\n    let formValid = true;\r\n    let errorStep1 = {};\r\n    if(this.state.selectedDoctor.length === 0){\r\n      errorStep1.selectedDoctor = 'Please add investigator to clinical trial!';  \r\n      formValid = false;\r\n    }\r\n    if(this.state.selectedPatient.length === 0){\r\n      errorStep1.selectedPatient = 'Please add patient to clinical trial!';  \r\n      formValid = false;\r\n    }\r\n\r\n    if(this.state.clinical_trial === \"\"){\r\n      errorStep1.clinical_trial = 'Clinical trial title required!';  \r\n      formValid = false;\r\n    }\r\n\r\n    if(this.state.trialCategoryId === \"\"){\r\n      errorStep1.trialCategoryId = 'Study field required!';  \r\n      formValid = false;\r\n    }\r\n\r\n    if(this.state.trialSubCategoryId === \"\"){\r\n      errorStep1.trialSubCategoryId = 'Sub study field required!';  \r\n      formValid = false;\r\n    }\r\n\r\n    if(this.state.startDate === \"\"){\r\n      errorStep1.startDate = 'Clinical trial start date required!';  \r\n      formValid = false;\r\n    }\r\n\r\n    if(this.state.endDate === \"\"){\r\n      errorStep1.endDate = 'Clinical trial end date required!';  \r\n      formValid = false;\r\n    }\r\n\r\n    if(this.state.stagesData.length === 0){\r\n      errorStep1.stagesData = 'Clinical trial stages required!';  \r\n      formValid = false;\r\n    }\r\n    else{\r\n      for(let i = 0; i < this.state.stagesData.length; i++){\r\n        \r\n        let stagesInfo = this.state.stagesData[i];\r\n\r\n        if(stagesInfo.startDate === \"\" || stagesInfo.endDate === \"\"){\r\n          errorStep1.stagesData = 'Clinical trial all stages start and end date required!';  \r\n          formValid = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState({errorStep1: errorStep1});\r\n    return formValid;\r\n\r\n  }\r\n\r\n  validateStep2(){\r\n    let formValid = true;\r\n    //let errorStep2 = {};\r\n    if(Object.keys(this.state.assignPatientInfoWithDoctor).length === 0)\r\n      formValid = false;\r\n    else {\r\n      Object.keys(this.state.assignPatientInfoWithDoctor).forEach((key, index) => {\r\n        if(!Array.isArray(this.state.assignPatientInfoWithDoctor[key]) || this.state.assignPatientInfoWithDoctor[key].length === 0  )\r\n          formValid = false;\r\n      })\r\n    }\r\n    return formValid;\r\n  }\r\n\r\n  validateStep3() {\r\n    let formValid = true;\r\n    \r\n    //let errorStep3 = {};\r\n    if(Object.keys(this.state.doctorTemplateInfo).length === 0 || Object.keys(this.state.doctorTemplateInfo).length !== this.state.selectedDoctor.length)\r\n      formValid = false;\r\n    else {\r\n      Object.keys(this.state.doctorTemplateInfo).forEach((key, index) => {\r\n        /*if(!Array.isArray(this.state.doctorTemplateInfo[key].stagesWithPatientAppointment) || this.state.doctorTemplateInfo[key].stagesWithPatientAppointment.length === 0  )\r\n          formValid = false;*/\r\n        /*else{\r\n          for(let p of this.state.doctorTemplateInfo[key].stagesWithPatientAppointment){\r\n            if(Object.keys(p.patientInfoData).length === 0 || this.state.assignPatientInfoWithDoctor[key].length !== Object.keys(p.patientInfoData).length)\r\n              formValid = false;\r\n          }\r\n        }*/\r\n        \r\n      })\r\n    }\r\n    /*if(Object.keys(this.state.patientTemplateInfo).length === 0 || Object.keys(this.state.patientTemplateInfo).length !== this.state.selectedPatient.length)\r\n      formValid = false;\r\n    else {\r\n      Object.keys(this.state.patientTemplateInfo).forEach((key, index) => {\r\n        if(!Array.isArray(this.state.patientTemplateInfo[key].stageInfo) || this.state.patientTemplateInfo[key].stageInfo.length === 0  )\r\n          formValid = false;\r\n        \r\n      })\r\n    }*/\r\n    \r\n    return formValid;\r\n  }\r\n\r\n  changeTrialHandler = event => {\r\n    const value = event.target.value;\r\n    this.setState({trialCategoryId: value, patientSelectIndex: \"\"});\r\n    this.subPracticeCategoryList(value);\r\n    this.patientList({practiceCategory: value});\r\n  }\r\n\r\n  disabledScheduleTime = (doctorId, event) => {\r\n    let doctorTemplateInfo = this.state.doctorTemplateInfo;\r\n    \r\n    if(doctorTemplateInfo[doctorId] !== undefined){\r\n      let exculdesTimes = [];\r\n      let patientInfoData = doctorTemplateInfo[doctorId].stagesWithPatientAppointment.map(item => item.patientInfoData);\r\n      for(let p of patientInfoData){\r\n        Object.keys(p).forEach((key, index) => {\r\n          if(p[key].schedule_date !== undefined)\r\n            exculdesTimes.push(p[key].schedule_date);\r\n        })\r\n      }\r\n      doctorTemplateInfo[doctorId]['exculdesTimes'] = exculdesTimes;\r\n      this.setState({doctorTemplateInfo: doctorTemplateInfo});\r\n    }\r\n  }\r\n  \r\n  render() {\r\n\r\n    const { activeTab, doctorList, userList, errorStep1, loading, practiceCategoryList, subPracticeCategoryList, specializationList, sponsorsList } = this.state; \r\n    let assignDoctorToPatientData = {};\r\n    for(let p of this.state.selectedPatient){\r\n      Object.keys(this.state.assignPatientInfoWithDoctor).forEach((key, index) => {\r\n        let checkPatientExists = this.state.assignPatientInfoWithDoctor[key].filter(function(item) { return item.authId === p.authId;});\r\n        if(checkPatientExists.length > 0 ){\r\n          let doctorInfo = this.state.selectedDoctor.filter(function(item){ return item.authId === key;});\r\n          if(doctorInfo.length > 0) {\r\n            if(assignDoctorToPatientData[p.authId] !== undefined){\r\n              assignDoctorToPatientData[p.authId].push(doctorInfo[0]);\r\n            }\r\n            else\r\n              assignDoctorToPatientData[p.authId] = [doctorInfo[0]]\r\n          }\r\n        }\r\n      });\r\n    }\r\n    let loaderElement ='';\r\n    \r\n    if(loading)\r\n      loaderElement = <Loader />\r\n\r\nreturn (\r\n<div className=\"clinical-trial-info-card\">\r\n   {loaderElement}\r\n   <div className=\"clinical-trial-info\">\r\n      <div className=\"clinical-trial-tab\">\r\n         <Stepper activeStep={activeTab} className=\"chhhh\" connectorStyleConfig = {{disabledColor: '#bdbdbd', activeColor: '#ed1d24', completedColor: '#a10308', style: 'solid'}} connectorStateColors = {true}>\r\n         <Step label=\"Create Clinical Trial\" className = {activeTab === 0 ? \"active\" : \"\"} children = \r\n         <StepsIcon iconName={\"nav-icon icon-gly-clinical-trial\"} />\r\n         completed = {activeTab > 0 ? true : false} active = {activeTab === 0 ? true : false} /*onClick = {() => this.moveSteps(0)}*/ />\r\n         <Step label=\"Appointment Assignment\" className = {activeTab === 1 ? \"active\" : \"\"} children = \r\n         <StepsIcon iconName={\"nav-icon icon-gly-appointment\"} />\r\n         completed = {activeTab > 1 ? true: false} active = {activeTab === 1 ? true : false} /*onClick = {() => this.moveSteps(1)}*/ />\r\n         <Step label=\"Assign & Review Forms\" className = {activeTab === 2 ? \"active\" : \"\"} children = \r\n         <StepsIcon iconName={\"nav-icon icon-gly-review\"} />\r\n         completed = {activeTab >= 2 ? true : false } active = {activeTab === 2 ? true : false}  /*onClick = {() => this.moveSteps(2)}*/ />\r\n         </Stepper>\r\n         {activeTab === 0 && <div className=\"subtabs-filter\">\r\n                <Row>\r\n                      \r\n                      <Col md={\"6\"}>  \r\n                        <FormGroup> \r\n                          <Label htmlFor=\"Type\">Clinical Trial Title</Label>\r\n                          <Input placeholder=\"Clinical Trial Title\" invalid = {errorStep1.clinical_trial !== undefined && errorStep1.clinical_trial !== \"\" ? true : false} name=\"clinical_trial\" onChange = {(event) =>{ this.setState({clinical_trial: event.target.value})}} required />\r\n                          <div className=\"invalid-feedback\">\r\n                            {errorStep1.clinical_trial}\r\n                          </div>      \r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg={3}>\r\n                        <FormGroup> \r\n                          <Label htmlFor=\"assign_trail_category\">Select Study <span className=\"mandatory\">*</span></Label>            \r\n                          <Input type=\"select\" placeholder=\"\" id=\"assign_trail_category\" invalid={errorStep1['trialCategoryId'] !== undefined && errorStep1['trialCategoryId'] !== \"\"} name=\"assign_trail_category\" value={this.state.trialCategoryId} onChange={this.changeTrialHandler}  >\r\n                            <option value=\"\">Select</option>\r\n                            {practiceCategoryList.map((categoryItem, index) =>\r\n                              <SetCategoryDropDownItem key={index} categoryItem={categoryItem}  />\r\n                            )}\r\n                          </Input>\r\n                          <div className=\"invalid-feedback\">\r\n                              {errorStep1['trialCategoryId']}\r\n                          </div>\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg={3}>\r\n                        <FormGroup> \r\n                          <Label htmlFor=\"assign_trial_subcategory\">Select Sub Study<span className=\"mandatory\">*</span></Label>            \r\n                          <Input type=\"select\" placeholder=\"\" id=\"assign_trial_subcategory\" invalid={errorStep1['trialSubCategoryId'] !== undefined && errorStep1['trialSubCategoryId'] !== \"\"} name=\"assign_trial_subcategory\" value={this.state.trialSubCategoryId} onChange={(event) => {this.setState({trialSubCategoryId: event.target.value, patientSelectIndex: \"\"}); this.patientList({practiceCategory: this.state.trialCategoryId, practiceSubCategory: event.target.value});}}  >\r\n                            <option value=\"\">Select</option>\r\n                            {subPracticeCategoryList.map((categoryItem, index) =>\r\n                              <SetCategoryDropDownItem key={index} categoryItem={{categoryId: categoryItem.subCategoryId, categoryName: categoryItem.subCategoryName}}  />\r\n                            )}\r\n                          </Input>\r\n                          <div className=\"invalid-feedback\">\r\n                              {errorStep1['trialSubCategoryId']}\r\n                          </div>\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col md={\"3\"}>  \r\n                        <FormGroup> \r\n                          <Label htmlFor=\"Type\">Phase</Label>\r\n                          <Input placeholder=\"Phase\" invalid = {errorStep1.phase !== undefined && errorStep1.phase !== \"\" ? true : false} name=\"phase\" onChange = {(event) =>{ this.setState({phase: event.target.value})}}  />\r\n                          <div className=\"invalid-feedback\">\r\n                            {errorStep1.phase}\r\n                          </div>      \r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col md={\"3\"}>  \r\n                        <FormGroup> \r\n                          <Label htmlFor=\"Type\">CRO</Label>\r\n                          <Input placeholder=\"CRO\" invalid = {errorStep1.cro !== undefined && errorStep1.cro !== \"\" ? true : false} name=\"cro\" onChange = {(event) =>{ this.setState({cro: event.target.value})}}  />\r\n                          <div className=\"invalid-feedback\">\r\n                            {errorStep1.cro}\r\n                          </div>      \r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col md={\"3\"}>  \r\n                        <FormGroup> \r\n                          <Label htmlFor=\"Type\">Protocol Number</Label>\r\n                          <Input placeholder=\"Protocol Number\" invalid = {errorStep1.protocolNumber !== undefined && errorStep1.protocolNumber !== \"\" ? true : false} name=\"protocolNumber\" onChange = {(event) =>{ this.setState({protocolNumber: event.target.value})}}  />\r\n                          <div className=\"invalid-feedback\">\r\n                            {errorStep1.protocolNumber}\r\n                          </div>      \r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg={3}>\r\n                        <FormGroup> \r\n                          <Label htmlFor=\"sponsorId\">Select Sponsor</Label>            \r\n                          <Input type=\"select\" placeholder=\"\" id=\"sponsorId\" invalid={errorStep1['sponsorId'] !== undefined && errorStep1['sponsorId'] !== \"\"} name=\"sponsorId\" value={this.state.sponsorId} onChange={(event) => {this.setState({sponsorId: event.target.value});}}  >\r\n                            <option value=\"\">Select</option>\r\n                            {sponsorsList.map((categoryItem, index) =>\r\n                              <SetCategoryDropDownItem key={index} categoryItem={{categoryId: categoryItem.sponsorId, categoryName: categoryItem.companyName}}  />\r\n                            )}\r\n                          </Input>\r\n                          <div className=\"invalid-feedback\">\r\n                              {errorStep1['sponsorId']}\r\n                          </div>\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col md={\"3\"}>  \r\n                        <FormGroup> \r\n                          <Label htmlFor=\"Type\" check>Search Investigator By:</Label>                           \r\n                        </FormGroup>\r\n                        <FormGroup check inline> \r\n                          <Label htmlFor=\"Type\" check><Input type=\"radio\" value = \"name\" checked = { this.state.searchDoctor === \"name\" ? true: false} onChange = {(event) => { this.setState({searchDoctor: \"name\", doctorSelectIndex: \"\"}); this.doctorList();}} />Name</Label>                           \r\n                        </FormGroup>\r\n                        <FormGroup check inline> \r\n                          <Label htmlFor=\"Type\" check><Input type=\"radio\" name=\"specialization\" checked = { this.state.searchDoctor === \"specialization\" ? true: false} onChange = {(event) => { this.setState({searchDoctor: \"specialization\", selectedSpecialization: \"\", doctorSelectIndex: \"\"}); this.doctorList();}} />Specialization</Label>                           \r\n                        </FormGroup>\r\n                        \r\n                      </Col>\r\n                      {\r\n                        this.state.searchDoctor === \"specialization\" && <Col md ={\"2\"}>\r\n                          <FormGroup> \r\n                            <Label htmlFor=\"Type\">Select Specialization</Label>\r\n                            <Input type=\"select\" placeholder=\"select specialization *\" value = {this.state.selectedSpecialization} id=\"selectedSpecialization\" onChange = {(event) => { this.setState({selectedSpecialization: event.target.value, doctorSelectIndex: \"\" }); this.doctorList({selectedSpecialization: event.target.value});}}  name=\"selectedSpecialization\">\r\n                                <option value=\"\">Select</option>\r\n                                {specializationList.map((userInfo, index) =>\r\n                                  <option value = {userInfo.specializationId} key={index}>{userInfo.specializationName}</option>\r\n                                )}\r\n                              </Input>  \r\n                            <div className=\"invalid-feedback\">\r\n                              {errorStep1.selectedDoctor}\r\n                            </div>    \r\n                          </FormGroup>\r\n                        </Col>\r\n                      }\r\n                      <Col md={\"3\"}>  \r\n                        <FormGroup> \r\n                          <Label htmlFor=\"Type\">Select Investigator</Label>\r\n                          <Input type=\"select\" placeholder=\"Select Investigator *\" invalid = {errorStep1.selectedDoctor !== undefined && errorStep1.selectedDoctor !== \"\" ? true : false} value = {this.state.doctorSelectIndex} id=\"doctor\" onChange = {(event) => { this.setState({doctorSelectIndex: event.target.value })}}  name=\"doctor\">\r\n                              <option value=\"\">Select</option>\r\n                              {doctorList.map((userInfo, index) =>\r\n                                <option value = {index} key={index}>{userInfo.title} {userInfo.firstName} {userInfo.lastName}</option>\r\n                              )}\r\n                            </Input>  \r\n                          <div className=\"invalid-feedback\">\r\n                            {errorStep1.selectedDoctor}\r\n                          </div>    \r\n                        </FormGroup>\r\n                        \r\n                      </Col>\r\n                      <Col md={\"2\"}>  \r\n                        <FormGroup> \r\n                          <Label htmlFor=\"Type\">Select Investigator Role</Label>\r\n                          <Input type=\"select\" placeholder=\"Select Investigator Role *\" value = {this.state.selectedRole} id=\"selectedRole\" onChange = {(event) => { this.setState({selectedRole: event.target.value })}}  name=\"selectedRole\">\r\n                              <option value=\"\">Select</option>\r\n                              <option value=\"Principal Investigator\">Principal Investigator</option>\r\n                              <option value=\"Sub Investigator\">Sub Investigator</option>\r\n                              <option value=\"Coordinator\">Coordinator</option>\r\n                              <optgroup label=\"Sub Coordinator\">\r\n                                <option value=\"Coordinator 1\">Coordinator 1</option>\r\n                                <option value=\"Coordinator 2\">Coordinator 2</option>\r\n                                <option value=\"Coordinator 3\">Coordinator 3</option>\r\n                              </optgroup>\r\n                              \r\n                            </Input>\r\n                        </FormGroup>\r\n                        \r\n                      </Col>\r\n                      <Col md={\"2\"}>  \r\n                        <div className=\"btn profie-btn addBtn-1\" disabled = {this.state.doctorSelectIndex !== \"\" ? true : false} onClick = {this.addDoctorToList}>Add</div></Col>\r\n                      {\r\n                        this.state.selectedDoctor.length > 0 && <Col md = {\"12\"}>\r\n                        <div className=\"addDrs\">\r\n                          <Row>\r\n                            {this.state.selectedDoctor.map((selectDoctorInfo, doctorIndex) =>\r\n                              <Col md={\"3\"} key = {doctorIndex}>\r\n                                <div className=\"select-user-info\">\r\n                                  {selectDoctorInfo.firstName} {selectDoctorInfo.lastName} {selectDoctorInfo.role !== undefined && selectDoctorInfo.role !== \"\" ? `(${selectDoctorInfo.role})` : \"\"}\r\n                                  <button className=\"remove-selected-user-info\" onClick = {(event) => {this.removeSelectedDoctor(doctorIndex, event)}}><i className=\"fa fa-times\"></i></button>\r\n                                </div>\r\n                              </Col>\r\n                            )}\r\n                                  \r\n                                  \r\n                          </Row>\r\n                        </div>\r\n                        </Col>\r\n                      }\r\n                </Row>\r\n              \r\n\r\n              <Row className=\"mt-4\">\r\n                      <Col md={\"4\"}>  \r\n                        <FormGroup> \r\n                          <Label htmlFor=\"Type\">Select Patient</Label>\r\n                          <Input type=\"select\" placeholder=\"select patient *\" invalid = {errorStep1.selectedPatient !== undefined && errorStep1.selectedPatient !== \"\" ? true : false} value = {this.state.patientSelectIndex} id=\"patient\" onChange = {(event) => { this.setState({patientSelectIndex: event.target.value })}}  name=\"patient\">\r\n                              <option value=\"\">Select</option>\r\n                              {userList.map((userInfo, index) =>\r\n                                <option value = {index} key={index}>{userInfo.firstName} {userInfo.lastName}</option>\r\n                              )}\r\n                            </Input>  \r\n                            <div className=\"invalid-feedback\">\r\n                              {errorStep1.selectedPatient}\r\n                            </div>     \r\n                        </FormGroup>\r\n                        \r\n                      </Col>\r\n                      <Col md={\"2\"}>  \r\n                        <div className=\"btn profie-btn addBtn-1\" disabled = {this.state.patientSelectIndex !== \"\" ? true : false} onClick = {this.addPatientToList}>Add</div></Col>\r\n                      \r\n                {\r\n                  this.state.selectedPatient.length > 0 && <Col md = {\"12\"}>\r\n                    <div className=\"addDrs\">\r\n                    <Row>\r\n                      {this.state.selectedPatient.map((patientInfo, patientIndex) =>\r\n                        <Col md={\"3\"} key = {patientIndex}>\r\n                          <div className=\"select-user-info\">\r\n                            {patientInfo.firstName} {patientInfo.lastName}\r\n                            <button className=\"remove-selected-user-info\" onClick = {(event) => {this.removeSelectedPatient(patientIndex, event)}}><i className=\"fa fa-times\"></i></button>\r\n                          </div>\r\n                        </Col>\r\n                      )}                          \r\n                            \r\n                    </Row>\r\n                    </div>\r\n                  </Col>\r\n                }\r\n              </Row>\r\n\r\n              <Row className=\"mt-4\">\r\n                      <Col md={\"4\"}>  \r\n                        <FormGroup> \r\n                          <Label htmlFor=\"Type\"> Select Start Date </Label>\r\n                          <DatePicker className = \"form-control\" invalid = {errorStep1.startDate !== undefined && errorStep1.startDate !== \"\" ? true : false} dateFormat = \"MM/dd/yyyy\"  placeholderText = \"Start Date\" minDate= {new Date()} maxDate = {this.state.endDate} selected = {this.state.startDate} onChange = {(date) => {this.setState({startDate: date})} } placeholder=\"Start Date *\" id=\"startDate\"  name=\"startDate\" required />\r\n                          <div className=\"validate-invalid-feedback\">\r\n                            {errorStep1.startDate}\r\n                          </div>\r\n                        </FormGroup>\r\n                        \r\n                      </Col>\r\n                      \r\n                      <Col md={\"4\"}>  \r\n                        <FormGroup> \r\n                          <Label htmlFor=\"Type\">Select End Date</Label>\r\n                          <DatePicker className = \"form-control\" invalid = {errorStep1.endDate !== undefined && errorStep1.endDate !== \"\" ? true : false} dateFormat = \"MM/dd/yyyy\" placeholderText = \"End Date\" minDate = {this.state.startDate !== undefined && this.state.startDate !== \"\" ? this.state.startDate : new Date()} selected = {this.state.endDate} onChange = {(date) => {this.setState({endDate: date})} }  placeholder=\"End Date *\" id=\"endDate\"  name=\"endDate\" required />\r\n                          <div className=\"validate-invalid-feedback\">\r\n                            {errorStep1.endDate}\r\n                          </div>       \r\n                        </FormGroup>\r\n                      </Col>\r\n              </Row>\r\n\r\n              <Row className=\"mt-4\">\r\n                      <Col md={\"4\"}>  \r\n                        <FormGroup> \r\n                          <Label htmlFor=\"Type\">Select Visit </Label>\r\n                          <Input type=\"select\" invalid = {errorStep1.stagesData !== undefined && errorStep1.stagesData !== \"\" ? true : false} placeholder=\"Select Visit *\" value=\"\" id=\"stage\" onChange = {this.selectStageData}  name=\"stage\">\r\n                              <option value=\"\">Select</option>\r\n                              <option value=\"1\">Visit 1</option>\r\n                              <option value=\"2\">Visit 2</option>\r\n                              <option value=\"3\">Visit 3</option>\r\n                              <option value=\"4\">Visit 4</option>\r\n                              <option value=\"5\">Visit 5</option>\r\n                              <option value=\"6\">Visit 6</option>\r\n                              <option value=\"7\">Visit 7</option>\r\n                              <option value=\"8\">Visit 8</option>\r\n                              <option value=\"9\">Visit 9</option>\r\n                              <option value=\"10\">Visit 10</option>\r\n                              <option value=\"11\">Visit 11</option>\r\n                              <option value=\"12\">Visit 12</option>\r\n                              <option value=\"13\">Visit 13</option>\r\n                              <option value=\"14\">Visit 14</option>\r\n                              <option value=\"15\">Visit 15</option>\r\n                              <option value=\"16\">Visit 16</option>\r\n                              <option value=\"17\">Visit 17</option>\r\n                              <option value=\"18\">Visit 18</option>\r\n                              <option value=\"19\">Visit 19</option>\r\n                              <option value=\"20\">Visit 20</option>\r\n\r\n                            </Input>   \r\n                            <div className=\"invalid-feedback\">\r\n                              {errorStep1.stagesData}\r\n                            </div>   \r\n                        </FormGroup>\r\n                      </Col>\r\n                      {\r\n                        this.state.stagesData.length > 0  && <Col md = {\"12\"}>\r\n                          <div className=\"slots addDrs\">\r\n                    \r\n                            {this.state.stagesData.map((stageInfo, stageIndex) =>\r\n                            <div className=\"stageRow\">\r\n                              <Row  key = {stageIndex}>\r\n                                \r\n                                <Col md={\"2\"}>\r\n                                <div className=\"select-user-info-1\">\r\n                                  Visit { stageIndex + 1} \r\n                                        <button className=\"btnStage\" onClick = {(event) => {this.removeStageForm(stageIndex, event)}}><i className=\"fa fa-times\"></i></button>\r\n                                </div>\r\n\r\n                                </Col>\r\n\r\n                                <Col md={\"3\"}>  \r\n                                        <FormGroup> \r\n                                          <Label htmlFor=\"Type\"> Select Start Date </Label>\r\n                                          <DatePicker className = \"form-control\" dateFormat = \"MM/dd/yyyy\" placeholderText = \"Start Date\" \r\n                                            minDate = {stageIndex === 0 ? this.state.startDate : this.state.stagesData[stageIndex - 1].endDate !== \"\" ? this.state.stagesData[stageIndex - 1].endDate : this.state.startDate } \r\n                                            maxDate = {stageInfo.endDate !== \"\" ? stageInfo.endDate :this.state.stagesData.length > stageIndex + 1 ? this.state.stagesData[stageIndex + 1].startDate !== \"\" ? this.state.stagesData[stageIndex + 1].startDate : this.state.endDate : this.state.endDate} \r\n                                            selected = {stageInfo.startDate} \r\n                                            onChange = {(date) => { let stagesData = this.state.stagesData; stagesData[stageIndex].startDate = date; this.setState({stagesData: stagesData})}}  placeholder=\"Start Date *\" id=\"startDate\"  name=\"startDate\" required />\r\n                                         </FormGroup>\r\n                                        \r\n                                      </Col>\r\n                          \r\n                                      <Col md={\"3\"}>  \r\n                                        <FormGroup> \r\n                                          <Label htmlFor=\"Type\">Select End Date</Label>\r\n                                          <DatePicker className = \"form-control\" dateFormat = \"MM/dd/yyyy\" placeholderText = \"End Date\"\r\n                                           minDate = {stageInfo.startDate !== \"\" ? stageInfo.startDate : stageIndex === 0 ? this.state.startDate : this.state.stagesData[stageIndex - 1].endDate !== \"\" ? this.state.stagesData[stageIndex - 1].endDate : this.state.startDate } \r\n                                           maxDate = {this.state.stagesData.length > stageIndex + 1 ? this.state.stagesData[stageIndex + 1].startDate !== \"\" ? this.state.stagesData[stageIndex + 1].startDate : this.state.endDate : this.state.endDate}                                        \r\n                                           selected = {stageInfo.endDate}   placeholder=\"End Date *\" id=\"endDate\"  name=\"endDate\" \r\n                                            onChange = {(date) => { let stagesData = this.state.stagesData; stagesData[stageIndex].endDate = date; this.setState({stagesData: stagesData})}}  required />\r\n                                                  \r\n                                        </FormGroup>\r\n                                      </Col>\r\n                              </Row>\r\n                              </div>\r\n                            )}                          \r\n                         \r\n                          </div>\r\n                        </Col>\r\n                      }\r\n              </Row>\r\n              \r\n              </div>}\r\n\r\n              {activeTab === 1 && <div className=\"subtabs-filter\">\r\n                <Row>\r\n              <Col md={\"12\"}>  \r\n                        \r\n                          {\r\n                            this.state.selectedDoctor.map((doctorInfo, doctorIndex) => \r\n                                 <div className=\"dr-detail-card\">\r\n                              <Row key ={doctorIndex}>\r\n                                <Col md={\"12\"}><p className=\"Dr-Name\">{doctorInfo.firstName} {doctorInfo.lastName} {doctorInfo.role !== undefined && doctorInfo.role !== \"\" ? `(${doctorInfo.role})` : \"\"}</p></Col>\r\n                                <Col md={\"4\"}>  \r\n                                <FormGroup> \r\n                                  <Label htmlFor=\"Type\">Select Patient</Label>\r\n                                  <Input type=\"select\" placeholder=\"select patient *\" value = {this.state.assignPatientInfo[doctorInfo.authId]} id=\"patient\" onChange = {(event) => { this.assignPatient(doctorInfo.authId, event)}}  name=\"patient\" required>\r\n                                      <option value=\"\">Select</option>\r\n                                      {this.state.selectedPatient.map((userInfo, index) =>\r\n                                        <option value = {index} key={index}>{userInfo.firstName} {userInfo.lastName}</option>\r\n                                      )}\r\n                                    </Input>      \r\n                                </FormGroup>\r\n                              </Col>\r\n                              <Col md={\"2\"}>  \r\n                                <div className=\"btn profie-btn addBtn-1\" disabled = {this.state.assignPatientInfo[doctorInfo.authId] === undefined || this.state.patientSelectIndex === \"\" ? true : false} onClick = {() => {this.assignPatientToDoctor(doctorInfo.authId)}}>Add</div></Col>\r\n                            {\r\n                          Array.isArray(this.state.assignPatientInfoWithDoctor[doctorInfo.authId]) && this.state.assignPatientInfoWithDoctor[doctorInfo.authId].length > 0 && <Col md = {\"12\"}>\r\n                          <div className=\"addDrs\">\r\n                            <Row>\r\n                              {this.state.assignPatientInfoWithDoctor[doctorInfo.authId].map((assignPatientData, assignPatientIndex) =>\r\n                                <Col md={\"4\"} key = {assignPatientIndex}>\r\n                                  <div className=\"select-user-info\">\r\n                                    {assignPatientData.firstName} {assignPatientData.lastName}\r\n                                    <button className=\"remove-selected-user-info\" onClick = {(event) => {this.removeAssignedPatient(doctorInfo.authId, assignPatientIndex, event)}}><i className=\"fa fa-times\"></i></button>\r\n                                  </div>\r\n                                </Col>\r\n                              )}\r\n                                    \r\n                                    \r\n                            </Row>\r\n                          </div>\r\n                          </Col>\r\n                        }\r\n                          </Row>\r\n                              </div>\r\n\r\n                        )\r\n                    }\r\n                              \r\n                              \r\n                </Col>\r\n\r\n                      {/*<Col md={\"3\"} className=\"card-calender\">  \r\n                        <Calendar\r\n                    localizer={localizer}\r\n                    events={myEventsList}\r\n                    startAccessor=\"start\"\r\n                    views = {['month']}\r\n                    endAccessor=\"end\"                    \r\n                    popup = {true}/>\r\n\r\n                         <div className=\"MissedDates\">\r\n                           <p>Missed Appointment</p>\r\n                           <div className=\"Missed-numbers\">\r\n                              <p>13</p>\r\n                              <p>17</p>\r\n                              <p>21</p>\r\n                              <p>25</p>\r\n                              <p>29</p>\r\n                           </div>\r\n                         </div>\r\n\r\n                         </Col>*/}\r\n                  {/*<div className=\"btn addBtn btn-next\" onClick = {() => { this.setStepComleted(2)}}>Next</div>*/}\r\n              </Row>\r\n              </div>}\r\n\r\n              {activeTab === 2 && <div className=\"subtabs-filter\">\r\n                <Row>\r\n                     <Col md={\"9\"}>  \r\n                           \r\n                              {\r\n                                 this.state.selectedDoctor.map((doctorInfo, doctorIndex) => \r\n                                 <div className=\"dr-detail-card\">\r\n                                    <p>Assign Template to doctor</p>\r\n                                    <Row key ={doctorIndex}>\r\n                                       <Col md={\"12\"}><p className=\"Dr-Name-1\">{doctorInfo.firstName} {doctorInfo.lastName}</p></Col>\r\n                                       <Col md={\"4\"}>  \r\n                                       <FormGroup> \r\n                                         <Label htmlFor=\"Type\">Select Category</Label>\r\n                                         <Input type=\"select\" placeholder=\"select patient *\" value = {this.state.assignPatientInfo[doctorInfo.authId] !== undefined ? this.state.assignPatientInfo[doctorInfo.authId].categoryId : \"\"} id=\"patient\" onChange = {(event) => { this.getTemplateWithDoctor(doctorInfo.authId, event)}}  name=\"patient\" required>\r\n                                            <option value=\"\">Select</option>\r\n                                            {this.state.categoryList.map((categoryInfo, index) =>\r\n                                              <option value = {categoryInfo.categoryId} key={index}>{categoryInfo.categoryName}</option>\r\n                                            )}\r\n                                          </Input>      \r\n                                       </FormGroup>\r\n                                    </Col>\r\n                                    <Col md={\"4\"}>  \r\n                                       <FormGroup> \r\n                                         <Label htmlFor=\"Type\">Select Template</Label>\r\n                                         <Input type=\"select\" placeholder=\"select template *\" value = \"\" onChange = {(event) => { this.assignTemplateToDoctor(doctorInfo.authId, event)}}  name=\"temaplate\" required>\r\n                                            <option value=\"\">Select</option>\r\n                                            {\r\n                                              this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined && Array.isArray(this.state.doctorTemplateInfo[doctorInfo.authId].templateList) && \r\n                                                <>{ this.state.doctorTemplateInfo[doctorInfo.authId].templateList.map((templateInfo, temaplateIndex) => \r\n                                                    <option value={temaplateIndex}>{templateInfo.templateName}</option>\r\n                                                  )}</>\r\n                                              \r\n                                            }\r\n                                          </Input>      \r\n                                       </FormGroup>\r\n                                    </Col>\r\n                                     \r\n                                    {\r\n                                    this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined && Array.isArray(this.state.doctorTemplateInfo[doctorInfo.authId].selectedTemplate) && this.state.doctorTemplateInfo[doctorInfo.authId].selectedTemplate.length > 0 && <Col md = {\"12\"}>\r\n                                    <div className=\"addDrs\">\r\n                                       <Row>\r\n                                          {this.state.doctorTemplateInfo[doctorInfo.authId].selectedTemplate.map((selectedTemplateInfo, selectedTemplateIndex) =>\r\n                                             <Col md={\"5\"} key = {selectedTemplateIndex}>\r\n                                                <div className=\"select-user-info\">\r\n                                                   {selectedTemplateInfo.templateName}\r\n                                                   <button className=\"remove-selected-user-info\" onClick = {(event) => {this.removeDoctorAssignedTemplate(doctorInfo.authId, selectedTemplateIndex, event)}}><i className=\"fa fa-times\"></i></button>\r\n                                                </div>\r\n                                             </Col>\r\n                                          )}\r\n                                              \r\n                                              \r\n                                       </Row>\r\n                                    </div>\r\n                                    </Col>\r\n                                    }\r\n                                    <Col md = {\"12\"}>\r\n                                      { this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined && Array.isArray(this.state.doctorTemplateInfo[doctorInfo.authId].stagesWithPatientAppointment) && this.state.doctorTemplateInfo[doctorInfo.authId].stagesWithPatientAppointment.length > 0 && <>\r\n                                        {\r\n                                          this.state.doctorTemplateInfo[doctorInfo.authId].stagesWithPatientAppointment.map((stagesWithPatientAppointmentInfo, stagesWithPatientAppointmentIndex) => \r\n                                          <Row className=\"schedule-appointment-section\" key ={stagesWithPatientAppointmentIndex}>\r\n                                            <Col md={\"4\"}>  \r\n                                              <FormGroup> \r\n                                                <Label htmlFor=\"Type\">Select Visit </Label>\r\n                                                  <Input type=\"select\" placeholder=\"Select Visit *\" value={stagesWithPatientAppointmentInfo.stage}  onChange = {(event) => {this.doctorTemplateWithStage(doctorInfo.authId, \"stage\", event.target.value, stagesWithPatientAppointmentIndex)}}  name=\"stage\" required>\r\n                                                    <option value=\"\">Select</option>\r\n                                                   \r\n                                                    {\r\n                                                      this.state.stagesData.map((stageInfo, stageIndex) =>\r\n                                                        <option value={stageIndex}>Visit {stageIndex+1}</option> \r\n                                                      )\r\n                                                    }\r\n                                                  </Input>      \r\n                                              </FormGroup>\r\n                                            </Col>\r\n                                            <Col md = {\"4\"}>\r\n                                              <FormGroup> \r\n                                                <Label htmlFor=\"Type\">Select Form </Label>\r\n                                                <Input type=\"select\" placeholder=\"select Form *\" value={stagesWithPatientAppointmentInfo.form}    name=\"form\" onChange = {(event) => {this.doctorTemplateWithStage(doctorInfo.authId, \"form\", event.target.value, stagesWithPatientAppointmentIndex)}} required>\r\n                                                  <option value=\"\">Select</option>\r\n                                                  {\r\n                                                    this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined && Array.isArray(this.state.doctorTemplateInfo[doctorInfo.authId].selectedTemplate) && \r\n                                                      <>{ this.state.doctorTemplateInfo[doctorInfo.authId].selectedTemplate.map((templateInfo, temaplateIndex) => \r\n                                                          <option value={temaplateIndex}>{templateInfo.templateName}</option>\r\n                                                        )}</>\r\n                                                    \r\n                                                  }\r\n                                                </Input>\r\n                                              </FormGroup>\r\n                                            </Col>\r\n                                            <Col md ={\"12\"}>\r\n                                              <Label>Assign template & schedule appointment to patient</Label>\r\n                                              {\r\n                                                 this.state.assignPatientInfoWithDoctor[doctorInfo.authId] !== undefined && this.state.assignPatientInfoWithDoctor[doctorInfo.authId].map((assignedPatient, assignedPatientIndex) => \r\n                                                     <Row key = {assignedPatientIndex}>\r\n                                                       <Col md={\"4\"}>\r\n                                                         <FormGroup>\r\n                                                           <Label htmlFor=\"patientInfo\">Patients</Label>  \r\n                                                            <Input type=\"text\" readOnly= {true} placeholder=\"Patient Name *\" value={`${assignedPatient.firstName} ${assignedPatient.lastName}`}    name=\"patient\" />                                                        \r\n                                                         </FormGroup>\r\n                                                       </Col>\r\n                                                       <Col md = {\"3\"}>\r\n                                                          <FormGroup> \r\n                                                            <Label htmlFor=\"Type\">Select Patient Form </Label>\r\n                                                            <Input type=\"select\" placeholder=\"select Form *\" value={stagesWithPatientAppointmentInfo.patientInfoData !== undefined && stagesWithPatientAppointmentInfo.patientInfoData[assignedPatient.authId] !== undefined ? stagesWithPatientAppointmentInfo.patientInfoData[assignedPatient.authId].patientform  : \"\"}    name=\"patientform\" onChange = {(event) => {this.doctorTemplateWithStage(doctorInfo.authId, \"patientform\", event.target.value, stagesWithPatientAppointmentIndex, assignedPatient.authId)}} required>\r\n                                                              <option value=\"\">Select</option>\r\n                                                              {\r\n                                                                this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined && Array.isArray(this.state.doctorTemplateInfo[doctorInfo.authId].selectedTemplate) && \r\n                                                                  <>{ this.state.doctorTemplateInfo[doctorInfo.authId].selectedTemplate.map((templateInfo, temaplateIndex) => \r\n                                                                      <option value={temaplateIndex}>{templateInfo.templateName}</option>\r\n                                                                    )}</>\r\n                                                                \r\n                                                              }\r\n                                                            </Input>\r\n                                                          </FormGroup>\r\n                                                        </Col>\r\n                                                        <Col md={\"5\"}>  \r\n                                                          <FormGroup> \r\n                                                            <Label htmlFor=\"Type\">Schedule Date</Label>\r\n                                                            <DatePicker className = \"form-control\" dateFormat = \"MM/dd/yyyy h:mm aa\" showTimeSelect excludeTimes = {this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined && Array.isArray(this.state.doctorTemplateInfo[doctorInfo.authId].exculdesTimes) ? this.state.doctorTemplateInfo[doctorInfo.authId].exculdesTimes : []}\r\n                                                            onChange = {(date) => {this.doctorTemplateWithStage(doctorInfo.authId, \"schedule_date\", date, stagesWithPatientAppointmentIndex, assignedPatient.authId)}} \r\n                                                             name = \"schedule_date\"\r\n                                                             placeholderText = \"Schedule Date\"\r\n                                                             minDate = {this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined && this.state.doctorTemplateInfo[doctorInfo.authId].stage !== undefined && this.state.doctorTemplateInfo[doctorInfo.authId].stage !== \"\" ? this.state.stagesData[this.state.doctorTemplateInfo[doctorInfo.authId].stage].startDate : this.state.startDate} \r\n                                                             maxDate = {this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined && this.state.doctorTemplateInfo[doctorInfo.authId].stage !== undefined && this.state.doctorTemplateInfo[doctorInfo.authId].stage !== \"\" ? this.state.stagesData[this.state.doctorTemplateInfo[doctorInfo.authId].stage].endDate : this.state.endDate}\r\n                                                             selected = {stagesWithPatientAppointmentInfo.patientInfoData !== undefined && stagesWithPatientAppointmentInfo.patientInfoData[assignedPatient.authId] !== undefined ? stagesWithPatientAppointmentInfo.patientInfoData[assignedPatient.authId].schedule_date  : \"\"}\r\n                                                             onFocus = {(e) => { this.disabledScheduleTime(doctorInfo.authId, e)}}\r\n                                                             required />\r\n                                                                   \r\n                                                          </FormGroup>\r\n                                                        </Col>\r\n                                                     </Row>\r\n                                                     \r\n                                                   )\r\n                                               }\r\n                                              \r\n                                            </Col>\r\n                                            {/*<Col md={\"5\"}>  \r\n                                              <FormGroup> \r\n                                                <Label htmlFor=\"Type\">Schedule Date</Label>\r\n                                                <DatePicker className = \"form-control\" dateFormat = \"MM/dd/yyyy h:mm aa\" showTimeSelect \r\n                                                onChange = {(date) => {this.doctorTemplateWithStage(doctorInfo.authId, \"schedule_date\", date)}} \r\n                                                 name = \"schedule_date\"\r\n                                                 placeholderText = \"Schedule Date\"\r\n                                                 minDate = {this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined && this.state.doctorTemplateInfo[doctorInfo.authId].stage !== undefined && this.state.doctorTemplateInfo[doctorInfo.authId].stage !== \"\" ? this.state.stagesData[this.state.doctorTemplateInfo[doctorInfo.authId].stage].startDate : this.state.startDate} \r\n                                                 maxDate = {this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined && this.state.doctorTemplateInfo[doctorInfo.authId].stage !== undefined && this.state.doctorTemplateInfo[doctorInfo.authId].stage !== \"\" ? this.state.stagesData[this.state.doctorTemplateInfo[doctorInfo.authId].stage].endDate : this.state.endDate}\r\n                                                 selected = {this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined ? this.state.doctorTemplateInfo[doctorInfo.authId].schedule_date  : \"\"}\r\n                                                 required />\r\n                                                       \r\n                                              </FormGroup>\r\n                                            </Col>*/}\r\n                                            {\r\n                                              this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined && Array.isArray(this.state.doctorTemplateInfo[doctorInfo.authId].stageInfo) && this.state.doctorTemplateInfo[doctorInfo.authId].stageInfo.length > 0 && <Col md = {\"12\"}>\r\n                                              <div className=\"addDrs\">\r\n                                                 <Row>\r\n                                                    {this.state.doctorTemplateInfo[doctorInfo.authId].stageInfo.map((stageDetails, stageIndex) =>\r\n                                                       <Col md={\"4\"} key = {stageIndex}>\r\n                                                          <div className=\"select-user-info\">\r\n                                                             <span>Visit {parseInt(stageDetails.stage) + 1 }</span>\r\n                                                             <span>{stageDetails.form.templateName}</span>\r\n                                                             <button className=\"remove-selected-user-info\" onClick = {(event) => {this.removeDoctorAssignedTemplateStage(doctorInfo.authId, stageIndex, event)}}><i className=\"fa fa-times\"></i></button>\r\n                                                          </div>\r\n                                                       </Col>\r\n                                                    )}\r\n                                                        \r\n                                                        \r\n                                                 </Row>\r\n                                              </div>\r\n                                              </Col>\r\n                                              }\r\n                                          </Row>\r\n                                        )}\r\n                                        { this.state.stagesData.length > 1 &&\r\n                                        <Col md={\"3\"}>  \r\n                                        <div className=\"btn profie-btn addBtn-1\" onClick = {() => {this.assignSTageRowToDoctor(doctorInfo.authId)}}>Add More Visit</div></Col>\r\n                                        }\r\n                                        </>\r\n                                      }\r\n                                      \r\n                                        \r\n                                  </Col>\r\n                                  <Col md = {\"12\"}>\r\n                                      <FormGroup> \r\n                                        <Label htmlFor=\"Type\">Description</Label>\r\n                                        <Input type =\"textarea\" rows = \"3\" value={this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined ? this.state.doctorTemplateInfo[doctorInfo.authId].description  : \"\"} onChange = {(event) => {this.doctorTemplateWithStage(doctorInfo.authId, \"description\", event.target.value)}} placeholder=\"Description\" required />\r\n                                               \r\n                                      </FormGroup>\r\n                                  </Col>\r\n                                  <Col md = {\"12\"}>\r\n                                      \r\n                                      <Row className=\"mt-2\">\r\n                                        <Col md={\"3\"}>\r\n                                          <p className=\"pateint-Assign\">Assign Patients:</p>\r\n                                        </Col>\r\n                                       {\r\n                                         this.state.assignPatientInfoWithDoctor[doctorInfo.authId] !== undefined && this.state.assignPatientInfoWithDoctor[doctorInfo.authId].map((assignedPatient, assignedPatientIndex) => \r\n                                             <Col md={\"3\"} key = {assignedPatientIndex}>\r\n                                                <p className=\"pateint-name\">{assignedPatient.firstName} {assignedPatient.lastName}</p>\r\n                                             </Col>\r\n                                           )\r\n                                       }\r\n                                       \r\n                                      </Row>\r\n                                  </Col>\r\n                                 </Row>\r\n                              </div>\r\n\r\n                              )\r\n                          }\r\n\r\n                          {/*\r\n                                 this.state.selectedPatient.map((patientInfo, patientIndex) => \r\n                                 <div className=\"dr-detail-card\">\r\n                                    <p>Assign template to patient</p>\r\n                                    <Row key ={patientIndex}>\r\n                                       <Col md={\"12\"}><p className=\"Dr-Name-1\">{patientInfo.firstName} {patientInfo.lastName}</p></Col>\r\n                                       <Col md={\"4\"}>  \r\n                                       <FormGroup> \r\n                                         <Label htmlFor=\"Type\">Select Category</Label>\r\n                                         <Input type=\"select\" placeholder=\"select patient *\" value = {this.state.patientTemplateInfo[patientInfo.authId] !== undefined ? this.state.patientTemplateInfo[patientInfo.authId].categoryId : \"\"} id=\"patient\" onChange = {(event) => { this.getTemplateWithPatient(patientInfo.authId, event)}}  name=\"patient\" required>\r\n                                            <option value=\"\">Select</option>\r\n                                            {this.state.categoryList.map((categoryInfo, index) =>\r\n                                              <option value = {categoryInfo.categoryId} key={index}>{categoryInfo.categoryName}</option>\r\n                                            )}\r\n                                          </Input>      \r\n                                       </FormGroup>\r\n                                    </Col>\r\n                                    <Col md={\"4\"}>  \r\n                                       <FormGroup> \r\n                                         <Label htmlFor=\"Type\">Select Template</Label>\r\n                                         <Input type=\"select\" placeholder=\"select template *\" value = \"\" onChange = {(event) => { this.assignTemplateToPatient(patientInfo.authId, event)}}  name=\"temaplate\" required>\r\n                                            <option value=\"\">Select</option>\r\n                                            {\r\n                                              this.state.patientTemplateInfo[patientInfo.authId] !== undefined && Array.isArray(this.state.patientTemplateInfo[patientInfo.authId].templateList) && \r\n                                                <>{ this.state.patientTemplateInfo[patientInfo.authId].templateList.map((templateInfo, temaplateIndex) => \r\n                                                    <option value={temaplateIndex}>{templateInfo.templateName}</option>\r\n                                                  )}</>\r\n                                              \r\n                                            }\r\n                                          </Input>      \r\n                                       </FormGroup>\r\n                                    </Col>\r\n                                     \r\n                                    {\r\n                                    this.state.patientTemplateInfo[patientInfo.authId] !== undefined && Array.isArray(this.state.patientTemplateInfo[patientInfo.authId].selectedTemplate) && this.state.patientTemplateInfo[patientInfo.authId].selectedTemplate.length > 0 && <Col md = {\"12\"}>\r\n                                    <div className=\"addDrs\">\r\n                                       <Row>\r\n                                          {this.state.patientTemplateInfo[patientInfo.authId].selectedTemplate.map((selectedTemplateInfo, selectedTemplateIndex) =>\r\n                                             <Col md={\"4\"} key = {selectedTemplateIndex}>\r\n                                                <div className=\"select-user-info\">\r\n                                                   {selectedTemplateInfo.templateName}\r\n                                                   <button className=\"remove-selected-user-info\" onClick = {(event) => {this.removePatientAssignedTemplate(patientInfo.authId, selectedTemplateIndex, event)}}><i className=\"fa fa-times\"></i></button>\r\n                                                </div>\r\n                                             </Col>\r\n                                          )}\r\n                                              \r\n                                              \r\n                                       </Row>\r\n                                    </div>\r\n                                    </Col>\r\n                                    }\r\n                                    <Col md = {\"12\"}>\r\n                                      <Row>\r\n                                        <Col md={\"4\"}>  \r\n                                          <FormGroup> \r\n                                            <Label htmlFor=\"Type\">Select Visit </Label>\r\n                                              <Input type=\"select\" placeholder=\"Select Visit *\" value={this.state.patientTemplateInfo[patientInfo.authId] !== undefined ? this.state.patientTemplateInfo[patientInfo.authId].stage  : \"\"}  onChange = {(event) => {this.patientTemplateWithStage(patientInfo.authId, \"stage\", event.target.value)}}  name=\"stage\" required>\r\n                                                <option value=\"\">Select</option>\r\n                                                {\r\n                                                  this.state.stagesData.map((stageInfo, stageIndex) =>\r\n                                                    <option value={stageIndex}>Visit {stageIndex+1}</option> \r\n                                                  )\r\n                                                }\r\n                                              </Input>      \r\n                                          </FormGroup>\r\n                                        </Col>\r\n                                        <Col md = {\"3\"}>\r\n                                          <FormGroup> \r\n                                            <Label htmlFor=\"Type\">Select Form </Label>\r\n                                            <Input type=\"select\" placeholder=\"select Form *\" value={this.state.patientTemplateInfo[patientInfo.authId] !== undefined ? this.state.patientTemplateInfo[patientInfo.authId].form  : \"\"}    name=\"form\" onChange = {(event) => {this.patientTemplateWithStage(patientInfo.authId, \"form\", event.target.value)}} required>\r\n                                              <option value=\"\">Select</option>\r\n                                              {\r\n                                                this.state.patientTemplateInfo[patientInfo.authId] !== undefined && Array.isArray(this.state.patientTemplateInfo[patientInfo.authId].selectedTemplate) && \r\n                                                  <>{ this.state.patientTemplateInfo[patientInfo.authId].selectedTemplate.map((templateInfo, temaplateIndex) => \r\n                                                      <option value={temaplateIndex}>{templateInfo.templateName}</option>\r\n                                                    )}</>\r\n                                                \r\n                                              }\r\n                                            </Input>\r\n                                          </FormGroup>\r\n                                        </Col>\r\n                                        \r\n                                        <Col md={\"2\"}>  \r\n                                        <div className=\"btn profie-btn addBtn-1\" onClick = {() => {this.assignSTageInfoToPatient(patientInfo.authId)}}>Add</div></Col>\r\n                                        {\r\n                                          this.state.patientTemplateInfo[patientInfo.authId] !== undefined && Array.isArray(this.state.patientTemplateInfo[patientInfo.authId].stageInfo) && this.state.patientTemplateInfo[patientInfo.authId].stageInfo.length > 0 && <Col md = {\"12\"}>\r\n                                          <div className=\"addDrs\">\r\n                                             <Row>\r\n                                                {this.state.patientTemplateInfo[patientInfo.authId].stageInfo.map((stageDetails, stageIndex) =>\r\n                                                   <Col md={\"4\"} key = {stageIndex}>\r\n                                                      <div className=\"select-user-info\">\r\n                                                         <span>Visit {parseInt(stageDetails.stage) + 1}</span>\r\n                                                         <span>{stageDetails.form.templateName}</span>\r\n                                                         <button className=\"remove-selected-user-info\" onClick = {(event) => {this.removePatientAssignedTemplateStage(patientInfo.authId, stageIndex, event)}}><i className=\"fa fa-times\"></i></button>\r\n                                                      </div>\r\n                                                   </Col>\r\n                                                )}\r\n                                                    \r\n                                                    \r\n                                             </Row>\r\n                                          </div>\r\n                                          </Col>\r\n                                          }\r\n                                      </Row>\r\n                                  </Col>\r\n                                  <Col md = {\"12\"}>\r\n                                      <FormGroup> \r\n                                        <Label htmlFor=\"Type\">Description</Label>\r\n                                        <Input type =\"textarea\" rows = \"3\" value={this.state.patientTemplateInfo[patientInfo.authId] !== undefined ? this.state.patientTemplateInfo[patientInfo.authId].description  : \"\"} onChange = {(event) => {this.patientTemplateWithStage(patientInfo.authId, \"description\", event.target.value)}} cols=\"50\" placeholder=\"Description\" required  />\r\n                                               \r\n                                      </FormGroup>\r\n                                  </Col>\r\n                                  <Col md = {\"12\"}>\r\n                                      \r\n                                      <Row className=\"mt-2\">\r\n                                        <Col md={\"3\"}>\r\n                                             <p className=\"pateint-Assign\">Assign Doctor:</p>\r\n                                        </Col>\r\n                                        {\r\n                                          assignDoctorToPatientData[patientInfo.authId] !== undefined && assignDoctorToPatientData[patientInfo.authId].map((assignDocotorInfo, assignDoctorIndex) =>\r\n                                              <Col md={\"3\"}>\r\n                                                <p className=\"pateint-name\">{assignDocotorInfo.firstName} {assignDocotorInfo.lastName}</p>\r\n                                            </Col>\r\n                                        \r\n                                          )\r\n                                        }\r\n                                        \r\n                                      </Row>\r\n                                  </Col>\r\n                                 </Row>\r\n                              </div>\r\n\r\n                              )*/\r\n                          }\r\n                                    \r\n                                    \r\n                      </Col>\r\n\r\n                         <Col md={\"3\"} className=\"card-calender\"> \r\n                           <FormGroup> \r\n                             <Label htmlFor=\"Type\">Investigator Calendar</Label>\r\n                             <Input type=\"select\" placeholder=\"Select Investigator *\" value = {this.state.selectedDoctorCalendarIndex} id=\"doctor\" onChange = {(event) => { this.setState({selectedDoctorCalendarIndex: event.target.value })}}  name=\"doctor\" required>\r\n                                <option value=\"\">Select</option>\r\n                                {doctorList.map((userInfo, index) =>\r\n                                  <option value = {index} key={index}>{userInfo.firstName} {userInfo.lastName}</option>\r\n                                )}\r\n                              </Input>      \r\n                           </FormGroup>\r\n                           {this.state.selectedDoctorCalendarIndex !== \"\" && <FormGroup>\r\n                              <Label>{doctorList[this.state.selectedDoctorCalendarIndex].firstName} {doctorList[this.state.selectedDoctorCalendarIndex].lastName}</Label>\r\n                           </FormGroup> }\r\n                           <Calendar\r\n                           localizer={localizer}\r\n                           events={myEventsList}\r\n                           startAccessor=\"start\"\r\n                           views = {['month']}\r\n                           endAccessor=\"end\"                         \r\n                           popup = {true}/>\r\n\r\n                         <div className=\"MissedDates\">\r\n                           <p>Missed Appointment</p>\r\n                           <div className=\"Missed-numbers\">\r\n                              <p>13</p>\r\n                              <p>17</p>\r\n                              <p>21</p>\r\n                              <p>25</p>\r\n                              <p>29</p>\r\n                           </div>\r\n                        </div>\r\n                           <p>Previous form History</p>\r\n\r\n                           <Row className=\"FormDownload\">\r\n                           <Col md={\"9\"}> \r\n                              <div className=\"DrName-form\">Jerry Dew</div>  \r\n                              Download Form\r\n                           </Col>\r\n                           <Col md={\"3\"}>\r\n                              <p className=\"download-ic\"><i class=\"nav-icon icon-docs\"></i></p>\r\n                           </Col>\r\n                           </Row>\r\n\r\n                           <Row className=\"FormDownload\">\r\n                           <Col md={\"9\"}> \r\n                              <div className=\"DrName-form\">Jerry Dew</div>  \r\n                              Download Form\r\n                           </Col>\r\n                           <Col md={\"3\"}>\r\n                              <p className=\"download-ic\"><i class=\"nav-icon icon-docs\"></i></p>\r\n                           </Col>\r\n                           </Row>\r\n\r\n                           <Row className=\"FormDownload\">\r\n                           <Col md={\"9\"}> \r\n                              <div className=\"DrName-form\">Jerry Dew</div>  \r\n                              Download Form\r\n                           </Col>\r\n                           <Col md={\"3\"}>\r\n                              <p className=\"download-ic\"><i class=\"nav-icon icon-docs\"></i></p>\r\n                           </Col>\r\n                           </Row>\r\n                         </Col>\r\n                         {/*<div className=\"btn addBtn btn-next\" onClick = {() => { this.setStepComleted(2)}}>Next</div>*/}\r\n                  </Row>\r\n              </div>}\r\n               {activeTab !== 0 && <div className=\"btn addBtn btn-next\" onClick = {() => { this.setStepComleted(activeTab-1)}}>Back</div>}  \r\n               {activeTab !== 2 ? <div className=\"btn addBtn btn-next\" onClick = {() => { this.setStepComleted(activeTab+1)}}>Next</div> : <div className=\"btn addBtn btn-next\" onClick = {this.finishAddClinicalTrial}>Submit</div>}\r\n        </div>\r\n        \r\n    </div>\r\n    <Modal isOpen={this.state.modal} toggle={this.toggleModal} className=\"Popup-Modal-YesNo full-width-modal-section organization-modal\">\r\n          <ModalBody>\r\n            <Row>\r\n              <Col md = {\"12\"}>\r\n              <div className=\"popup-head-img\">\r\n               <img src= {popupImgUrl} className=\"imghead\" alt =\"img\" width = \"100px\" height = \"100px\"/>\r\n              </div>\r\n              <div className=\"popup-C\">              \r\n                <h2>Clinical Trial Created Successfully</h2>\r\n                {/*<p className=\"color-grey\">It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters.</p>*/}\r\n                <Link to = {`/admin/manage-trial/clinical-trial/${this.state.clinicalTrialId}`} className=\"btn addBtn btn-next\">View Saved Details</Link>\r\n              </div>\r\n              </Col>\r\n            </Row>           \r\n          </ModalBody>\r\n      </Modal>\r\n    \r\n    </div>\r\n  )\r\n  }\r\n}\r\n\r\nfunction SetCategoryDropDownItem (props) {\r\n  const categoryItem = props.categoryItem;\r\n  return (<option value={categoryItem.categoryId} >{categoryItem.categoryName}</option>)\r\n}\r\n\r\nexport default ClinicalTrial;\r\n\r\nexport class StepsIcon  extends Component {\r\nrender() {\r\nreturn (<i className={`${this.props.iconName}`}></i>);\r\n}\r\n}","import React from 'react';\nimport \"./Loader.css\"\nconst Loader = () => {\n    return (\n        <div className=\"loaderSection\">\n             <div className=\"spinner-border text-primary\" role=\"status\">\n                  <span className=\"sr-only\">Loading...</span>\n              </div>\n        </div>\n    );\n}\n\nexport default Loader;"],"sourceRoot":""}
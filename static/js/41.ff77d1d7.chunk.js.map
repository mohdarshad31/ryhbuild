{"version":3,"sources":["core/components/Checkbox.js","views/AdminDashboard/Doctors/DoctorsDetails.js","views/Loader/Loader.js","core/google-map/GeoLocationData.js","core/google-map/AutoCompletePlaces.js"],"names":["Checkbox","label","isSelected","onCheckboxChange","value","className","type","name","checked","onChange","weekArr","day","dayName","timeSlots","startTime","endTime","DoctorsDetails","props","changeHandler","event","target","formField","state","setState","handleAvlChange","e","checkboxes","handleAvlCatChange","selectedServices","push","splice","indexOf","handleSpecializationChange","selectedSpecialization","handleSuperSpecializationChange","selectedSuperSpecialization","changeTimeHandler","targetName","split","length","addMoreTimeSlots","removeTimeSlots","timeSlotIndex","handleImageChange","targetFile","files","reader","FileReader","currentObj","onload","imagePreview","result","readAsDataURL","profileImage","onDocumentsImageChange","documentsImages","buttonProcessing","loading","errors","visible","uploadedDocumentsImages","formProccessing","dataTableItem","categoryList","superSpecializationList","specializationList","getCategoryList","bind","submitHandler","params","this","match","undefined","doctorsId","getDoctorProfile","history","getSpecialization","getSuperSpecialization","commonService","getAPIWithAccessToken","then","res","data","status","toast","error","message","catch","err","response","localStorage","clear","console","log","profileInfo","first_name","firstName","last_name","lastName","phoneNumber","address","description","services","map","item","categoryId","specialization","specializationId","superSpecialization","selectedCheckboxes","availability","weekDataArray","forEach","weekInfo","index","dayInfo","filter","isOpen","preventDefault","validateForm","formInputField","formData","FormData","append","latitude","longitude","i","JSON","stringify","putAPIWithAccessToken","success","formValid","trim","selectedAvailability","loaderElement","Loader","Card","CardHeader","Row","Col","md","CardBody","Form","onSubmit","noValidate","FormGroup","Label","htmlFor","Input","placeholder","invalid","id","required","specializationInfo","check","inline","key","specializationName","week","slotsInfo","slotIndex","title","onClick","alt","width","src","multiple","imagesInfo","Media","href","window","confirm","deleteTruckImage","Button","color","disabled","to","Component","role","GeoLocationData","scriptLoading","updateAddress","cords","React","AutoCompletePlaces","useCurrentLocation","locationEnabled","setLatitudeLongitude","currentAddress","formatted_address","city","country","postal_code","handleChange","lat","lng","handleSelect","geocodeByAddress","results","place","componentForm","premise","street_number","route","locality","administrative_area_level_1","address_components","addressType","types","getLatLng","latLng","updateGeoLocationAddress","google","s","document","createElement","x","getElementsByTagName","parentNode","insertBefore","addEventListener","coords","getExternalAPI","getGoogleAPIKey","googleMapData","getCountry","getState","getCity","getPostalCode","addressInfo","long_name","isGeolocationAvailable","isGeolocationEnabled","onSelect","getInputProps","suggestions","getSuggestionItemProps","suggestion","active","style","backgroundColor","cursor","formattedSuggestion","mainText","secondaryText","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout"],"mappings":"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","file":"static/js/41.ff77d1d7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Checkbox = ({ label, isSelected, onCheckboxChange, value }) => (\r\n  <div className=\"form-check\">\r\n    <label>\r\n      <input\r\n        type=\"checkbox\"\r\n        name={label}\r\n        checked={isSelected}\r\n        onChange={onCheckboxChange}\r\n        value = {value}\r\n        className=\"form-check-input\"\r\n      />\r\n      {label}\r\n    </label>\r\n  </div>\r\n);\r\n\r\nexport default Checkbox;","import React, { Component } from 'react';\nimport {Link} from 'react-router-dom';\nimport { Card, CardBody, CardHeader, Col, Row, Button, Form, Input, FormGroup, Label, /*Alert,*/ Media} from 'reactstrap';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport commonService from '../../../core/services/commonService';\nimport AutoCompletePlaces from '../../../core/google-map/AutoCompletePlaces';\nimport Checkbox from \"../../../core/components/Checkbox\";\nimport Loader from '../../Loader/Loader';\nimport './DoctorsDetails.css';\n\n//var eventData = \"\";\nconst weekArr = [{day: 1, dayName: 'Mon', isSelected: false, timeSlots: [{startTime: \"\", endTime: \"\"}]}, {day: 2, dayName: 'Tue', isSelected: false, timeSlots: [{startTime: \"\", endTime: \"\"}]}, {day: 3, dayName: 'Wed', isSelected: false, timeSlots: [{startTime: \"\", endTime: \"\"}]}, \n{day: 4, dayName: 'Thu', isSelected: false, timeSlots: [{startTime: \"\", endTime: \"\"}]}, {day: 5, dayName: 'Fri', isSelected: false, timeSlots: [{startTime: \"\", endTime: \"\"}]}, {day: 6, dayName: 'Sat', isSelected: false, timeSlots: [{startTime: \"\", endTime: \"\"}]}, {day: 0, dayName: 'Sun', isSelected: false, timeSlots: [{startTime: \"\", endTime: \"\"}]}] ;\nclass DoctorsDetails extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      buttonProcessing: false,\n      loading: true,\n      errors: {},\n      visible: false,\n      profileImage: '',\n      imagePreview: \"\",\n      documentsImages:[],\n      uploadedDocumentsImages: [],\n      formProccessing: false,\n      formField: {},\n      checkboxes: weekArr,\n      dataTableItem: [],\n      categoryList: [],\n      selectedServices: [],\n      superSpecializationList: [],\n      specializationList: [],\n      selectedSpecialization: [],\n      selectedSuperSpecialization: [],\n    };\n    this.getCategoryList = this.getCategoryList.bind(this);\n    this.submitHandler = this.submitHandler.bind(this);\n    \n  }\n  componentDidMount() { \n    const { match: { params } } = this.props;\n    if(params.doctorsId !== undefined && params.doctorsId !==\"\") {\n      this.setState({doctorsId: params.doctorsId});\n      this.getCategoryList();\n      this.getDoctorProfile(params.doctorsId);\n    }\n    else\n      this.props.history.push('/admin/manage-investigator/investigator');\n    this.getSpecialization();\n    this.getSuperSpecialization();\n    \n  }\n\n  getSpecialization() {\n    let filterParmas = '?isSuperSpecialization='+false;\n    commonService.getAPIWithAccessToken('specialization'+filterParmas)\n        .then( res => {\n          \n           \n          if ( undefined === res.data.data || !res.data.status ) {            \n            toast.error(res.data.message);    \n            return;\n          }   \n\n          this.setState({specializationList: res.data.data});     \n         \n        } )\n        .catch( err => {   \n                \n          if(err.response !== undefined && err.response.status === 401) {\n            localStorage.clear();\n            this.props.history.push('/login');\n          }\n          else {\n            \n            toast.error(err.message);    \n          }\n        } )\n  }\n\n  getSuperSpecialization(){\n    let filterParmas = '?isSuperSpecialization='+true;\n    commonService.getAPIWithAccessToken('specialization'+filterParmas)\n        .then( res => {\n          \n           \n          if ( undefined === res.data.data || !res.data.status ) {            \n            toast.error(res.data.message);    \n            return;\n          }   \n\n          this.setState({superSpecializationList: res.data.data});     \n         \n        } )\n        .catch( err => {   \n                \n          if(err.response !== undefined && err.response.status === 401) {\n            localStorage.clear();\n            this.props.history.push('/login');\n          }\n          else {\n            \n            toast.error(err.message);    \n          }\n        } )\n  }\n\n  /* Input Field On changes*/\n  changeHandler = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n    const formField = this.state.formField\n    formField[name] = value;\n    this.setState({ formField: formField });\n  };\n\n  getDoctorProfile(doctorsId){\n    commonService.getAPIWithAccessToken('doctors/profile/'+doctorsId)\n      .then( res => {\n        console.log(res);\n        this.setState({loading: false});   \n        if ( undefined === res.data.data || !res.data.status ) {\n          this.setState( {  loading: false } );\n          toast.error(res.data.message);    \n          return;\n        }   \n        const profileInfo = res.data.data;\n        let formField = this.state.formField;\n        formField.first_name = profileInfo.firstName;\n        formField.last_name = profileInfo.lastName || \"\";\n        formField.phoneNumber = profileInfo.phoneNumber || \"\";\n        formField.address = profileInfo.address || \"\";\n        formField.description = profileInfo.description || \"\";\n        let services = profileInfo.services || [];\n        let selectedServices = services.map(item => item.categoryId);\n        let specialization = profileInfo.specialization || [];\n        let selectedSpecialization = specialization.map(item => item.specializationId);\n        let superSpecialization = profileInfo.superSpecialization || [];\n        let selectedSuperSpecialization = superSpecialization.map(item => item.specializationId);\n        let selectedCheckboxes = profileInfo.availability || [];\n        let weekDataArray = [];\n        let profileImage = profileInfo.profileImage || \"\";\n        let imagePreview = profileInfo.profileImage || \"\";\n        let documentsImages = profileInfo.documentsImages || [];\n        weekArr.forEach((weekInfo, index) => {\n          let dayInfo =selectedCheckboxes.filter(function(item) { return item.day === weekInfo.day;});\n          if(dayInfo.length > 0 ){\n            weekInfo.timeSlots = dayInfo[0].timeSlots.length > 0 ? dayInfo[0].timeSlots :[{startTime: \"\", endTime: \"\"}];\n            weekInfo.isSelected = dayInfo[0].isOpen;\n            weekDataArray.push(weekInfo);\n          }\n          else\n            weekDataArray.push(weekInfo);\n        });\n        this.setState({formField: formField, profileImage: profileImage, uploadedDocumentsImages: documentsImages, selectedServices: selectedServices, selectedSpecialization: selectedSpecialization, selectedSuperSpecialization: selectedSuperSpecialization, checkboxes: weekDataArray });     \n       \n      } )\n      .catch( err => {   \n        this.setState({loading: false});   \n        if(err.response !== undefined && err.response.status === 401) {\n          localStorage.clear();\n          this.props.history.push('/login');\n        }\n        else           \n          toast.error(err.message);    \n        \n      } )\n  }\n  getCategoryList() {\n\n    commonService.getAPIWithAccessToken('category')\n      .then( res => {\n        console.log(res);\n         \n        if ( undefined === res.data.data || !res.data.status ) {\n          this.setState( {  loading: false } );\n          toast.error(res.data.message);    \n          return;\n        }   \n        \n        this.setState({categoryList: res.data.data});     \n       \n      } )\n      .catch( err => {   \n              \n        if(err.response !== undefined && err.response.status === 401) {\n          localStorage.clear();\n          this.props.history.push('/login');\n        }\n        else           \n          toast.error(err.message);    \n        \n      } )\n  }\n\n\n  submitHandler (event) {\n    event.preventDefault();\n    event.target.className += \" was-validated\";\n    if(this.validateForm()){\n      return false;\n    }\n    this.setState( { formProccessing: true}, () => {\n      const formInputField = this.state.formField;\n      const formData = new FormData();\n      formData.append('organizationId', this.state.doctorsId);\n      formData.append('firstName', formInputField.first_name);\n      formData.append('lastName', formInputField.last_name);\n      formData.append('phoneNumber', formInputField.phoneNumber);\n      formData.append('description', formInputField.description);\n      formData.append('address', formInputField.address || \"\");\n      formData.append('latitude', formInputField.latitude || \"\");\n      formData.append('longitude', formInputField.longitude || \"\");\n\n      if(this.state.profileImage !== \"\")\n        formData.append('profileImage', this.state.profileImage);\n      \n      for(let i =0; i < this.state.documentsImages.length; i++){\n        formData.append('documentsImages', this.state.documentsImages[i]);\n      }\n      \n      for(let i =0; i < this.state.checkboxes.length; i++){\n        if(this.state.checkboxes[i].isSelected)\n          formData.append('availability', JSON.stringify({day: this.state.checkboxes[i].day, dayName: this.state.checkboxes[i].dayName, isOpen: true, timeSlots: this.state.checkboxes[i].timeSlots}));\n        else\n          formData.append('availability', JSON.stringify({day: this.state.checkboxes[i].day, dayName: this.state.checkboxes[i].dayName, isOpen: false, timeSlots: []}));\n      }\n      \n      for(let i =0; i < this.state.selectedServices.length; i++){\n        \n          formData.append('services['+i+']', this.state.selectedServices[i]);\n      }\n\n      for(let i =0; i < this.state.selectedSpecialization.length; i++){\n        \n          formData.append('specialization['+i+']', this.state.selectedSpecialization[i]);\n      }\n\n      for(let i =0; i < this.state.selectedSuperSpecialization.length; i++){\n        \n          formData.append('superSpecialization['+i+']', this.state.selectedSuperSpecialization[i]);\n      }\n      \n      commonService.putAPIWithAccessToken('doctors/info', formData)\n      .then( res => {\n        \n        if ( undefined === res.data.data || !res.data.status ) { \n          this.setState( { formProccessing: false} );\n          toast.error(res.data.message);\n          return;\n        } \n        this.props.history.push('/admin/manage-investigator/investigator');\n        toast.success(res.data.message);\n      } )\n      .catch( err => { \n        \n        if(err.response !== undefined && err.response.status === 401) {\n          localStorage.clear();\n          this.props.history.push('/login');\n        }else\n          this.setState( { formProccessing: false } );\n          toast.error(err.message);\n      } )\n      \n    } );\n    \n  };\n\n\n  /* Validate Form */\n  validateForm() {\n    let formValid = false;\n    let formField = this.state.formField; \n    let errors = {};\n    if(formField.first_name === undefined || formField.first_name.trim() === \"\"){\n      formValid = true;\n      errors['firstName'] = \"First name field required!\";\n    }\n    /*if(this.state.selectedServices.length === 0 ){\n      formValid = true;\n      errors['services'] = \"Choose atleast single specialization\";\n    }*/\n    if(this.state.selectedSpecialization.length === 0 ){\n      formValid = true;\n      errors['specialization'] = \"Choose atleast single specialization\";\n    }\n    if(this.state.selectedSuperSpecialization.length === 0 ){\n      formValid = true;\n      errors['superSpecialization'] = \"Choose atleast single super specialization\";\n    }\n    let checkboxes = this.state.checkboxes;\n    let selectedAvailability = checkboxes.filter(function(item) { return item.isSelected;});\n    if(selectedAvailability.length > 0 ){\n      selectedAvailability.forEach((dayInfo, index) => {        \n        const selectedTimeSlots = dayInfo.timeSlots.filter(function(item){ return item.startTime !== \"\" && item.endTime !== \"\";});\n        if(selectedTimeSlots.length === 0){\n          formField = true;\n          errors['availability'] = \"Selected Availability Day should have time slot\";\n        }\n      })\n    }\n\n    this.setState({errors:  errors});\n    return formValid;\n    \n  }\n\n  handleAvlChange = e => {\n    //const name = e.target.name;\n    let checkboxes = this.state.checkboxes;\n    checkboxes[e.target.value].isSelected = e.target.checked;\n    this.setState({checkboxes: checkboxes});\n  };\n\n  handleAvlCatChange = e => {\n    //const name = e.target.name;\n    let selectedServices = this.state.selectedServices;\n    if(e.target.checked) \n      selectedServices.push(e.target.value);\n    else\n      selectedServices.splice(selectedServices.indexOf(e.target.value), 1);\n    \n    this.setState({selectedServices: selectedServices});\n  };\n\n  handleSpecializationChange = e => {\n    //const name = e.target.name;\n    let selectedSpecialization = this.state.selectedSpecialization;\n    if(e.target.checked) \n      selectedSpecialization.push(e.target.value);\n    else\n      selectedSpecialization.splice(selectedSpecialization.indexOf(e.target.value), 1);\n    \n    this.setState({selectedSpecialization: selectedSpecialization});\n  };\n\n  handleSuperSpecializationChange = e => {\n    //const name = e.target.name;\n    let selectedSuperSpecialization = this.state.selectedSuperSpecialization;\n    if(e.target.checked) \n      selectedSuperSpecialization.push(e.target.value);\n    else\n      selectedSuperSpecialization.splice(selectedSuperSpecialization.indexOf(e.target.value), 1);\n    \n    this.setState({selectedSuperSpecialization: selectedSuperSpecialization});\n  };\n\n  changeTimeHandler = event => {\n    const targetName = event.target.name.split('-');\n    if(targetName.length > 1) {\n      let checkboxes = this.state.checkboxes;\n      let timeSlots = checkboxes[targetName[1]].timeSlots;\n      if(targetName[0] === \"openTime\")\n        timeSlots[targetName[2]].startTime = event.target.value;\n      else\n        timeSlots[targetName[2]].endTime = event.target.value;\n      checkboxes[targetName[1]].timeSlots = timeSlots;\n      this.setState({checkboxes: checkboxes});\n    }\n    \n  }\n    \n  addMoreTimeSlots = (day) => {\n    let checkboxes = this.state.checkboxes;\n    checkboxes[day].timeSlots.push({startTime: \"\", endTime: \"\"});\n    this.setState({checkboxes: checkboxes});\n  } \n\n  removeTimeSlots = (day, timeSlotIndex) => {\n    let checkboxes = this.state.checkboxes;\n    let timeSlots = checkboxes[day].timeSlots;\n    timeSlots.splice(timeSlotIndex, 1)\n    checkboxes[day].timeSlots = timeSlots;\n    this.setState({checkboxes: checkboxes});\n    \n  }\n\n  handleImageChange = (e) => {\n    const targetFile = e.target.files[0];\n    var reader = new FileReader();\n    let currentObj = this;\n    reader.onload = function(e) {\n        currentObj.setState({imagePreview: e.target.result});\n      }\n      reader.readAsDataURL(targetFile);\n    this.setState({\n      profileImage: targetFile\n    })\n  };\n \n  onDocumentsImageChange = event => {   \n    this.setState({\n      documentsImages: event.target.files,\n    });\n  };\n\n  render() {\n    \n    const { loading, errors, formProccessing, profileImage, imagePreview, uploadedDocumentsImages } = this.state;\n    let loaderElement = '';    \n    let changeStatusBtn = \"\";\n    \n    if(loading)        \n      loaderElement = <Loader />\n    \n    return (\n      <div className=\"animated fadeIn\">\n        \n        {loaderElement}\n        <Card>\n          <CardHeader>\n            <Row>\n            <Col md=\"3\" className=\"mainHeading\">\n              <strong className=\"mr-5\">Investigator Info</strong>\n            </Col>\n            </Row>\n          </CardHeader>\n          <CardBody>\n            \n            <Form onSubmit={this.submitHandler} noValidate className=\"oep-form\">\n            \n              <Row>\n              \n                <Col md={\"6\"}>  \n                  <FormGroup> \n                    <Label htmlFor=\"first_name\">First Name</Label>            \n                    <Input type=\"text\" placeholder=\"First Name *\" invalid={errors['firstName'] !== undefined && errors['firstName'] !== \"\"} id=\"first_name\" name=\"first_name\" value={this.state.formField.first_name} onChange={this.changeHandler} required />\n                    <div className=\"invalid-feedback\">\n                      {errors['firstName']}\n                    </div>\n                  </FormGroup>\n                </Col>\n                <Col md={\"6\"}>  \n                  <FormGroup> \n                    <Label htmlFor=\"last_name\">Last Name</Label>            \n                    <Input type=\"text\" placeholder=\"Last Name\" id=\"last_name\" name=\"last_name\" value={this.state.formField.last_name} onChange={this.changeHandler}  />\n                    <div className=\"invalid-feedback\">\n                      {errors['lastName']}\n                    </div>\n                  </FormGroup>\n                </Col> \n                \n                \n                \n                <Col md={\"6\"}>  \n                  <FormGroup> \n                    <Label htmlFor=\"phoneNumber\">Contact Number</Label>            \n                    <Input type=\"text\" placeholder=\"Contact Number \" id=\"phoneNumber\" name=\"phoneNumber\" value={this.state.formField.phoneNumber} onChange={this.changeHandler}  />\n                  </FormGroup>\n                </Col>\n                <Col md={\"6\"}>  \n                  <FormGroup> \n                    <Label htmlFor=\"address\">Address</Label>            \n                    <Input type=\"text\" placeholder=\"Address\" id=\"address\" name=\"address\" value={this.state.formField.address} onChange={this.changeHandler}  />\n                    \n                  </FormGroup>\n                </Col> \n                <Col md={\"12\"}>\n                  <FormGroup> \n                    <Label htmlFor=\"description\">Description</Label>\n                    <Input type=\"textarea\" placeholder=\"Investigator details\" id=\"description\" name=\"description\" value={this.state.formField.description} onChange={this.changeHandler} />\n                  </FormGroup>\n                </Col>\n                \n                <Col md={\"12\"}>\n                  <FormGroup>\n                    <Label htmlFor=\"avl\">Super Specialization </Label><br/>\n                    <Row>\n                    {this.state.superSpecializationList.map((specializationInfo, index) => \n                      <Col md= {5} > \n                        <FormGroup  check inline  key={index}>\n                          <Label check>\n                          <Checkbox\n                            label={specializationInfo.specializationName}\n                            isSelected={ this.state.selectedSuperSpecialization.indexOf(specializationInfo.specializationId) > -1}\n                            onCheckboxChange={this.handleSuperSpecializationChange}                            \n                            value={ specializationInfo.specializationId}\n                            key={index}\n                          />\n                          </Label>\n                          \n                        </FormGroup>\n                      </Col>\n                      )}\n                      <div className=\"error-feedback\">\n                        {errors['superSpecialization']}\n                      </div>\n                    </Row>\n                  </FormGroup>  \n                </Col>\n                <Col md={\"12\"}>\n                  <FormGroup>\n                    <Label htmlFor=\"avl\">Specialization </Label><br/>\n                    <Row>\n                    {this.state.specializationList.map((specializationInfo, index) => \n                      <Col md= {5} > \n                        <FormGroup  check inline  key={index}>\n                          <Label check>\n                          <Checkbox\n                            label={specializationInfo.specializationName}\n                            isSelected={ this.state.selectedSpecialization.indexOf(specializationInfo.specializationId) > -1}\n                            onCheckboxChange={this.handleSpecializationChange}                            \n                            value={ specializationInfo.specializationId}\n                            key={index}\n                          />\n                          </Label>\n                          \n                        </FormGroup>\n                      </Col>\n                      )}\n                      <div className=\"error-feedback\">\n                        {errors['specialization']}\n                      </div>\n                    </Row>\n                  </FormGroup>  \n                </Col>\n                <Col md={\"12\"}>\n                  <FormGroup>\n                    <Label htmlFor=\"avl\">Availability </Label><br/>\n                    <div className=\"error-feedback\">\n                      {errors['availability']}\n                    </div>\n                    <Row>\n                    {weekArr.map((week, index) => \n                      <Col md= {5} > \n                        <FormGroup  check  key={index}>\n                          <Label check>\n                          <Checkbox\n                            label={this.state.checkboxes[index].dayName}\n                            isSelected={ this.state.checkboxes[index].isSelected}\n                            onCheckboxChange={this.handleAvlChange}                            \n                            value={ index}\n                            key={this.state.checkboxes[index].day}\n                          />\n                          </Label>\n                          { this.state.checkboxes[index].isSelected ? \n                            this.state.checkboxes[index].timeSlots.length > 0 ? \n                              <FormGroup className=\"opening-hours\"> \n                                  <Label htmlFor=\"openTime\">Opening Hours</Label><br/>\n                                {\n                                this.state.checkboxes[index].timeSlots.map((slotsInfo, slotIndex) =>                                \n                                  <Row className=\"mb-1\">\n                                    <Col md={\"5\"}>\n                                    <input type=\"time\" id=\"openTime\" className=\"form-control input-hour\" name={`openTime-${index}-${slotIndex}`} value={slotsInfo.startTime} onChange={this.changeTimeHandler} />\n                                    </Col>\n                                    <Col md={\"5\"}>\n                                    <input type=\"time\" id=\"closeTime\" className=\"form-control input-hour\" name={`closeTime-${index}-${slotIndex}`} value={slotsInfo.endTime} onChange={this.changeTimeHandler} />\n                                    </Col>\n                                    <Col md={\"1\"} className=\"add-btn\">\n                                    {this.state.checkboxes[index].timeSlots.length -1 === slotIndex ? <span className=\"add-more-slots\" title=\"Add more time slots\" onClick = {this.addMoreTimeSlots.bind(this, index)}><i className=\"fa fa-plus\"></i></span> :\n                                    <span className=\"remove-more-slots\" title=\"Remove time slots\" onClick = {this.removeTimeSlots.bind(this, index, slotIndex)}><i className=\"fa fa-minus\"></i></span>\n                                    }\n                                    </Col>\n                                  </Row>\n                                \n                                )} \n                              </FormGroup>\n                              :\n                              <></>\n                            \n\n                            : <></>\n                          }\n                        </FormGroup>\n                      </Col>\n                      )}\n                    </Row>\n                  </FormGroup>  \n                </Col>\n                <Col md={\"6\"}>\n                  <FormGroup> \n                    <Label htmlFor=\"defaultImage\">Profile Image</Label>            \n                    <Input type=\"file\" id=\"defaultImage\" name=\"defaultImage\" className=\"form-control\"  onChange={this.handleImageChange} />\n                    <small>Image will be shown as a Investigator profile image.</small>\n                  </FormGroup>              \n                </Col>\n                <Col md={\"6\"}>{imagePreview && <div className=\"previewDefaultImage\"><img alt=\"default\" width=\"100\" className=\"img-fluid img-thumbnail\" src={imagePreview} /></div>}</Col>\n                \n                <Col md={\"6\"}>\n                  <FormGroup> \n                    <Label htmlFor=\"documents\">Documents</Label>            \n                    <Input type=\"file\" id=\"documents\" name=\"documents\" className=\"form-control\" multiple onChange={this.onDocumentsImageChange} />\n                  </FormGroup> \n                </Col>\n                <Col md={\"6\"}>\n                  <div className=\"previewdocumentsImageArea row\">\n                      {uploadedDocumentsImages.map((imagesInfo, index) =>\n                        <Media className=\"previewdocumentsImage col-md-2\" key={index}>\n                          <a href ={imagesInfo}>Preview</a> <i className=\"fa fa-times text-danger\" onClick={() => {if(window.confirm('Are you sure, you want to delete this image?')){ this.deleteTruckImage(index,'documents') };}}></i>\n                        </Media>\n                      )}\n                  </div>             \n                </Col>\n                \n              </Row>\n\n              <Button color=\"primary\" disabled={formProccessing} type=\"submit\">{formProccessing ? 'Processing...' : 'Update Details' }</Button>\n              &nbsp; \n              {changeStatusBtn}\n              &nbsp;\n              <Link className=\"btn btn-secondary\" to='/admin/manage-investigator/investigator'>Cancel</Link>\n              \n            </Form> \n          </CardBody>\n        </Card>\n      </div>\n\n    )\n  }\n}\n\nexport default DoctorsDetails;\n\n","import React from 'react';\nimport \"./Loader.css\"\nconst Loader = () => {\n    return (\n        <div className=\"loaderSection\">\n             <div className=\"spinner-border text-primary\" role=\"status\">\n                  <span className=\"sr-only\">Loading...</span>\n              </div>\n        </div>\n    );\n}\n\nexport default Loader;","import React from 'react';\n\nclass GeoLocationData extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { address: '', scriptLoading: false };\n  }\n\n  render() {\n    this.props.updateAddress(this.props.cords);\n    return (<></>);\n  }\n}\nexport default GeoLocationData;","import React from 'react';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\nimport { toast } from 'react-toastify';\nimport { geolocated } from \"react-geolocated\";\nimport GeoLocationData from './GeoLocationData';\nimport './AutoCompletePlaces.css';\nimport commonService from '../services/commonService';\n\n\nclass AutoCompletePlaces extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { address: '', latitude:'', longitude:'', scriptLoading: false, \n    currentAddress: {country: \"\",\n              state: \"\",\n              city: \"\",\n              postal_code: \"\",\n              formatted_address: \"\", latitude: \"\", longitude: \"\"},\n      locationEnabled: false,\n   };\n    this.updateGeoLocationAddress = this.updateGeoLocationAddress.bind(this);\n  }\n  \n  componentDidMount() { \n      if(typeof google === \"undefined\") {\n        var s = document.createElement('script');\n        s.type = 'text/javascript';\n        s.src = `https://maps.google.com/maps/api/js?key=AIzaSyBmyGVmnHPHZp2eC1XNMx-GaBRC20g9Tck&libraries=places`;\n        var x = document.getElementsByTagName('script')[0];\n        x.parentNode.insertBefore(s, x);\n        s.addEventListener('load', e => {\n            this.setState({scriptLoading: true});\n        })\n      }\n      else\n        this.setState({scriptLoading: true});\n    //this.setState({ address:this.props.setAddress });\n\n  }\n\n  updateGeoLocationAddress(coords) {\n    \n    if(coords.latitude && coords.longitude){\n      \n      this.setState({latitude: coords.latitude, longitude: coords.longitude, locationEnabled: true}, () => {\n          commonService.getExternalAPI(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\"+coords.latitude+\",\"+coords.longitude+\"&key=\"+commonService.getGoogleAPIKey())\n            .then( res => {  \n           \n            const googleMapData = res.data.results ? res.data.results[0] : [];\n           \n            if(googleMapData.address_components !== undefined && googleMapData.address_components.length > 0 ) {\n              const getCountry = googleMapData.address_components.filter(function(item) { return item.types.indexOf('country') > -1;});\n              const getState = googleMapData.address_components.filter(function(item) { return item.types.indexOf('administrative_area_level_1') > -1;});\n              const getCity = googleMapData.address_components.filter(function(item) { return item.types.indexOf('administrative_area_level_2') > -1;});\n              const getPostalCode = googleMapData.address_components.filter(function(item) { return item.types.indexOf('postal_code') > -1;})\n              const formatted_address = googleMapData.formatted_address || \"\";\n             // const getLocality = googleMapData.address_components.filter(function(item){ return item.types.indexOf('locality')> -1 ;})\n              const addressInfo = {country: getCountry.length > 0 ? getCountry[0].long_name : \"\",\n              state: getState.length > 0 ? getState[0].long_name : \"\",\n              city: getCity.length > 0 ? getCity[0].long_name : \"\",\n              postal_code: getPostalCode.length > 0 ? getPostalCode[0].long_name : \"\",\n              formatted_address: formatted_address, latitude: coords.latitude, longitude: coords.longitude}; \n              this.setState({currentAddress: addressInfo});\n            }\n          } )\n          .catch( err => {         \n            \n          } )\n      });\n    }\n  }\n\n  useCurrentLocation = event => {\n    if(!this.state.locationEnabled){\n      toast.error(\"Please allow to access your location\");\n      return;\n    }\n    else {\n      this.props.setLatitudeLongitude(this.state.currentAddress.formatted_address,{latitude: this.state.currentAddress.latitude, longitude:this.state.currentAddress.longitude}, this.state.currentAddress.city, \n        this.state.currentAddress.state, this.state.currentAddress.country, this.state.currentAddress.postal_code) \n     \n    }\n  }\n\n  handleChange = address => {\n    this.setState({ address });\n    if(address === \"\")\n      this.props.setLatitudeLongitude(address,{lat:\"\", lng:\"\"});\n  };\n \n  handleSelect = address => {\n    this.setState({ address });\n    console.log(address);\n    var city = '';\n    var state = '';\n    var country = '';\n    var postal_code = '';\n    geocodeByAddress(address)\n      .then(results => {\n        \n        var place = results[0];\n        var componentForm = {\n          premise: 'short_name',\n          street_number: 'short_name',\n          route: 'long_name',\n          locality: 'long_name',\n          administrative_area_level_1: 'long_name',\n          country: 'long_name',\n          postal_code: 'long_name'\n        };\n        for (var i = 0; i < place.address_components.length; i++) {\n          var addressType = place.address_components[i].types[0];\n          if (componentForm[addressType]) {\n            if(addressType === 'locality')              \n              city = place.address_components[i][componentForm[addressType]];            \n            else if(addressType === 'country')\n             country = place.address_components[i][componentForm[addressType]];\n            else if(addressType === 'administrative_area_level_1')\n             state = place.address_components[i][componentForm[addressType]];\n            else if(addressType === 'postal_code')\n              postal_code =  place.address_components[i][componentForm[addressType]];\n            \n          }\n        }\n        getLatLng(results[0])\n      })\n      //.then(latLng => console.log('Success', latLng))\n      .then( \n        latLng => this.props.setLatitudeLongitude(address,latLng, city, state, country, postal_code) \n      )\n      /*.then(({ lat, lng }) =>\n        this.setState({ latitude:lat, longitude:lng })\n        \n        //this.props.setLatitudeLongitude(latLng)\n      )*/\n      .catch(error => console.error('Error', error));\n  };\n \n  render() {\n    let address = ( (this.state.address==='' && this.props.address) ? this.props.address : this.state.address );\n    \n    /*let geoLocationTags = '';\n    if(this.props.isGeolocationAvailable) {\n      if(this.props.isGeolocationEnabled) {\n        if(this.props.coords != null && !this.state.locationEnabled)\n            geoLocationTags = <GeoLocationData cords = {this.props.coords} updateAddress = {this.updateGeoLocationAddress} />\n      }\n    }*/\n    if(!this.state.scriptLoading)\n      return (<></>);\n    \n    return (\n      <>\n      {(this.props.isGeolocationAvailable) ?\n      (this.props.isGeolocationEnabled) ?\n        (this.props.coords != null && !this.state.locationEnabled) ? \n          <GeoLocationData cords = {this.props.coords} updateAddress = {this.updateGeoLocationAddress} /> : <></>\n      : <></> : <></>\n    }\n      \n      <span className=\"use-current-location pull-right\" onClick={this.useCurrentLocation}><span className=\"location-icon\"><img src=\"https://retailoep.com/current_location.png\" alt=\" Current Location\" className=\"current-location-icon\" /></span>Use current location</span>\n      <PlacesAutocomplete\n        value={address}\n        onChange={this.handleChange}\n        onSelect={this.handleSelect}\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n          <div>\n            <input\n              {...getInputProps({\n                name: 'address',\n                placeholder: 'Search Location ...',\n                className: 'form-control location-search-input',\n              })}\n            />\n            <div className=\"autocomplete-dropdown-container\">\n              {loading && <div>Loading...</div>}\n              {suggestions.map(suggestion => {\n                const className = suggestion.active\n                  ? 'suggestion-item--active'\n                  : 'suggestion-item';\n                // inline style for demonstration purpose\n                const style = suggestion.active\n                  ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                  : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                return (\n                  <div\n                    {...getSuggestionItemProps(suggestion, {\n                      className,\n                      style,\n                    })}\n                  >\n                    <strong>\n                      {suggestion.formattedSuggestion.mainText}\n                    </strong>{' '}\n                    <small>\n                      {suggestion.formattedSuggestion.secondaryText}\n                    </small>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </PlacesAutocomplete>\n      </>\n    );\n    \n  }\n}\n//export default AutoCompletePlaces;\nexport default geolocated({\n    positionOptions: {\n        enableHighAccuracy: false,\n    },\n    userDecisionTimeout: 5000,\n})(AutoCompletePlaces);"],"sourceRoot":""}
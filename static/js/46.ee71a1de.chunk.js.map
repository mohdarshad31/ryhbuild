{"version":3,"sources":["views/AdminDashboard/ClinicalTrial/ClinicalTrial.js","views/Loader/Loader.js"],"names":["popupImgUrl","process","localizer","momentLocalizer","moment","myEventsList","start","add","toDate","end","title","ClinicalTrial","props","scrollToTop","window","scrollTo","toggle","tab","state","activeTab","setState","toggle2","activeTab2","addDoctorToList","event","preventDefault","doctorList","selectedDoctor","value","doctorSelectIndex","doctorInfo","role","selectedRole","filter","item","authId","length","push","addPatientToList","patientList","userList","selectedPatient","patientSelectIndex","patientInfo","removeSelectedDoctor","index","splice","removeSelectedPatient","selectStageData","target","stagesData","remainingStages","i","startDate","endDate","removeStageForm","assignPatient","doctorId","assignPatientInfo","assignPatientToDoctor","assignPatientInfoWithDoctor","undefined","removeAssignedPatient","patientIndex","getTemplateWithDoctor","doctorTemplateInfo","categoryId","stagesWithPatientAppointment","patientInfoData","getTemplateList","assignTemplateToDoctor","templateList","selectedTemplate","removeDoctorAssignedTemplate","doctorTemplateWithStage","name","stageIndex","patientId","assignSTageRowToDoctor","assignSTageInfoToDoctor","stage","form","schedule_date","stageInfo","removeDoctorAssignedTemplateStage","getTemplateWithPatient","patientTemplateInfo","assignTemplateToPatient","removePatientAssignedTemplate","patientTemplateWithStage","assignSTageInfoToPatient","removePatientAssignedTemplateStage","setStepComleted","validateStep1","validateStep2","toast","error","toggleModal","modal","finishAddClinicalTrial","validateStep3","selectedDoctorInfo","Object","keys","forEach","key","val","doctorValue","doctorInfoData","p","v","clinicalTrialDetail","doctorTemplateId","templateId","doctorTemplateCategoryId","doctorRole","parseInt","scheduleDate","doctorDescription","description","patientTemplateId","patientform","patientTemplateCategoryId","patientDescription","clinicalTrialInfo","clinicalTrial","clinical_trial","clinicalTrialSchedular","trialCategoryId","subCategoryId","trialSubCategoryId","selectedDoctorRole","map","loading","commonService","postAPIWithAccessToken","then","res","data","status","message","clinicalTrialId","catch","err","response","localStorage","clear","history","changeTrialHandler","subPracticeCategoryList","practiceCategory","disabledScheduleTime","exculdesTimes","rowIndex","formProccessing","formField","doctor_id","patient_id","doctor_categoryId","doctor_templateId","phoneNumber","address","city","country","errors","selectDoctor","selectPatient","formValid","filterItem","filter_doctor_id","custom_search","doctorTemplateList","categoryList","assignmentList","selectedDoctorCalendarIndex","errorStep1","practiceCategoryList","searchDoctor","specializationList","selectedSpecialization","bind","this","doctorQuery","getAPIWithAccessToken","patientQuery","practiceSubCategory","console","log","profileList","parentId","setTemplateList","templateInfo","stagesInfo","Array","isArray","assignDoctorToPatientData","loaderElement","className","activeStep","connectorStyleConfig","disabledColor","activeColor","completedColor","style","connectorStateColors","label","children","StepsIcon","iconName","completed","active","md","htmlFor","placeholder","invalid","onChange","required","lg","type","id","categoryItem","SetCategoryDropDownItem","categoryName","subCategoryName","check","inline","checked","userInfo","specializationId","specializationName","firstName","lastName","disabled","onClick","selectDoctorInfo","doctorIndex","dateFormat","placeholderText","minDate","Date","maxDate","selected","date","assignPatientData","assignPatientIndex","categoryInfo","temaplateIndex","templateName","selectedTemplateInfo","selectedTemplateIndex","stagesWithPatientAppointmentInfo","stagesWithPatientAppointmentIndex","assignedPatient","assignedPatientIndex","readOnly","showTimeSelect","excludeTimes","onFocus","e","stageDetails","rows","events","startAccessor","views","endAccessor","popup","class","isOpen","src","alt","width","height","to","Component","Loader"],"mappings":"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","file":"static/js/46.ee71a1de.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Col, Row, Input, FormGroup, Label, Modal, ModalBody} from 'reactstrap';\r\nimport  { Link } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport commonService from '../../../core/services/commonService';\r\nimport Loader from '../../Loader/Loader';\r\nimport { Calendar, momentLocalizer } from 'react-big-calendar'\r\nimport moment from 'moment';\r\nimport { Stepper, Step } from 'react-form-stepper';\r\nimport '../../../assets/css/Glyphter.css';\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport './ClinicalTrial.css';\r\n\r\nconst popupImgUrl = `${process.env.PUBLIC_URL}/images/popup-img.png`;\r\nconst localizer = momentLocalizer(moment);\r\nconst myEventsList = [\r\n{\r\nstart: moment().add(2, \"days\").toDate(),\r\nend: moment()\r\n.add(2, \"days\")\r\n.toDate(),\r\ntitle: \"\"\r\n}\r\n];\r\nclass ClinicalTrial extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      modal: false,      \r\n      doctorList: [],\r\n      loading: true,\r\n      rowIndex: -1,\r\n      formProccessing: false,\r\n      userList: [],\r\n      formField: {doctor_id: '', patient_id: '', categoryId: '', templateId: '', doctor_categoryId: '', doctor_templateId: '', schedule_date: '',  phoneNumber: '', address: '', city: '', state: '', country: '', description: '', role: '', status: '' },\r\n      errors: {selectDoctor: '', selectPatient: '', categoryId: '', templateId: '', doctor_categoryId: '', doctor_templateId: '', schedule_date: ''},\r\n      formValid: true,\r\n      filterItem: { filter_doctor_id: '', country: '', state: '', custom_search: ''},\r\n      templateList: [],\r\n      doctorTemplateList:[],\r\n      categoryList: [],\r\n      assignmentList: [],\r\n      activeTab: 0,\r\n      activeTab2: '1',\r\n      doctorSelectIndex: \"\",\r\n      selectedDoctor: [],\r\n      patientSelectIndex: \"\",\r\n      selectedPatient: [],\r\n      stagesData: [],\r\n      assignPatientInfo: {},\r\n      assignPatientInfoWithDoctor: {},\r\n      doctorTemplateInfo: {},\r\n      patientTemplateInfo: {},\r\n      selectedDoctorCalendarIndex: \"\",\r\n      errorStep1: {},\r\n      startDate:\"\",\r\n      endDate:\"\",\r\n      clinical_trial: \"\",\r\n      practiceCategoryList: [],\r\n      trialCategoryId: \"\",\r\n      trialSubCategoryId: \"\",\r\n      subPracticeCategoryList: [],\r\n      searchDoctor: \"name\",\r\n      specializationList: [],\r\n      selectedSpecialization: \"\",\r\n      selectedRole: \"\"\r\n\r\n    } \r\n    this.subPracticeCategoryList = this.subPracticeCategoryList.bind(this);\r\n    \r\n    \r\n    \r\n  }\r\n  // Fetch the doctor List\r\n  componentDidMount() { \r\n    this.doctorList();\r\n    this.patientList();\r\n    this.categoryList();\r\n    this.specializationList();\r\n    this.practiceCategoryList();\r\n  }\r\n\r\n  scrollToTop = () => window.scrollTo(0, 0);\r\n\r\n  doctorList(filterItem = {}) {\r\n    let doctorQuery = \"\";\r\n    \r\n    if(filterItem.country !== undefined && filterItem.country !== \"\" ) \r\n      doctorQuery += (doctorQuery !==\"\" ) ? \"&country=\"+filterItem.country: \"?country=\"+filterItem.country;\r\n    if(filterItem.state !== undefined && filterItem.state !== \"\" ) \r\n      doctorQuery += (doctorQuery !==\"\" ) ? \"&state=\"+filterItem.state: \"?state=\"+filterItem.state;\r\n    if(filterItem.custom_search !== undefined && filterItem.custom_search !== \"\" ) \r\n      doctorQuery += (doctorQuery !==\"\" ) ? \"&keyword=\"+filterItem.custom_search: \"?keyword=\"+filterItem.custom_search;\r\n    if(filterItem.selectedSpecialization !== undefined && filterItem.selectedSpecialization !== \"\" ) \r\n      doctorQuery += (doctorQuery !==\"\" ) ? \"&specializationId=\"+filterItem.selectedSpecialization: \"?specializationId=\"+filterItem.selectedSpecialization;\r\n    this.setState({loading: true}, () => {  \r\n      commonService.getAPIWithAccessToken('doctors'+doctorQuery)\r\n        .then( res => {\r\n          \r\n           \r\n          if ( undefined === res.data.data || !res.data.status ) {\r\n            this.setState( { loading: false } );\r\n            toast.error(res.data.message);\r\n            return;\r\n          }   \r\n\r\n          this.setState({loading:false, doctorList: res.data.data});     \r\n         \r\n        } )\r\n        .catch( err => {         \r\n          if(err.response !== undefined && err.response.status === 401) {\r\n            localStorage.clear();\r\n            this.props.history.push('/login');\r\n          }\r\n          else {\r\n            this.setState( { loading: false } );\r\n            toast.error(err.message);\r\n          }\r\n        } )\r\n    });  \r\n  }\r\n\r\n  patientList(filterItem = {}) {\r\n\r\n    let patientQuery = \"\";\r\n    if(filterItem.practiceCategory !== undefined && filterItem.practiceCategory !== \"\" ) \r\n      patientQuery += (patientQuery !==\"\" ) ? \"&practiceCategory=\"+filterItem.practiceCategory: \"?practiceCategory=\"+filterItem.practiceCategory;\r\n    if(filterItem.practiceSubCategory !== undefined && filterItem.practiceSubCategory !== \"\" ) \r\n      patientQuery += (patientQuery !==\"\" ) ? \"&practiceSubCategory=\"+filterItem.practiceSubCategory: \"?practiceSubCategory=\"+filterItem.practiceSubCategory;\r\n   commonService.getAPIWithAccessToken(`profile/list`+patientQuery)\r\n      .then( res => {\r\n        console.log(res);\r\n         \r\n        if ( undefined === res.data.data || !res.data.status ) {\r\n          this.setState( {  loading: false } );\r\n          toast.error(res.data.message);    \r\n          return;\r\n        }   \r\n        \r\n        this.setState({loading:false, userList: res.data.data.profileList});     \r\n       \r\n      } )\r\n      .catch( err => {   \r\n             \r\n        if(err.response !== undefined && err.response.status === 401) {\r\n          localStorage.clear();\r\n          this.props.history.push('/login');\r\n        }\r\n        else {\r\n          this.setState( { loading: false } );\r\n          toast.error(err.message); \r\n        }  \r\n      } )\r\n  }\r\n\r\n  categoryList() {   \r\n   \r\n    commonService.getAPIWithAccessToken('template/category')\r\n      .then( res => {\r\n        console.log(res);\r\n         \r\n        if ( undefined === res.data.data || !res.data.status ) {\r\n          this.setState( {  loading: false } );\r\n          toast.error(res.data.message);    \r\n          return;\r\n        }   \r\n\r\n        this.setState({categoryList: res.data.data});     \r\n       \r\n      } )\r\n      .catch( err => {         \r\n        if(err.response !== undefined && err.response.status === 401) {\r\n          localStorage.clear();\r\n          this.props.history.push('/login');\r\n        }\r\n        else           \r\n          toast.error(err.message);    \r\n        \r\n      } )\r\n    \r\n  }\r\n\r\n  practiceCategoryList() {   \r\n   \r\n    commonService.getAPIWithAccessToken('category')\r\n      .then( res => {\r\n        console.log(res);\r\n         \r\n        if ( undefined === res.data.data || !res.data.status ) {\r\n          this.setState( {  loading: false } );\r\n          toast.error(res.data.message);    \r\n          return;\r\n        }   \r\n\r\n        this.setState({practiceCategoryList: res.data.data});     \r\n       \r\n      } )\r\n      .catch( err => {         \r\n        if(err.response !== undefined && err.response.status === 401) {\r\n          localStorage.clear();\r\n          this.props.history.push('/login');\r\n        }\r\n        else           \r\n          toast.error(err.message);    \r\n        \r\n      } )\r\n    \r\n  }\r\n\r\n  subPracticeCategoryList(categoryId) {\r\n    if(categoryId === \"\") {\r\n      this.setState({subPracticeCategoryList: [], trialSubCategoryId: \"\"});\r\n      return;\r\n    }\r\n    this.setState({loading: true}, () => {\r\n      commonService.getAPIWithAccessToken('category/'+categoryId)\r\n      .then( res => {\r\n        console.log(res);\r\n         \r\n        if ( undefined === res.data.data || !res.data.status ) {\r\n          this.setState( {  loading: false } );\r\n          toast.error(res.data.message);    \r\n          return;\r\n        }   \r\n\r\n        this.setState({subPracticeCategoryList: res.data.data, trialSubCategoryId: \"\", loading: false});     \r\n       \r\n      } )\r\n      .catch( err => {   \r\n        this.setState({loading: false});      \r\n        if(err.response !== undefined && err.response.status === 401) {\r\n          localStorage.clear();\r\n          this.props.history.push('/login');\r\n        }\r\n        else           \r\n          toast.error(err.message);    \r\n        \r\n      } )\r\n    });\r\n\r\n  }\r\n\r\n  specializationList() {   \r\n   \r\n    commonService.getAPIWithAccessToken('specialization')\r\n      .then( res => {\r\n        console.log(res);\r\n         \r\n        if ( undefined === res.data.data || !res.data.status ) {\r\n          this.setState( {  loading: false } );\r\n          toast.error(res.data.message);    \r\n          return;\r\n        }   \r\n\r\n        this.setState({specializationList: res.data.data});     \r\n       \r\n      } )\r\n      .catch( err => {         \r\n        if(err.response !== undefined && err.response.status === 401) {\r\n          localStorage.clear();\r\n          this.props.history.push('/login');\r\n        }\r\n        else           \r\n          toast.error(err.message);    \r\n        \r\n      } )\r\n    \r\n  }\r\n\r\n  getTemplateList(categoryId, parentId, setTemplateList = \"doctor\", hideSubcat = true){\r\n    \r\n    if(categoryId === \"\") {  \r\n      if(setTemplateList === \"doctor\"){\r\n        let doctorTemplateInfo = this.state.doctorTemplateInfo;\r\n        if(doctorTemplateInfo[parentId] !== undefined)\r\n          doctorTemplateInfo[parentId].templateList = [];\r\n        else\r\n          doctorTemplateInfo[parentId] = {templateInfo: [], stagesWithPatientAppointment: [{patientInfoData: {}}]};\r\n        this.setState({doctorTemplateInfo: doctorTemplateInfo});\r\n      }\r\n      else if(setTemplateList === \"patient\"){\r\n        let patientTemplateInfo = this.state.patientTemplateInfo;\r\n        if(patientTemplateInfo[parentId] !== undefined)\r\n          patientTemplateInfo[parentId].templateList = [];\r\n        else\r\n          patientTemplateInfo[parentId] = {templateInfo: []};\r\n        this.setState({patientTemplateInfo: patientTemplateInfo});\r\n      }\r\n      return;\r\n    }\r\n    this.setState( { loading: true}, () => { \r\n      //let organizationIdQuery = \"\";\r\n      commonService.getAPIWithAccessToken(\"template?categoryId=\"+categoryId)\r\n      .then( res => {\r\n        console.log(res);\r\n         \r\n        if ( undefined === res.data.data || !res.data.status ) {\r\n          this.setState( {  loading: false } );\r\n          toast.error(res.data.message);    \r\n          return;\r\n        }   \r\n        /*if(hideSubcat){\r\n          if(setTemplateList === \"templateList\")\r\n            formField.consent_template_id = '';\r\n          else\r\n            formField.deep_profile_template_id = '';\r\n        }*/\r\n        if(setTemplateList === \"doctor\"){\r\n          let doctorTemplateInfo = this.state.doctorTemplateInfo;\r\n          if(doctorTemplateInfo[parentId] !== undefined)\r\n            doctorTemplateInfo[parentId].templateList = res.data.data;\r\n          else\r\n            doctorTemplateInfo[parentId] = {templateInfo: res.data.data, stagesWithPatientAppointment: [{patientInfoData: {}}]};\r\n          this.setState({doctorTemplateInfo: doctorTemplateInfo});\r\n        }\r\n        else if(setTemplateList === \"patient\"){\r\n          let patientTemplateInfo = this.state.patientTemplateInfo;\r\n          if(patientTemplateInfo[parentId] !== undefined)\r\n            patientTemplateInfo[parentId].templateList = res.data.data;\r\n          else\r\n            patientTemplateInfo[parentId] = {templateInfo: res.data.data};\r\n          this.setState({patientTemplateInfo: patientTemplateInfo});\r\n        }\r\n        this.setState({loading: false});     \r\n        \r\n      } )\r\n      .catch( err => {         \r\n        if(err.response !== undefined && err.response.status === 401) {\r\n          localStorage.clear();\r\n          this.props.history.push('/login');\r\n        }\r\n        else { \r\n          this.setState( {  loading: false } );        \r\n          toast.error(err.message); \r\n\r\n        }\r\n      } )\r\n    })\r\n  }\r\n\r\n  toggle = tab => {\r\n    if(this.state.activeTab !== tab) this.setState({activeTab: tab});\r\n  }\r\n\r\n  toggle2 = tab => {\r\n    if(this.state.activeTab2 !== tab) this.setState({activeTab2: tab});\r\n  }  \r\n\r\n  moveSteps(activeTab){\r\n    this.setState({activeTab: activeTab});\r\n  }\r\n\r\n  addDoctorToList = event => {\r\n    event.preventDefault();\r\n    let doctorList = this.state.doctorList;\r\n    let selectedDoctor = this.state.selectedDoctor;\r\n    let value = this.state.doctorSelectIndex;\r\n\r\n    if(value !== \"\") {\r\n      let doctorInfo = doctorList[value];\r\n      doctorInfo.role = this.state.selectedRole;\r\n      \r\n      let checkDoctorExists = selectedDoctor.filter(function(item) { return item.authId === doctorInfo.authId;});\r\n      \r\n      if(checkDoctorExists.length === 0)\r\n        selectedDoctor.push(doctorInfo);\r\n      this.setState({doctorSelectIndex: \"\", selectedRole: \"\", selectedDoctor: selectedDoctor});\r\n    }\r\n    else\r\n      this.setState({doctorSelectIndex: \"\", selectedRole: \"\"});\r\n  } \r\n\r\n  addPatientToList = event => {\r\n    event.preventDefault();\r\n    let patientList = this.state.userList;\r\n    let selectedPatient = this.state.selectedPatient;\r\n    let value = this.state.patientSelectIndex;\r\n    \r\n    if(value !== \"\") {\r\n      let patientInfo = patientList[value];\r\n      \r\n      let checkPatientExists = selectedPatient.filter(function(item) { return item.authId === patientInfo.authId;});\r\n      if(checkPatientExists.length === 0)\r\n        selectedPatient.push(patientInfo);\r\n      this.setState({patientSelectIndex: \"\", selectedPatient: selectedPatient});\r\n    }\r\n    else\r\n      this.setState({patientSelectIndex: \"\"});\r\n  }\r\n\r\n  removeSelectedDoctor = (index, event) => {\r\n    let selectedDoctor = this.state.selectedDoctor;\r\n    selectedDoctor.splice(index, 1);\r\n    this.setState({selectedDoctor: selectedDoctor});\r\n  } \r\n  removeSelectedPatient = (index, event) => {\r\n    let selectedPatient = this.state.selectedPatient;\r\n    selectedPatient.splice(index, 1);\r\n    this.setState({selectedPatient: selectedPatient});\r\n  } \r\n\r\n  selectStageData = event => {\r\n    const value = event.target.value;\r\n    let stagesData = this.state.stagesData;\r\n    let remainingStages = (stagesData.length === 0) ? value : value - stagesData.length; \r\n    if(remainingStages > 0 ) {\r\n      for(let i = 1; i <= remainingStages; i++){\r\n        stagesData.push({startDate: '', endDate: ''});\r\n      }\r\n    }\r\n    else if(remainingStages < 0)\r\n      stagesData.splice(value - 1, stagesData.length - value);\r\n    this.setState({stagesData: stagesData})\r\n\r\n  }\r\n\r\n  removeStageForm = (index, event) => {\r\n    let stagesData = this.state.stagesData;\r\n    stagesData.splice(index, 1);\r\n    this.setState({stagesData: stagesData});\r\n  }\r\n\r\n  assignPatient = (doctorId, event) => {\r\n    let assignPatientInfo = this.state.assignPatientInfo;\r\n    assignPatientInfo[doctorId] = event.target.value;\r\n    this.setState({assignPatientInfo:assignPatientInfo});\r\n  }\r\n\r\n  assignPatientToDoctor = (doctorId, event) => {\r\n    let assignPatientInfo = this.state.assignPatientInfo;\r\n    let selectedPatient = this.state.selectedPatient;\r\n    let patientInfo = selectedPatient[assignPatientInfo[doctorId]];\r\n    let assignPatientInfoWithDoctor = this.state.assignPatientInfoWithDoctor;\r\n    if(assignPatientInfoWithDoctor[doctorId] !== undefined){\r\n      let checkPatientAlreadyExists = assignPatientInfoWithDoctor[doctorId].filter(function(item){ return item.authId === patientInfo.authId;});\r\n      if(checkPatientAlreadyExists.length === 0)\r\n        assignPatientInfoWithDoctor[doctorId].push(patientInfo);\r\n    }\r\n    else\r\n      assignPatientInfoWithDoctor[doctorId] = [patientInfo];\r\n    assignPatientInfo[doctorId] = \"\";\r\n    this.setState({assignPatientInfo: assignPatientInfo, assignPatientInfoWithDoctor: assignPatientInfoWithDoctor});\r\n  }\r\n\r\n  removeAssignedPatient = (doctorId, patientIndex, event) => {\r\n    let assignPatientInfoWithDoctor = this.state.assignPatientInfoWithDoctor;\r\n    if(assignPatientInfoWithDoctor[doctorId] !== undefined){\r\n      assignPatientInfoWithDoctor[doctorId].splice(patientIndex, 1);\r\n    }\r\n    this.setState({assignPatientInfoWithDoctor: assignPatientInfoWithDoctor})\r\n  }\r\n\r\n  getTemplateWithDoctor = (doctorId, event) => {\r\n    let doctorTemplateInfo = this.state.doctorTemplateInfo;\r\n    if(doctorTemplateInfo[doctorId] !== undefined)\r\n      doctorTemplateInfo[doctorId].categoryId = event.target.value;\r\n    else\r\n      doctorTemplateInfo[doctorId] = {\"categoryId\":event.target.value, stagesWithPatientAppointment: [{patientInfoData: {}}]};\r\n    this.setState({doctorTemplateInfo: doctorTemplateInfo});\r\n    this.getTemplateList(event.target.value, doctorId, \"doctor\");\r\n  }\r\n\r\n  assignTemplateToDoctor = (doctorId, event) => {\r\n    let doctorTemplateInfo = this.state.doctorTemplateInfo;\r\n    if(doctorTemplateInfo[doctorId] !== undefined && event.target.value !== \"\"){   \r\n      if(doctorTemplateInfo[doctorId].templateList !== undefined) {\r\n        if(doctorTemplateInfo[doctorId].selectedTemplate !== undefined)\r\n          doctorTemplateInfo[doctorId].selectedTemplate.push(doctorTemplateInfo[doctorId].templateList[event.target.value]);\r\n        else\r\n          doctorTemplateInfo[doctorId].selectedTemplate = [doctorTemplateInfo[doctorId].templateList[event.target.value]];\r\n      }\r\n      \r\n    }\r\n    \r\n    this.setState({doctorTemplateInfo: doctorTemplateInfo});\r\n  }\r\n\r\n  removeDoctorAssignedTemplate = (doctorId, index, event) => {\r\n    let doctorTemplateInfo = this.state.doctorTemplateInfo;\r\n    if(doctorTemplateInfo[doctorId] !== undefined){   \r\n      if(doctorTemplateInfo[doctorId].selectedTemplate !== undefined)\r\n        doctorTemplateInfo[doctorId].selectedTemplate.splice(index, 1);\r\n          \r\n      \r\n      \r\n    }\r\n    \r\n    this.setState({doctorTemplateInfo: doctorTemplateInfo});\r\n  }\r\n\r\n  doctorTemplateWithStage = (doctorId, name, value, stageIndex = 0, patientId = \"\") => {\r\n    let doctorTemplateInfo = this.state.doctorTemplateInfo;\r\n    if(name === \"description\"){\r\n      if(doctorTemplateInfo[doctorId] !== undefined){\r\n        doctorTemplateInfo[doctorId][name] = value;\r\n      }\r\n      else\r\n        doctorTemplateInfo[doctorId] = {[name]: value, stagesWithPatientAppointment: [{patientInfoData: {}}]};\r\n    }\r\n    else{\r\n      if(doctorTemplateInfo[doctorId] !== undefined){\r\n        if(doctorTemplateInfo[doctorId].stagesWithPatientAppointment !== undefined){\r\n          if(doctorTemplateInfo[doctorId].stagesWithPatientAppointment.length > stageIndex ){\r\n            if(name !== \"stage\" && name !== \"form\"){\r\n              if(doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][stageIndex]['patientInfoData'] !== undefined){\r\n                if(doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][stageIndex]['patientInfoData'][patientId] !== undefined)\r\n                  doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][stageIndex]['patientInfoData'][patientId][name] = value;\r\n                else\r\n                doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][stageIndex]['patientInfoData'][patientId] = {[name]: value};\r\n              }\r\n              else\r\n                doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][stageIndex]['patientInfoData'] = {[patientId]: {[name]: value}};\r\n              /*doctorTemplateInfo[doctorId] = {[name]:value, stagesWithPatientAppointment: [{patientInfoData: {}}]};*/\r\n            }\r\n            else{\r\n              doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][stageIndex][name] = value;\r\n            }\r\n          }\r\n          else{\r\n            if(name !== \"stage\" && name !== \"form\"){\r\n              if(doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0]['patientInfoData'] !== undefined){\r\n                if(doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0]['patientInfoData'][patientId] !== undefined)\r\n                  doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0]['patientInfoData'][patientId][name] = value;\r\n                else\r\n                doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0]['patientInfoData'][patientId] = {[name]: value};\r\n              }\r\n              else\r\n                doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0]['patientInfoData'] = {[patientId]: {[name]: value}};\r\n              /*doctorTemplateInfo[doctorId] = {[name]:value, stagesWithPatientAppointment: [{patientInfoData: {}}]};*/\r\n            }\r\n            else{\r\n              doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0][name] = value;\r\n            }\r\n          }\r\n        }\r\n        else{\r\n          doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'] = [{patientInfoData: {}}];\r\n          if(name !== \"stage\" && name !== \"form\"){\r\n            if(doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0]['patientInfoData'][patientId] !== undefined)\r\n              doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0]['patientInfoData'][patientId][name] = value;\r\n            else\r\n              doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0]['patientInfoData'][patientId] = {[name]: value};\r\n            /*doctorTemplateInfo[doctorId] = {[name]:value, stagesWithPatientAppointment: [{patientInfoData: {}}]};*/\r\n          }\r\n          else{\r\n            doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0][name] = value;\r\n          }\r\n        }\r\n        /*if(name === \"stage\")\r\n          doctorTemplateInfo[doctorId].schedule_date = \"\";\r\n        doctorTemplateInfo[doctorId][name] = value;*/\r\n      }\r\n      else{\r\n        doctorTemplateInfo[doctorId] = {stagesWithPatientAppointment: [{patientInfoData: {}}]}\r\n        if(name !== \"stage\" && name !== \"form\"){\r\n          if(doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0]['patientInfoData'][patientId] !== undefined)\r\n            doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0]['patientInfoData'][patientId][name] = value;\r\n          else\r\n            doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0]['patientInfoData'][patientId] = {[name]: value};\r\n          /*doctorTemplateInfo[doctorId] = {[name]:value, stagesWithPatientAppointment: [{patientInfoData: {}}]};*/\r\n        }\r\n        else{\r\n          doctorTemplateInfo[doctorId]['stagesWithPatientAppointment'][0][name] = value;\r\n        }\r\n      }\r\n    }\r\n    this.setState({doctorTemplateInfo: doctorTemplateInfo});\r\n  }\r\n\r\n  assignSTageRowToDoctor = (doctorId) => {\r\n    let doctorTemplateInfo = this.state.doctorTemplateInfo;\r\n    if(doctorTemplateInfo[doctorId] !== undefined){\r\n      if(doctorTemplateInfo[doctorId].stagesWithPatientAppointment !== undefined){\r\n        doctorTemplateInfo[doctorId].stagesWithPatientAppointment.push({patientInfoData: {}});\r\n      }else{\r\n        doctorTemplateInfo[doctorId] = {stagesWithPatientAppointment: [{patientInfoData: {}}]};\r\n      }\r\n    }\r\n    else{\r\n      doctorTemplateInfo = {[doctorId]: {stagesWithPatientAppointment: [{patientInfoData: {}}]}};\r\n    }\r\n    this.setState({doctorTemplateInfo: doctorTemplateInfo});\r\n  }\r\n\r\n  assignSTageInfoToDoctor = (doctorId) => {\r\n    let doctorTemplateInfo = this.state.doctorTemplateInfo;\r\n    if(doctorTemplateInfo[doctorId] !== undefined){\r\n      if(doctorTemplateInfo[doctorId].stage && doctorTemplateInfo[doctorId].form && doctorTemplateInfo[doctorId].schedule_date) {\r\n        let selectedTemplate = doctorTemplateInfo[doctorId].selectedTemplate;\r\n        \r\n          let stageInfo = {stage: doctorTemplateInfo[doctorId].stage, form: selectedTemplate[doctorTemplateInfo[doctorId].form], schedule_date: doctorTemplateInfo[doctorId].schedule_date};\r\n          if(doctorTemplateInfo[doctorId].stageInfo !== undefined)\r\n            doctorTemplateInfo[doctorId].stageInfo.push(stageInfo);\r\n          else\r\n            doctorTemplateInfo[doctorId].stageInfo = [stageInfo];\r\n        \r\n      }\r\n    }\r\n    \r\n    this.setState({doctorTemplateInfo: doctorTemplateInfo});\r\n  }\r\n  removeDoctorAssignedTemplateStage = (doctorId, index, event) => {\r\n    let doctorTemplateInfo = this.state.doctorTemplateInfo;\r\n    if(doctorTemplateInfo[doctorId] !== undefined){   \r\n      if(doctorTemplateInfo[doctorId].stageInfo !== undefined)\r\n        doctorTemplateInfo[doctorId].stageInfo.splice(index, 1);\r\n          \r\n      \r\n      \r\n    }\r\n    \r\n    this.setState({doctorTemplateInfo: doctorTemplateInfo});\r\n  }\r\n\r\n  getTemplateWithPatient = (patientId, event) => {\r\n    let patientTemplateInfo = this.state.patientTemplateInfo;\r\n    if(patientTemplateInfo[patientId] !== undefined)\r\n      patientTemplateInfo[patientId].categoryId = event.target.value;\r\n    else\r\n      patientTemplateInfo[patientId] = {\"categoryId\":event.target.value};\r\n    this.setState({patientTemplateInfo: patientTemplateInfo});\r\n    this.getTemplateList(event.target.value, patientId, \"patient\");\r\n  }\r\n\r\n  assignTemplateToPatient = (patientId, event) => {\r\n    let patientTemplateInfo = this.state.patientTemplateInfo;\r\n    if(patientTemplateInfo[patientId] !== undefined && event.target.value !== \"\"){   \r\n      if(patientTemplateInfo[patientId].templateList !== undefined) {\r\n        if(patientTemplateInfo[patientId].selectedTemplate !== undefined)\r\n          patientTemplateInfo[patientId].selectedTemplate.push(patientTemplateInfo[patientId].templateList[event.target.value]);\r\n        else\r\n          patientTemplateInfo[patientId].selectedTemplate = [patientTemplateInfo[patientId].templateList[event.target.value]];\r\n      }\r\n      \r\n    }\r\n    \r\n    this.setState({patientTemplateInfo: patientTemplateInfo});\r\n  }\r\n\r\n  removePatientAssignedTemplate = (patientId, index, event) => {\r\n    let patientTemplateInfo = this.state.patientTemplateInfo;\r\n    if(patientTemplateInfo[patientId] !== undefined){   \r\n      if(patientTemplateInfo[patientId].selectedTemplate !== undefined)\r\n        patientTemplateInfo[patientId].selectedTemplate.splice(index, 1);\r\n          \r\n      \r\n      \r\n    }\r\n    \r\n    this.setState({patientTemplateInfo: patientTemplateInfo});\r\n  }\r\n\r\n  patientTemplateWithStage = (patientId, name, value) => {\r\n    let patientTemplateInfo = this.state.patientTemplateInfo;\r\n    if(patientTemplateInfo[patientId] !== undefined)\r\n      patientTemplateInfo[patientId][name] = value;\r\n    else\r\n      patientTemplateInfo[patientId] = {[name]:value};\r\n    this.setState({patientTemplateInfo: patientTemplateInfo});\r\n  }\r\n\r\n  assignSTageInfoToPatient = (patientId) => {\r\n    let patientTemplateInfo = this.state.patientTemplateInfo;\r\n    if(patientTemplateInfo[patientId] !== undefined){\r\n      if(patientTemplateInfo[patientId].stage && patientTemplateInfo[patientId].form ) {\r\n        let selectedTemplate = patientTemplateInfo[patientId].selectedTemplate;\r\n        \r\n          let stageInfo = {stage: patientTemplateInfo[patientId].stage, form: selectedTemplate[patientTemplateInfo[patientId].form]};\r\n          if(patientTemplateInfo[patientId].stageInfo !== undefined)\r\n            patientTemplateInfo[patientId].stageInfo.push(stageInfo);\r\n          else\r\n            patientTemplateInfo[patientId].stageInfo = [stageInfo];\r\n        \r\n      }\r\n    }\r\n    \r\n    this.setState({patientTemplateInfo: patientTemplateInfo});\r\n  }\r\n  removePatientAssignedTemplateStage = (patientId, index, event) => {\r\n    let patientTemplateInfo = this.state.patientTemplateInfo;\r\n    if(patientTemplateInfo[patientId] !== undefined){   \r\n      if(patientTemplateInfo[patientId].stageInfo !== undefined)\r\n        patientTemplateInfo[patientId].stageInfo.splice(index, 1);\r\n          \r\n      \r\n      \r\n    }\r\n    \r\n    this.setState({patientTemplateInfo: patientTemplateInfo});\r\n  }\r\n\r\n  setStepComleted = (activeTab) => {\r\n    if(activeTab === 1){\r\n      if(!this.validateStep1()){\r\n        return false;\r\n      }\r\n      else\r\n        this.setState({activeTab: activeTab});\r\n    }\r\n    else if(activeTab === 2){\r\n      if(!this.validateStep2()){\r\n        toast.error(\"Please assign patient to a doctor\");\r\n        return false;\r\n      }\r\n      else\r\n        this.setState({activeTab: activeTab});\r\n    }\r\n    else\r\n    this.setState({activeTab: activeTab});\r\n   this.scrollToTop();\r\n  }\r\n\r\n  toggleModal = () => {\r\n    this.setState({\r\n      modal: !this.state.modal,      \r\n    });\r\n  }\r\n\r\n  finishAddClinicalTrial = () => {\r\n    if(!this.validateStep3()){\r\n      toast.error(\"Every patient and doctors should assign template \");\r\n      return false;\r\n    }\r\n    else {\r\n      let selectedDoctorInfo = [];\r\n      /*Object.keys(this.state.assignPatientInfoWithDoctor).forEach((key, value) => {\r\n        let assignedPatient = this.state.assignPatientInfoWithDoctor[key];\r\n        let doctorInfoData = this.state.selectedDoctor.filter(function(item){ return item.authId === key;});\r\n        let clinicalTrialDetail = {};\r\n        clinicalTrialDetail.doctorId = key;\r\n        if(doctorInfoData.length > 0 )\r\n          clinicalTrialDetail.doctorRole = doctorInfoData[0].role;\r\n        else\r\n          clinicalTrialDetail.doctorRole = \"\";\r\n        for(let p of assignedPatient){\r\n          clinicalTrialDetail.patientId = p.authId;\r\n          let patientTemplateInfo = this.state.patientTemplateInfo[p.authId] !== undefined ? this.state.patientTemplateInfo[p.authId] : {};\r\n          let doctorTemplateInfo = this.state.doctorTemplateInfo[key] !== undefined ? this.state.doctorTemplateInfo[key] : {};\r\n          \r\n          if(Object.keys(patientTemplateInfo).length > 0 && Object.keys(doctorTemplateInfo).length > 0) {\r\n            if(Array.isArray(patientTemplateInfo.stageInfo) && Array.isArray(doctorTemplateInfo.stageInfo)){\r\n              for(let s of doctorTemplateInfo.stageInfo) {\r\n                clinicalTrialDetail.doctorTemplateId = s.form !== undefined ? s.form.templateId : \"\";\r\n                clinicalTrialDetail.doctorTemplateCategoryId = s.form !== undefined ? s.form.categoryId : \"\";\r\n                clinicalTrialDetail.stage = parseInt(s.stage) + 1;\r\n                clinicalTrialDetail.scheduleDate = s.schedule_date;\r\n                clinicalTrialDetail.doctorDescription = s.description;\r\n                let patientCurrentStageInfo = patientTemplateInfo.stageInfo.filter(function(item){ return item.stage === s.stage;});\r\n                if(patientCurrentStageInfo.length > 0) {\r\n                  clinicalTrialDetail.patientTemplateId = patientCurrentStageInfo[0].form !== undefined ? patientCurrentStageInfo[0].form.templateId : \"\";\r\n                  clinicalTrialDetail.patientTemplateCategoryId = patientCurrentStageInfo[0].form !== undefined ? patientCurrentStageInfo[0].form.categoryId : \"\";\r\n                  clinicalTrialDetail.patientDescription = patientCurrentStageInfo[0].description;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        \r\n        selectedDoctorInfo.push(clinicalTrialDetail);\r\n      });*/\r\n      Object.keys(this.state.doctorTemplateInfo).forEach((key, val) => {\r\n        let doctorValue = this.state.doctorTemplateInfo[key];\r\n        //let assignedPatient = this.state.assignPatientInfoWithDoctor[key];\r\n        let doctorInfoData = this.state.selectedDoctor.filter(function(item){ return item.authId === key;});\r\n        \r\n        if(doctorValue.stagesWithPatientAppointment.length > 0){\r\n          for(let p of doctorValue.stagesWithPatientAppointment){            \r\n            Object.keys(p.patientInfoData).forEach((patientId, v) => {\r\n              let value = p.patientInfoData[patientId];\r\n              let clinicalTrialDetail = {};\r\n              clinicalTrialDetail.doctorId = key;\r\n              clinicalTrialDetail.doctorTemplateId = doctorValue.selectedTemplate[p.form] !== undefined ? doctorValue.selectedTemplate[p.form].templateId : \"\";\r\n              clinicalTrialDetail.doctorTemplateCategoryId = doctorValue.selectedTemplate[p.form] !== undefined ? doctorValue.selectedTemplate[p.form].categoryId : \"\";\r\n              if(doctorInfoData.length > 0 )\r\n                clinicalTrialDetail.doctorRole = doctorInfoData[0].role;\r\n              else\r\n                clinicalTrialDetail.doctorRole = \"\";\r\n              clinicalTrialDetail.patientId = patientId;\r\n              clinicalTrialDetail.stage = parseInt(p.stage) + 1;\r\n              clinicalTrialDetail.scheduleDate = value.schedule_date;\r\n              clinicalTrialDetail.doctorDescription = doctorValue.description || \"\";\r\n              clinicalTrialDetail.patientTemplateId = doctorValue.selectedTemplate[value.patientform] !== undefined ? doctorValue.selectedTemplate[value.patientform].templateId : \"\";\r\n              clinicalTrialDetail.patientTemplateCategoryId = doctorValue.selectedTemplate[value.patientform] !== undefined ? doctorValue.selectedTemplate[value.patientform].categoryId : \"\";\r\n              clinicalTrialDetail.patientDescription = \"\";\r\n              \r\n              selectedDoctorInfo.push(clinicalTrialDetail);\r\n            });\r\n          }\r\n        }\r\n        /*for(let p of assignedPatient){\r\n          clinicalTrialDetail.patientId = p.authId;\r\n          let patientTemplateInfo = this.state.patientTemplateInfo[p.authId] !== undefined ? this.state.patientTemplateInfo[p.authId] : {};\r\n          let doctorTemplateInfo = this.state.doctorTemplateInfo[key] !== undefined ? this.state.doctorTemplateInfo[key] : {};\r\n          \r\n          if(Object.keys(patientTemplateInfo).length > 0 && Object.keys(doctorTemplateInfo).length > 0) {\r\n            if(Array.isArray(patientTemplateInfo.stageInfo) && Array.isArray(doctorTemplateInfo.stageInfo)){\r\n              for(let s of doctorTemplateInfo.stageInfo) {\r\n                clinicalTrialDetail.doctorTemplateId = s.form !== undefined ? s.form.templateId : \"\";\r\n                clinicalTrialDetail.doctorTemplateCategoryId = s.form !== undefined ? s.form.categoryId : \"\";\r\n                clinicalTrialDetail.stage = parseInt(s.stage) + 1;\r\n                clinicalTrialDetail.scheduleDate = s.schedule_date;\r\n                clinicalTrialDetail.doctorDescription = s.description;\r\n                let patientCurrentStageInfo = patientTemplateInfo.stageInfo.filter(function(item){ return item.stage === s.stage;});\r\n                if(patientCurrentStageInfo.length > 0) {\r\n                  clinicalTrialDetail.patientTemplateId = patientCurrentStageInfo[0].form !== undefined ? patientCurrentStageInfo[0].form.templateId : \"\";\r\n                  clinicalTrialDetail.patientTemplateCategoryId = patientCurrentStageInfo[0].form !== undefined ? patientCurrentStageInfo[0].form.categoryId : \"\";\r\n                  clinicalTrialDetail.patientDescription = patientCurrentStageInfo[0].description;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        \r\n        selectedDoctorInfo.push(clinicalTrialDetail);*/\r\n      });\r\n      \r\n      let clinicalTrialInfo = {\r\n        clinicalTrial: this.state.clinical_trial,\r\n        startDate: this.state.startDate,\r\n        endDate: this.state.endDate,\r\n        stagesData: this.state.stagesData,\r\n        clinicalTrialSchedular: selectedDoctorInfo,\r\n        categoryId: this.state.trialCategoryId,\r\n        subCategoryId: this.state.trialSubCategoryId,\r\n        selectedDoctorRole: this.state.selectedDoctor.map(item => { return {doctorId: item.authId, role: item.role};}),\r\n        selectedDoctor: this.state.selectedDoctor.map(item => item.authId),\r\n        selectedPatient: this.state.selectedPatient.map(item => item.authId),\r\n\r\n      }\r\n      this.setState({loading: true}, () => {\r\n        commonService.postAPIWithAccessToken('clinical-trial', clinicalTrialInfo)\r\n          .then( res => {\r\n            \r\n             \r\n            if ( undefined === res.data.data || !res.data.status ) {\r\n              this.setState( { loading: false } );\r\n              toast.error(res.data.message);\r\n              return;\r\n            }   \r\n            \r\n            this.setState({loading:false, clinicalTrialId: res.data.data.clinicalTrialId, modal: true});     \r\n           \r\n          } )\r\n          .catch( err => {         \r\n            if(err.response !== undefined && err.response.status === 401) {\r\n              localStorage.clear();\r\n              this.props.history.push('/login');\r\n            }\r\n            else {\r\n              this.setState( { loading: false } );\r\n              toast.error(err.message);\r\n            }\r\n          } )\r\n        \r\n      });\r\n    }\r\n  }\r\n\r\n  validateStep1(){\r\n    let formValid = true;\r\n    let errorStep1 = {};\r\n    if(this.state.selectedDoctor.length === 0){\r\n      errorStep1.selectedDoctor = 'Please add doctor to clinical trial!';  \r\n      formValid = false;\r\n    }\r\n    if(this.state.selectedPatient.length === 0){\r\n      errorStep1.selectedPatient = 'Please add patient to clinical trial!';  \r\n      formValid = false;\r\n    }\r\n\r\n    if(this.state.clinical_trial === \"\"){\r\n      errorStep1.clinical_trial = 'Clinical trial title required!';  \r\n      formValid = false;\r\n    }\r\n\r\n    if(this.state.trialCategoryId === \"\"){\r\n      errorStep1.trialCategoryId = 'Practice field required!';  \r\n      formValid = false;\r\n    }\r\n\r\n    if(this.state.trialSubCategoryId === \"\"){\r\n      errorStep1.trialSubCategoryId = 'Sub practice field required!';  \r\n      formValid = false;\r\n    }\r\n\r\n    if(this.state.startDate === \"\"){\r\n      errorStep1.startDate = 'Clinical trial start date required!';  \r\n      formValid = false;\r\n    }\r\n\r\n    if(this.state.endDate === \"\"){\r\n      errorStep1.endDate = 'Clinical trial end date required!';  \r\n      formValid = false;\r\n    }\r\n\r\n    if(this.state.stagesData.length === 0){\r\n      errorStep1.stagesData = 'Clinical trial stages required!';  \r\n      formValid = false;\r\n    }\r\n    else{\r\n      for(let i = 0; i < this.state.stagesData.length; i++){\r\n        \r\n        let stagesInfo = this.state.stagesData[i];\r\n\r\n        if(stagesInfo.startDate === \"\" || stagesInfo.endDate === \"\"){\r\n          errorStep1.stagesData = 'Clinical trial all stages start and end date required!';  \r\n          formValid = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState({errorStep1: errorStep1});\r\n    return formValid;\r\n\r\n  }\r\n\r\n  validateStep2(){\r\n    let formValid = true;\r\n    //let errorStep2 = {};\r\n    if(Object.keys(this.state.assignPatientInfoWithDoctor).length === 0)\r\n      formValid = false;\r\n    else {\r\n      Object.keys(this.state.assignPatientInfoWithDoctor).forEach((key, index) => {\r\n        if(!Array.isArray(this.state.assignPatientInfoWithDoctor[key]) || this.state.assignPatientInfoWithDoctor[key].length === 0  )\r\n          formValid = false;\r\n      })\r\n    }\r\n    return formValid;\r\n  }\r\n\r\n  validateStep3() {\r\n    let formValid = true;\r\n    \r\n    //let errorStep3 = {};\r\n    if(Object.keys(this.state.doctorTemplateInfo).length === 0 || Object.keys(this.state.doctorTemplateInfo).length !== this.state.selectedDoctor.length)\r\n      formValid = false;\r\n    else {\r\n      Object.keys(this.state.doctorTemplateInfo).forEach((key, index) => {\r\n        /*if(!Array.isArray(this.state.doctorTemplateInfo[key].stagesWithPatientAppointment) || this.state.doctorTemplateInfo[key].stagesWithPatientAppointment.length === 0  )\r\n          formValid = false;*/\r\n        /*else{\r\n          for(let p of this.state.doctorTemplateInfo[key].stagesWithPatientAppointment){\r\n            if(Object.keys(p.patientInfoData).length === 0 || this.state.assignPatientInfoWithDoctor[key].length !== Object.keys(p.patientInfoData).length)\r\n              formValid = false;\r\n          }\r\n        }*/\r\n        \r\n      })\r\n    }\r\n    /*if(Object.keys(this.state.patientTemplateInfo).length === 0 || Object.keys(this.state.patientTemplateInfo).length !== this.state.selectedPatient.length)\r\n      formValid = false;\r\n    else {\r\n      Object.keys(this.state.patientTemplateInfo).forEach((key, index) => {\r\n        if(!Array.isArray(this.state.patientTemplateInfo[key].stageInfo) || this.state.patientTemplateInfo[key].stageInfo.length === 0  )\r\n          formValid = false;\r\n        \r\n      })\r\n    }*/\r\n    \r\n    return formValid;\r\n  }\r\n\r\n  changeTrialHandler = event => {\r\n    const value = event.target.value;\r\n    this.setState({trialCategoryId: value, patientSelectIndex: \"\"});\r\n    this.subPracticeCategoryList(value);\r\n    this.patientList({practiceCategory: value});\r\n  }\r\n\r\n  disabledScheduleTime = (doctorId, event) => {\r\n    let doctorTemplateInfo = this.state.doctorTemplateInfo;\r\n    \r\n    if(doctorTemplateInfo[doctorId] !== undefined){\r\n      let exculdesTimes = [];\r\n      let patientInfoData = doctorTemplateInfo[doctorId].stagesWithPatientAppointment.map(item => item.patientInfoData);\r\n      for(let p of patientInfoData){\r\n        Object.keys(p).forEach((key, index) => {\r\n          if(p[key].schedule_date !== undefined)\r\n            exculdesTimes.push(p[key].schedule_date);\r\n        })\r\n      }\r\n      doctorTemplateInfo[doctorId]['exculdesTimes'] = exculdesTimes;\r\n      this.setState({doctorTemplateInfo: doctorTemplateInfo});\r\n    }\r\n  }\r\n  \r\n  render() {\r\n\r\n    const { activeTab, doctorList, userList, errorStep1, loading, practiceCategoryList, subPracticeCategoryList, specializationList } = this.state; \r\n    let assignDoctorToPatientData = {};\r\n    for(let p of this.state.selectedPatient){\r\n      Object.keys(this.state.assignPatientInfoWithDoctor).forEach((key, index) => {\r\n        let checkPatientExists = this.state.assignPatientInfoWithDoctor[key].filter(function(item) { return item.authId === p.authId;});\r\n        if(checkPatientExists.length > 0 ){\r\n          let doctorInfo = this.state.selectedDoctor.filter(function(item){ return item.authId === key;});\r\n          if(doctorInfo.length > 0) {\r\n            if(assignDoctorToPatientData[p.authId] !== undefined){\r\n              assignDoctorToPatientData[p.authId].push(doctorInfo[0]);\r\n            }\r\n            else\r\n              assignDoctorToPatientData[p.authId] = [doctorInfo[0]]\r\n          }\r\n        }\r\n      });\r\n    }\r\n    let loaderElement ='';\r\n    \r\n    if(loading)\r\n      loaderElement = <Loader />\r\n\r\nreturn (\r\n<div className=\"clinical-trial-info-card\">\r\n   {loaderElement}\r\n   <div className=\"clinical-trial-info\">\r\n      <div className=\"clinical-trial-tab\">\r\n         <Stepper activeStep={activeTab} className=\"chhhh\" connectorStyleConfig = {{disabledColor: '#bdbdbd', activeColor: '#ed1d24', completedColor: '#a10308', style: 'solid'}} connectorStateColors = {true}>\r\n         <Step label=\"Create Clinical Trial\" className = {activeTab === 0 ? \"active\" : \"\"} children = \r\n         <StepsIcon iconName={\"nav-icon icon-gly-clinical-trial\"} />\r\n         completed = {activeTab > 0 ? true : false} active = {activeTab === 0 ? true : false} /*onClick = {() => this.moveSteps(0)}*/ />\r\n         <Step label=\"Appointment Assignment\" className = {activeTab === 1 ? \"active\" : \"\"} children = \r\n         <StepsIcon iconName={\"nav-icon icon-gly-appointment\"} />\r\n         completed = {activeTab > 1 ? true: false} active = {activeTab === 1 ? true : false} /*onClick = {() => this.moveSteps(1)}*/ />\r\n         <Step label=\"Assign & Review Forms\" className = {activeTab === 2 ? \"active\" : \"\"} children = \r\n         <StepsIcon iconName={\"nav-icon icon-gly-review\"} />\r\n         completed = {activeTab >= 2 ? true : false } active = {activeTab === 2 ? true : false}  /*onClick = {() => this.moveSteps(2)}*/ />\r\n         </Stepper>\r\n         {activeTab === 0 && <div className=\"subtabs-filter\">\r\n                <Row>\r\n                      \r\n                      <Col md={\"6\"}>  \r\n                        <FormGroup> \r\n                          <Label htmlFor=\"Type\">Clinical Trial Title</Label>\r\n                          <Input placeholder=\"Clinical Trial Title\" invalid = {errorStep1.clinical_trial !== undefined && errorStep1.clinical_trial !== \"\" ? true : false} name=\"clinical_trial\" onChange = {(event) =>{ this.setState({clinical_trial: event.target.value})}} required />\r\n                          <div className=\"invalid-feedback\">\r\n                            {errorStep1.clinical_trial}\r\n                          </div>      \r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg={3}>\r\n                        <FormGroup> \r\n                          <Label htmlFor=\"assign_trail_category\">Select Practice <span className=\"mandatory\">*</span></Label>            \r\n                          <Input type=\"select\" placeholder=\"\" id=\"assign_trail_category\" invalid={errorStep1['trialCategoryId'] !== undefined && errorStep1['trialCategoryId'] !== \"\"} name=\"assign_trail_category\" value={this.state.trialCategoryId} onChange={this.changeTrialHandler}  >\r\n                            <option value=\"\">Select</option>\r\n                            {practiceCategoryList.map((categoryItem, index) =>\r\n                              <SetCategoryDropDownItem key={index} categoryItem={categoryItem}  />\r\n                            )}\r\n                          </Input>\r\n                          <div className=\"invalid-feedback\">\r\n                              {errorStep1['trialCategoryId']}\r\n                          </div>\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg={3}>\r\n                        <FormGroup> \r\n                          <Label htmlFor=\"assign_trial_subcategory\">Select Sub Practice<span className=\"mandatory\">*</span></Label>            \r\n                          <Input type=\"select\" placeholder=\"\" id=\"assign_trial_subcategory\" invalid={errorStep1['trialSubCategoryId'] !== undefined && errorStep1['trialSubCategoryId'] !== \"\"} name=\"assign_trial_subcategory\" value={this.state.trialSubCategoryId} onChange={(event) => {this.setState({trialSubCategoryId: event.target.value, patientSelectIndex: \"\"}); this.patientList({practiceCategory: this.state.trialCategoryId, practiceSubCategory: event.target.value});}}  >\r\n                            <option value=\"\">Select</option>\r\n                            {subPracticeCategoryList.map((categoryItem, index) =>\r\n                              <SetCategoryDropDownItem key={index} categoryItem={{categoryId: categoryItem.subCategoryId, categoryName: categoryItem.subCategoryName}}  />\r\n                            )}\r\n                          </Input>\r\n                          <div className=\"invalid-feedback\">\r\n                              {errorStep1['trialSubCategoryId']}\r\n                          </div>\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col md={\"3\"}>  \r\n                        <FormGroup> \r\n                          <Label htmlFor=\"Type\" check>Search Doctor By:</Label>                           \r\n                        </FormGroup>\r\n                        <FormGroup check inline> \r\n                          <Label htmlFor=\"Type\" check><Input type=\"radio\" value = \"name\" checked = { this.state.searchDoctor === \"name\" ? true: false} onChange = {(event) => { this.setState({searchDoctor: \"name\", doctorSelectIndex: \"\"}); this.doctorList();}} />Name</Label>                           \r\n                        </FormGroup>\r\n                        <FormGroup check inline> \r\n                          <Label htmlFor=\"Type\" check><Input type=\"radio\" name=\"specialization\" checked = { this.state.searchDoctor === \"specialization\" ? true: false} onChange = {(event) => { this.setState({searchDoctor: \"specialization\", selectedSpecialization: \"\", doctorSelectIndex: \"\"}); this.doctorList();}} />Specialization</Label>                           \r\n                        </FormGroup>\r\n                        \r\n                      </Col>\r\n                      {\r\n                        this.state.searchDoctor === \"specialization\" && <Col md ={\"2\"}>\r\n                          <FormGroup> \r\n                            <Label htmlFor=\"Type\">Select Specialization</Label>\r\n                            <Input type=\"select\" placeholder=\"select specialization *\" value = {this.state.selectedSpecialization} id=\"selectedSpecialization\" onChange = {(event) => { this.setState({selectedSpecialization: event.target.value, doctorSelectIndex: \"\" }); this.doctorList({selectedSpecialization: event.target.value});}}  name=\"selectedSpecialization\">\r\n                                <option value=\"\">Select</option>\r\n                                {specializationList.map((userInfo, index) =>\r\n                                  <option value = {userInfo.specializationId} key={index}>{userInfo.specializationName}</option>\r\n                                )}\r\n                              </Input>  \r\n                            <div className=\"invalid-feedback\">\r\n                              {errorStep1.selectedDoctor}\r\n                            </div>    \r\n                          </FormGroup>\r\n                        </Col>\r\n                      }\r\n                      <Col md={\"3\"}>  \r\n                        <FormGroup> \r\n                          <Label htmlFor=\"Type\">Select Doctor</Label>\r\n                          <Input type=\"select\" placeholder=\"select doctor *\" invalid = {errorStep1.selectedDoctor !== undefined && errorStep1.selectedDoctor !== \"\" ? true : false} value = {this.state.doctorSelectIndex} id=\"doctor\" onChange = {(event) => { this.setState({doctorSelectIndex: event.target.value })}}  name=\"doctor\">\r\n                              <option value=\"\">Select</option>\r\n                              {doctorList.map((userInfo, index) =>\r\n                                <option value = {index} key={index}>{userInfo.title} {userInfo.firstName} {userInfo.lastName}</option>\r\n                              )}\r\n                            </Input>  \r\n                          <div className=\"invalid-feedback\">\r\n                            {errorStep1.selectedDoctor}\r\n                          </div>    \r\n                        </FormGroup>\r\n                        \r\n                      </Col>\r\n                      <Col md={\"2\"}>  \r\n                        <FormGroup> \r\n                          <Label htmlFor=\"Type\">Select Doctor Role</Label>\r\n                          <Input type=\"select\" placeholder=\"Select Doctor Role *\" value = {this.state.selectedRole} id=\"selectedRole\" onChange = {(event) => { this.setState({selectedRole: event.target.value })}}  name=\"selectedRole\">\r\n                              <option value=\"\">Select</option>\r\n                              <option value=\"Role 1\">Role 1</option>\r\n                              <option value=\"Role 2\">Role 2</option>\r\n                              <option value=\"Role 3\">Role 3</option>\r\n                              <option value=\"Role 4\">Role 4</option>\r\n                            </Input>\r\n                        </FormGroup>\r\n                        \r\n                      </Col>\r\n                      <Col md={\"2\"}>  \r\n                        <div className=\"btn profie-btn addBtn-1\" disabled = {this.state.doctorSelectIndex !== \"\" ? true : false} onClick = {this.addDoctorToList}>Add</div></Col>\r\n                      {\r\n                        this.state.selectedDoctor.length > 0 && <Col md = {\"12\"}>\r\n                        <div className=\"addDrs\">\r\n                          <Row>\r\n                            {this.state.selectedDoctor.map((selectDoctorInfo, doctorIndex) =>\r\n                              <Col md={\"3\"} key = {doctorIndex}>\r\n                                <div className=\"select-user-info\">\r\n                                  {selectDoctorInfo.firstName} {selectDoctorInfo.lastName} {selectDoctorInfo.role !== undefined && selectDoctorInfo.role !== \"\" ? `(${selectDoctorInfo.role})` : \"\"}\r\n                                  <button className=\"remove-selected-user-info\" onClick = {(event) => {this.removeSelectedDoctor(doctorIndex, event)}}><i className=\"fa fa-times\"></i></button>\r\n                                </div>\r\n                              </Col>\r\n                            )}\r\n                                  \r\n                                  \r\n                          </Row>\r\n                        </div>\r\n                        </Col>\r\n                      }\r\n                </Row>\r\n              \r\n\r\n              <Row className=\"mt-4\">\r\n                      <Col md={\"4\"}>  \r\n                        <FormGroup> \r\n                          <Label htmlFor=\"Type\">Select Patient</Label>\r\n                          <Input type=\"select\" placeholder=\"select patient *\" invalid = {errorStep1.selectedPatient !== undefined && errorStep1.selectedPatient !== \"\" ? true : false} value = {this.state.patientSelectIndex} id=\"patient\" onChange = {(event) => { this.setState({patientSelectIndex: event.target.value })}}  name=\"patient\">\r\n                              <option value=\"\">Select</option>\r\n                              {userList.map((userInfo, index) =>\r\n                                <option value = {index} key={index}>{userInfo.firstName} {userInfo.lastName}</option>\r\n                              )}\r\n                            </Input>  \r\n                            <div className=\"invalid-feedback\">\r\n                              {errorStep1.selectedPatient}\r\n                            </div>     \r\n                        </FormGroup>\r\n                        \r\n                      </Col>\r\n                      <Col md={\"2\"}>  \r\n                        <div className=\"btn profie-btn addBtn-1\" disabled = {this.state.patientSelectIndex !== \"\" ? true : false} onClick = {this.addPatientToList}>Add</div></Col>\r\n                      \r\n                {\r\n                  this.state.selectedPatient.length > 0 && <Col md = {\"12\"}>\r\n                    <div className=\"addDrs\">\r\n                    <Row>\r\n                      {this.state.selectedPatient.map((patientInfo, patientIndex) =>\r\n                        <Col md={\"3\"} key = {patientIndex}>\r\n                          <div className=\"select-user-info\">\r\n                            {patientInfo.firstName} {patientInfo.lastName}\r\n                            <button className=\"remove-selected-user-info\" onClick = {(event) => {this.removeSelectedPatient(patientIndex, event)}}><i className=\"fa fa-times\"></i></button>\r\n                          </div>\r\n                        </Col>\r\n                      )}                          \r\n                            \r\n                    </Row>\r\n                    </div>\r\n                  </Col>\r\n                }\r\n              </Row>\r\n\r\n              <Row className=\"mt-4\">\r\n                      <Col md={\"4\"}>  \r\n                        <FormGroup> \r\n                          <Label htmlFor=\"Type\"> Select Start Date </Label>\r\n                          <DatePicker className = \"form-control\" invalid = {errorStep1.startDate !== undefined && errorStep1.startDate !== \"\" ? true : false} dateFormat = \"MM/dd/yyyy\"  placeholderText = \"Start Date\" minDate= {new Date()} maxDate = {this.state.endDate} selected = {this.state.startDate} onChange = {(date) => {this.setState({startDate: date})} } placeholder=\"Start Date *\" id=\"startDate\"  name=\"startDate\" required />\r\n                          <div className=\"validate-invalid-feedback\">\r\n                            {errorStep1.startDate}\r\n                          </div>\r\n                        </FormGroup>\r\n                        \r\n                      </Col>\r\n                      \r\n                      <Col md={\"4\"}>  \r\n                        <FormGroup> \r\n                          <Label htmlFor=\"Type\">Select End Date</Label>\r\n                          <DatePicker className = \"form-control\" invalid = {errorStep1.endDate !== undefined && errorStep1.endDate !== \"\" ? true : false} dateFormat = \"MM/dd/yyyy\" placeholderText = \"End Date\" minDate = {this.state.startDate !== undefined && this.state.startDate !== \"\" ? this.state.startDate : new Date()} selected = {this.state.endDate} onChange = {(date) => {this.setState({endDate: date})} }  placeholder=\"End Date *\" id=\"endDate\"  name=\"endDate\" required />\r\n                          <div className=\"validate-invalid-feedback\">\r\n                            {errorStep1.endDate}\r\n                          </div>       \r\n                        </FormGroup>\r\n                      </Col>\r\n              </Row>\r\n\r\n              <Row className=\"mt-4\">\r\n                      <Col md={\"4\"}>  \r\n                        <FormGroup> \r\n                          <Label htmlFor=\"Type\">Select Visit </Label>\r\n                          <Input type=\"select\" invalid = {errorStep1.stagesData !== undefined && errorStep1.stagesData !== \"\" ? true : false} placeholder=\"Select Visit *\" value=\"\" id=\"stage\" onChange = {this.selectStageData}  name=\"stage\">\r\n                              <option value=\"\">Select</option>\r\n                              <option value=\"1\">Visit 1</option>\r\n                              <option value=\"2\">Visit 2</option>\r\n                              <option value=\"3\">Visit 3</option>\r\n                              <option value=\"4\">Visit 4</option>\r\n                              <option value=\"5\">Visit 5</option>\r\n                              <option value=\"6\">Visit 6</option>\r\n                              <option value=\"7\">Visit 7</option>\r\n                              <option value=\"8\">Visit 8</option>\r\n                              <option value=\"9\">Visit 9</option>\r\n                              <option value=\"10\">Visit 10</option>\r\n                              <option value=\"11\">Visit 11</option>\r\n                              <option value=\"12\">Visit 12</option>\r\n                              <option value=\"13\">Visit 13</option>\r\n                              <option value=\"14\">Visit 14</option>\r\n                              <option value=\"15\">Visit 15</option>\r\n                              <option value=\"16\">Visit 16</option>\r\n                              <option value=\"17\">Visit 17</option>\r\n                              <option value=\"18\">Visit 18</option>\r\n                              <option value=\"19\">Visit 19</option>\r\n                              <option value=\"20\">Visit 20</option>\r\n\r\n                            </Input>   \r\n                            <div className=\"invalid-feedback\">\r\n                              {errorStep1.stagesData}\r\n                            </div>   \r\n                        </FormGroup>\r\n                      </Col>\r\n                      {\r\n                        this.state.stagesData.length > 0  && <Col md = {\"12\"}>\r\n                          <div className=\"slots addDrs\">\r\n                    \r\n                            {this.state.stagesData.map((stageInfo, stageIndex) =>\r\n                            <div className=\"stageRow\">\r\n                              <Row  key = {stageIndex}>\r\n                                \r\n                                <Col md={\"2\"}>\r\n                                <div className=\"select-user-info-1\">\r\n                                  Visit { stageIndex + 1} \r\n                                        <button className=\"btnStage\" onClick = {(event) => {this.removeStageForm(stageIndex, event)}}><i className=\"fa fa-times\"></i></button>\r\n                                </div>\r\n\r\n                                </Col>\r\n\r\n                                <Col md={\"3\"}>  \r\n                                        <FormGroup> \r\n                                          <Label htmlFor=\"Type\"> Select Start Date </Label>\r\n                                          <DatePicker className = \"form-control\" dateFormat = \"MM/dd/yyyy\" placeholderText = \"Start Date\" \r\n                                            minDate = {stageIndex === 0 ? this.state.startDate : this.state.stagesData[stageIndex - 1].endDate !== \"\" ? this.state.stagesData[stageIndex - 1].endDate : this.state.startDate } \r\n                                            maxDate = {stageInfo.endDate !== \"\" ? stageInfo.endDate :this.state.stagesData.length > stageIndex + 1 ? this.state.stagesData[stageIndex + 1].startDate !== \"\" ? this.state.stagesData[stageIndex + 1].startDate : this.state.endDate : this.state.endDate} \r\n                                            selected = {stageInfo.startDate} \r\n                                            onChange = {(date) => { let stagesData = this.state.stagesData; stagesData[stageIndex].startDate = date; this.setState({stagesData: stagesData})}}  placeholder=\"Start Date *\" id=\"startDate\"  name=\"startDate\" required />\r\n                                         </FormGroup>\r\n                                        \r\n                                      </Col>\r\n                          \r\n                                      <Col md={\"3\"}>  \r\n                                        <FormGroup> \r\n                                          <Label htmlFor=\"Type\">Select End Date</Label>\r\n                                          <DatePicker className = \"form-control\" dateFormat = \"MM/dd/yyyy\" placeholderText = \"End Date\"\r\n                                           minDate = {stageInfo.startDate !== \"\" ? stageInfo.startDate : stageIndex === 0 ? this.state.startDate : this.state.stagesData[stageIndex - 1].endDate !== \"\" ? this.state.stagesData[stageIndex - 1].endDate : this.state.startDate } \r\n                                           maxDate = {this.state.stagesData.length > stageIndex + 1 ? this.state.stagesData[stageIndex + 1].startDate !== \"\" ? this.state.stagesData[stageIndex + 1].startDate : this.state.endDate : this.state.endDate}                                        \r\n                                           selected = {stageInfo.endDate}   placeholder=\"End Date *\" id=\"endDate\"  name=\"endDate\" \r\n                                            onChange = {(date) => { let stagesData = this.state.stagesData; stagesData[stageIndex].endDate = date; this.setState({stagesData: stagesData})}}  required />\r\n                                                  \r\n                                        </FormGroup>\r\n                                      </Col>\r\n                              </Row>\r\n                              </div>\r\n                            )}                          \r\n                         \r\n                          </div>\r\n                        </Col>\r\n                      }\r\n              </Row>\r\n              \r\n              </div>}\r\n\r\n              {activeTab === 1 && <div className=\"subtabs-filter\">\r\n                <Row>\r\n              <Col md={\"12\"}>  \r\n                        \r\n                          {\r\n                            this.state.selectedDoctor.map((doctorInfo, doctorIndex) => \r\n                                 <div className=\"dr-detail-card\">\r\n                              <Row key ={doctorIndex}>\r\n                                <Col md={\"12\"}><p className=\"Dr-Name\">{doctorInfo.firstName} {doctorInfo.lastName} {doctorInfo.role !== undefined && doctorInfo.role !== \"\" ? `(${doctorInfo.role})` : \"\"}</p></Col>\r\n                                <Col md={\"4\"}>  \r\n                                <FormGroup> \r\n                                  <Label htmlFor=\"Type\">Select Patient</Label>\r\n                                  <Input type=\"select\" placeholder=\"select patient *\" value = {this.state.assignPatientInfo[doctorInfo.authId]} id=\"patient\" onChange = {(event) => { this.assignPatient(doctorInfo.authId, event)}}  name=\"patient\" required>\r\n                                      <option value=\"\">Select</option>\r\n                                      {this.state.selectedPatient.map((userInfo, index) =>\r\n                                        <option value = {index} key={index}>{userInfo.firstName} {userInfo.lastName}</option>\r\n                                      )}\r\n                                    </Input>      \r\n                                </FormGroup>\r\n                              </Col>\r\n                              <Col md={\"2\"}>  \r\n                                <div className=\"btn profie-btn addBtn-1\" disabled = {this.state.assignPatientInfo[doctorInfo.authId] === undefined || this.state.patientSelectIndex === \"\" ? true : false} onClick = {() => {this.assignPatientToDoctor(doctorInfo.authId)}}>Add</div></Col>\r\n                            {\r\n                          Array.isArray(this.state.assignPatientInfoWithDoctor[doctorInfo.authId]) && this.state.assignPatientInfoWithDoctor[doctorInfo.authId].length > 0 && <Col md = {\"12\"}>\r\n                          <div className=\"addDrs\">\r\n                            <Row>\r\n                              {this.state.assignPatientInfoWithDoctor[doctorInfo.authId].map((assignPatientData, assignPatientIndex) =>\r\n                                <Col md={\"4\"} key = {assignPatientIndex}>\r\n                                  <div className=\"select-user-info\">\r\n                                    {assignPatientData.firstName} {assignPatientData.lastName}\r\n                                    <button className=\"remove-selected-user-info\" onClick = {(event) => {this.removeAssignedPatient(doctorInfo.authId, assignPatientIndex, event)}}><i className=\"fa fa-times\"></i></button>\r\n                                  </div>\r\n                                </Col>\r\n                              )}\r\n                                    \r\n                                    \r\n                            </Row>\r\n                          </div>\r\n                          </Col>\r\n                        }\r\n                          </Row>\r\n                              </div>\r\n\r\n                        )\r\n                    }\r\n                              \r\n                              \r\n                </Col>\r\n\r\n                      {/*<Col md={\"3\"} className=\"card-calender\">  \r\n                        <Calendar\r\n                    localizer={localizer}\r\n                    events={myEventsList}\r\n                    startAccessor=\"start\"\r\n                    views = {['month']}\r\n                    endAccessor=\"end\"                    \r\n                    popup = {true}/>\r\n\r\n                         <div className=\"MissedDates\">\r\n                           <p>Missed Appointment</p>\r\n                           <div className=\"Missed-numbers\">\r\n                              <p>13</p>\r\n                              <p>17</p>\r\n                              <p>21</p>\r\n                              <p>25</p>\r\n                              <p>29</p>\r\n                           </div>\r\n                         </div>\r\n\r\n                         </Col>*/}\r\n                  {/*<div className=\"btn addBtn btn-next\" onClick = {() => { this.setStepComleted(2)}}>Next</div>*/}\r\n              </Row>\r\n              </div>}\r\n\r\n              {activeTab === 2 && <div className=\"subtabs-filter\">\r\n                <Row>\r\n                     <Col md={\"9\"}>  \r\n                           \r\n                              {\r\n                                 this.state.selectedDoctor.map((doctorInfo, doctorIndex) => \r\n                                 <div className=\"dr-detail-card\">\r\n                                    <p>Assign Template to doctor</p>\r\n                                    <Row key ={doctorIndex}>\r\n                                       <Col md={\"12\"}><p className=\"Dr-Name-1\">{doctorInfo.firstName} {doctorInfo.lastName}</p></Col>\r\n                                       <Col md={\"4\"}>  \r\n                                       <FormGroup> \r\n                                         <Label htmlFor=\"Type\">Select Category</Label>\r\n                                         <Input type=\"select\" placeholder=\"select patient *\" value = {this.state.assignPatientInfo[doctorInfo.authId] !== undefined ? this.state.assignPatientInfo[doctorInfo.authId].categoryId : \"\"} id=\"patient\" onChange = {(event) => { this.getTemplateWithDoctor(doctorInfo.authId, event)}}  name=\"patient\" required>\r\n                                            <option value=\"\">Select</option>\r\n                                            {this.state.categoryList.map((categoryInfo, index) =>\r\n                                              <option value = {categoryInfo.categoryId} key={index}>{categoryInfo.categoryName}</option>\r\n                                            )}\r\n                                          </Input>      \r\n                                       </FormGroup>\r\n                                    </Col>\r\n                                    <Col md={\"4\"}>  \r\n                                       <FormGroup> \r\n                                         <Label htmlFor=\"Type\">Select Template</Label>\r\n                                         <Input type=\"select\" placeholder=\"select template *\" value = \"\" onChange = {(event) => { this.assignTemplateToDoctor(doctorInfo.authId, event)}}  name=\"temaplate\" required>\r\n                                            <option value=\"\">Select</option>\r\n                                            {\r\n                                              this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined && Array.isArray(this.state.doctorTemplateInfo[doctorInfo.authId].templateList) && \r\n                                                <>{ this.state.doctorTemplateInfo[doctorInfo.authId].templateList.map((templateInfo, temaplateIndex) => \r\n                                                    <option value={temaplateIndex}>{templateInfo.templateName}</option>\r\n                                                  )}</>\r\n                                              \r\n                                            }\r\n                                          </Input>      \r\n                                       </FormGroup>\r\n                                    </Col>\r\n                                     \r\n                                    {\r\n                                    this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined && Array.isArray(this.state.doctorTemplateInfo[doctorInfo.authId].selectedTemplate) && this.state.doctorTemplateInfo[doctorInfo.authId].selectedTemplate.length > 0 && <Col md = {\"12\"}>\r\n                                    <div className=\"addDrs\">\r\n                                       <Row>\r\n                                          {this.state.doctorTemplateInfo[doctorInfo.authId].selectedTemplate.map((selectedTemplateInfo, selectedTemplateIndex) =>\r\n                                             <Col md={\"5\"} key = {selectedTemplateIndex}>\r\n                                                <div className=\"select-user-info\">\r\n                                                   {selectedTemplateInfo.templateName}\r\n                                                   <button className=\"remove-selected-user-info\" onClick = {(event) => {this.removeDoctorAssignedTemplate(doctorInfo.authId, selectedTemplateIndex, event)}}><i className=\"fa fa-times\"></i></button>\r\n                                                </div>\r\n                                             </Col>\r\n                                          )}\r\n                                              \r\n                                              \r\n                                       </Row>\r\n                                    </div>\r\n                                    </Col>\r\n                                    }\r\n                                    <Col md = {\"12\"}>\r\n                                      { this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined && Array.isArray(this.state.doctorTemplateInfo[doctorInfo.authId].stagesWithPatientAppointment) && this.state.doctorTemplateInfo[doctorInfo.authId].stagesWithPatientAppointment.length > 0 && <>\r\n                                        {\r\n                                          this.state.doctorTemplateInfo[doctorInfo.authId].stagesWithPatientAppointment.map((stagesWithPatientAppointmentInfo, stagesWithPatientAppointmentIndex) => \r\n                                          <Row className=\"schedule-appointment-section\" key ={stagesWithPatientAppointmentIndex}>\r\n                                            <Col md={\"4\"}>  \r\n                                              <FormGroup> \r\n                                                <Label htmlFor=\"Type\">Select Visit </Label>\r\n                                                  <Input type=\"select\" placeholder=\"Select Visit *\" value={stagesWithPatientAppointmentInfo.stage}  onChange = {(event) => {this.doctorTemplateWithStage(doctorInfo.authId, \"stage\", event.target.value, stagesWithPatientAppointmentIndex)}}  name=\"stage\" required>\r\n                                                    <option value=\"\">Select</option>\r\n                                                   \r\n                                                    {\r\n                                                      this.state.stagesData.map((stageInfo, stageIndex) =>\r\n                                                        <option value={stageIndex}>Visit {stageIndex+1}</option> \r\n                                                      )\r\n                                                    }\r\n                                                  </Input>      \r\n                                              </FormGroup>\r\n                                            </Col>\r\n                                            <Col md = {\"4\"}>\r\n                                              <FormGroup> \r\n                                                <Label htmlFor=\"Type\">Select Form </Label>\r\n                                                <Input type=\"select\" placeholder=\"select Form *\" value={stagesWithPatientAppointmentInfo.form}    name=\"form\" onChange = {(event) => {this.doctorTemplateWithStage(doctorInfo.authId, \"form\", event.target.value, stagesWithPatientAppointmentIndex)}} required>\r\n                                                  <option value=\"\">Select</option>\r\n                                                  {\r\n                                                    this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined && Array.isArray(this.state.doctorTemplateInfo[doctorInfo.authId].selectedTemplate) && \r\n                                                      <>{ this.state.doctorTemplateInfo[doctorInfo.authId].selectedTemplate.map((templateInfo, temaplateIndex) => \r\n                                                          <option value={temaplateIndex}>{templateInfo.templateName}</option>\r\n                                                        )}</>\r\n                                                    \r\n                                                  }\r\n                                                </Input>\r\n                                              </FormGroup>\r\n                                            </Col>\r\n                                            <Col md ={\"12\"}>\r\n                                              <Label>Assign template & schedule appointment to patient</Label>\r\n                                              {\r\n                                                 this.state.assignPatientInfoWithDoctor[doctorInfo.authId] !== undefined && this.state.assignPatientInfoWithDoctor[doctorInfo.authId].map((assignedPatient, assignedPatientIndex) => \r\n                                                     <Row key = {assignedPatientIndex}>\r\n                                                       <Col md={\"4\"}>\r\n                                                         <FormGroup>\r\n                                                           <Label htmlFor=\"patientInfo\">Patients</Label>  \r\n                                                            <Input type=\"text\" readOnly= {true} placeholder=\"Patient Name *\" value={`${assignedPatient.firstName} ${assignedPatient.lastName}`}    name=\"patient\" />                                                        \r\n                                                         </FormGroup>\r\n                                                       </Col>\r\n                                                       <Col md = {\"3\"}>\r\n                                                          <FormGroup> \r\n                                                            <Label htmlFor=\"Type\">Select Patient Form </Label>\r\n                                                            <Input type=\"select\" placeholder=\"select Form *\" value={stagesWithPatientAppointmentInfo.patientInfoData !== undefined && stagesWithPatientAppointmentInfo.patientInfoData[assignedPatient.authId] !== undefined ? stagesWithPatientAppointmentInfo.patientInfoData[assignedPatient.authId].patientform  : \"\"}    name=\"patientform\" onChange = {(event) => {this.doctorTemplateWithStage(doctorInfo.authId, \"patientform\", event.target.value, stagesWithPatientAppointmentIndex, assignedPatient.authId)}} required>\r\n                                                              <option value=\"\">Select</option>\r\n                                                              {\r\n                                                                this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined && Array.isArray(this.state.doctorTemplateInfo[doctorInfo.authId].selectedTemplate) && \r\n                                                                  <>{ this.state.doctorTemplateInfo[doctorInfo.authId].selectedTemplate.map((templateInfo, temaplateIndex) => \r\n                                                                      <option value={temaplateIndex}>{templateInfo.templateName}</option>\r\n                                                                    )}</>\r\n                                                                \r\n                                                              }\r\n                                                            </Input>\r\n                                                          </FormGroup>\r\n                                                        </Col>\r\n                                                        <Col md={\"5\"}>  \r\n                                                          <FormGroup> \r\n                                                            <Label htmlFor=\"Type\">Schedule Date</Label>\r\n                                                            <DatePicker className = \"form-control\" dateFormat = \"MM/dd/yyyy h:mm aa\" showTimeSelect excludeTimes = {this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined && Array.isArray(this.state.doctorTemplateInfo[doctorInfo.authId].exculdesTimes) ? this.state.doctorTemplateInfo[doctorInfo.authId].exculdesTimes : []}\r\n                                                            onChange = {(date) => {this.doctorTemplateWithStage(doctorInfo.authId, \"schedule_date\", date, stagesWithPatientAppointmentIndex, assignedPatient.authId)}} \r\n                                                             name = \"schedule_date\"\r\n                                                             placeholderText = \"Schedule Date\"\r\n                                                             minDate = {this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined && this.state.doctorTemplateInfo[doctorInfo.authId].stage !== undefined && this.state.doctorTemplateInfo[doctorInfo.authId].stage !== \"\" ? this.state.stagesData[this.state.doctorTemplateInfo[doctorInfo.authId].stage].startDate : this.state.startDate} \r\n                                                             maxDate = {this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined && this.state.doctorTemplateInfo[doctorInfo.authId].stage !== undefined && this.state.doctorTemplateInfo[doctorInfo.authId].stage !== \"\" ? this.state.stagesData[this.state.doctorTemplateInfo[doctorInfo.authId].stage].endDate : this.state.endDate}\r\n                                                             selected = {stagesWithPatientAppointmentInfo.patientInfoData !== undefined && stagesWithPatientAppointmentInfo.patientInfoData[assignedPatient.authId] !== undefined ? stagesWithPatientAppointmentInfo.patientInfoData[assignedPatient.authId].schedule_date  : \"\"}\r\n                                                             onFocus = {(e) => { this.disabledScheduleTime(doctorInfo.authId, e)}}\r\n                                                             required />\r\n                                                                   \r\n                                                          </FormGroup>\r\n                                                        </Col>\r\n                                                     </Row>\r\n                                                     \r\n                                                   )\r\n                                               }\r\n                                              \r\n                                            </Col>\r\n                                            {/*<Col md={\"5\"}>  \r\n                                              <FormGroup> \r\n                                                <Label htmlFor=\"Type\">Schedule Date</Label>\r\n                                                <DatePicker className = \"form-control\" dateFormat = \"MM/dd/yyyy h:mm aa\" showTimeSelect \r\n                                                onChange = {(date) => {this.doctorTemplateWithStage(doctorInfo.authId, \"schedule_date\", date)}} \r\n                                                 name = \"schedule_date\"\r\n                                                 placeholderText = \"Schedule Date\"\r\n                                                 minDate = {this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined && this.state.doctorTemplateInfo[doctorInfo.authId].stage !== undefined && this.state.doctorTemplateInfo[doctorInfo.authId].stage !== \"\" ? this.state.stagesData[this.state.doctorTemplateInfo[doctorInfo.authId].stage].startDate : this.state.startDate} \r\n                                                 maxDate = {this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined && this.state.doctorTemplateInfo[doctorInfo.authId].stage !== undefined && this.state.doctorTemplateInfo[doctorInfo.authId].stage !== \"\" ? this.state.stagesData[this.state.doctorTemplateInfo[doctorInfo.authId].stage].endDate : this.state.endDate}\r\n                                                 selected = {this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined ? this.state.doctorTemplateInfo[doctorInfo.authId].schedule_date  : \"\"}\r\n                                                 required />\r\n                                                       \r\n                                              </FormGroup>\r\n                                            </Col>*/}\r\n                                            {\r\n                                              this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined && Array.isArray(this.state.doctorTemplateInfo[doctorInfo.authId].stageInfo) && this.state.doctorTemplateInfo[doctorInfo.authId].stageInfo.length > 0 && <Col md = {\"12\"}>\r\n                                              <div className=\"addDrs\">\r\n                                                 <Row>\r\n                                                    {this.state.doctorTemplateInfo[doctorInfo.authId].stageInfo.map((stageDetails, stageIndex) =>\r\n                                                       <Col md={\"4\"} key = {stageIndex}>\r\n                                                          <div className=\"select-user-info\">\r\n                                                             <span>Visit {parseInt(stageDetails.stage) + 1 }</span>\r\n                                                             <span>{stageDetails.form.templateName}</span>\r\n                                                             <button className=\"remove-selected-user-info\" onClick = {(event) => {this.removeDoctorAssignedTemplateStage(doctorInfo.authId, stageIndex, event)}}><i className=\"fa fa-times\"></i></button>\r\n                                                          </div>\r\n                                                       </Col>\r\n                                                    )}\r\n                                                        \r\n                                                        \r\n                                                 </Row>\r\n                                              </div>\r\n                                              </Col>\r\n                                              }\r\n                                          </Row>\r\n                                        )}\r\n                                        { this.state.stagesData.length > 1 &&\r\n                                        <Col md={\"3\"}>  \r\n                                        <div className=\"btn profie-btn addBtn-1\" onClick = {() => {this.assignSTageRowToDoctor(doctorInfo.authId)}}>Add More Visit</div></Col>\r\n                                        }\r\n                                        </>\r\n                                      }\r\n                                      \r\n                                        \r\n                                  </Col>\r\n                                  <Col md = {\"12\"}>\r\n                                      <FormGroup> \r\n                                        <Label htmlFor=\"Type\">Description</Label>\r\n                                        <Input type =\"textarea\" rows = \"3\" value={this.state.doctorTemplateInfo[doctorInfo.authId] !== undefined ? this.state.doctorTemplateInfo[doctorInfo.authId].description  : \"\"} onChange = {(event) => {this.doctorTemplateWithStage(doctorInfo.authId, \"description\", event.target.value)}} placeholder=\"Description\" required />\r\n                                               \r\n                                      </FormGroup>\r\n                                  </Col>\r\n                                  <Col md = {\"12\"}>\r\n                                      \r\n                                      <Row className=\"mt-2\">\r\n                                        <Col md={\"3\"}>\r\n                                          <p className=\"pateint-Assign\">Assign Patients:</p>\r\n                                        </Col>\r\n                                       {\r\n                                         this.state.assignPatientInfoWithDoctor[doctorInfo.authId] !== undefined && this.state.assignPatientInfoWithDoctor[doctorInfo.authId].map((assignedPatient, assignedPatientIndex) => \r\n                                             <Col md={\"3\"} key = {assignedPatientIndex}>\r\n                                                <p className=\"pateint-name\">{assignedPatient.firstName} {assignedPatient.lastName}</p>\r\n                                             </Col>\r\n                                           )\r\n                                       }\r\n                                       \r\n                                      </Row>\r\n                                  </Col>\r\n                                 </Row>\r\n                              </div>\r\n\r\n                              )\r\n                          }\r\n\r\n                          {/*\r\n                                 this.state.selectedPatient.map((patientInfo, patientIndex) => \r\n                                 <div className=\"dr-detail-card\">\r\n                                    <p>Assign template to patient</p>\r\n                                    <Row key ={patientIndex}>\r\n                                       <Col md={\"12\"}><p className=\"Dr-Name-1\">{patientInfo.firstName} {patientInfo.lastName}</p></Col>\r\n                                       <Col md={\"4\"}>  \r\n                                       <FormGroup> \r\n                                         <Label htmlFor=\"Type\">Select Category</Label>\r\n                                         <Input type=\"select\" placeholder=\"select patient *\" value = {this.state.patientTemplateInfo[patientInfo.authId] !== undefined ? this.state.patientTemplateInfo[patientInfo.authId].categoryId : \"\"} id=\"patient\" onChange = {(event) => { this.getTemplateWithPatient(patientInfo.authId, event)}}  name=\"patient\" required>\r\n                                            <option value=\"\">Select</option>\r\n                                            {this.state.categoryList.map((categoryInfo, index) =>\r\n                                              <option value = {categoryInfo.categoryId} key={index}>{categoryInfo.categoryName}</option>\r\n                                            )}\r\n                                          </Input>      \r\n                                       </FormGroup>\r\n                                    </Col>\r\n                                    <Col md={\"4\"}>  \r\n                                       <FormGroup> \r\n                                         <Label htmlFor=\"Type\">Select Template</Label>\r\n                                         <Input type=\"select\" placeholder=\"select template *\" value = \"\" onChange = {(event) => { this.assignTemplateToPatient(patientInfo.authId, event)}}  name=\"temaplate\" required>\r\n                                            <option value=\"\">Select</option>\r\n                                            {\r\n                                              this.state.patientTemplateInfo[patientInfo.authId] !== undefined && Array.isArray(this.state.patientTemplateInfo[patientInfo.authId].templateList) && \r\n                                                <>{ this.state.patientTemplateInfo[patientInfo.authId].templateList.map((templateInfo, temaplateIndex) => \r\n                                                    <option value={temaplateIndex}>{templateInfo.templateName}</option>\r\n                                                  )}</>\r\n                                              \r\n                                            }\r\n                                          </Input>      \r\n                                       </FormGroup>\r\n                                    </Col>\r\n                                     \r\n                                    {\r\n                                    this.state.patientTemplateInfo[patientInfo.authId] !== undefined && Array.isArray(this.state.patientTemplateInfo[patientInfo.authId].selectedTemplate) && this.state.patientTemplateInfo[patientInfo.authId].selectedTemplate.length > 0 && <Col md = {\"12\"}>\r\n                                    <div className=\"addDrs\">\r\n                                       <Row>\r\n                                          {this.state.patientTemplateInfo[patientInfo.authId].selectedTemplate.map((selectedTemplateInfo, selectedTemplateIndex) =>\r\n                                             <Col md={\"4\"} key = {selectedTemplateIndex}>\r\n                                                <div className=\"select-user-info\">\r\n                                                   {selectedTemplateInfo.templateName}\r\n                                                   <button className=\"remove-selected-user-info\" onClick = {(event) => {this.removePatientAssignedTemplate(patientInfo.authId, selectedTemplateIndex, event)}}><i className=\"fa fa-times\"></i></button>\r\n                                                </div>\r\n                                             </Col>\r\n                                          )}\r\n                                              \r\n                                              \r\n                                       </Row>\r\n                                    </div>\r\n                                    </Col>\r\n                                    }\r\n                                    <Col md = {\"12\"}>\r\n                                      <Row>\r\n                                        <Col md={\"4\"}>  \r\n                                          <FormGroup> \r\n                                            <Label htmlFor=\"Type\">Select Visit </Label>\r\n                                              <Input type=\"select\" placeholder=\"Select Visit *\" value={this.state.patientTemplateInfo[patientInfo.authId] !== undefined ? this.state.patientTemplateInfo[patientInfo.authId].stage  : \"\"}  onChange = {(event) => {this.patientTemplateWithStage(patientInfo.authId, \"stage\", event.target.value)}}  name=\"stage\" required>\r\n                                                <option value=\"\">Select</option>\r\n                                                {\r\n                                                  this.state.stagesData.map((stageInfo, stageIndex) =>\r\n                                                    <option value={stageIndex}>Visit {stageIndex+1}</option> \r\n                                                  )\r\n                                                }\r\n                                              </Input>      \r\n                                          </FormGroup>\r\n                                        </Col>\r\n                                        <Col md = {\"3\"}>\r\n                                          <FormGroup> \r\n                                            <Label htmlFor=\"Type\">Select Form </Label>\r\n                                            <Input type=\"select\" placeholder=\"select Form *\" value={this.state.patientTemplateInfo[patientInfo.authId] !== undefined ? this.state.patientTemplateInfo[patientInfo.authId].form  : \"\"}    name=\"form\" onChange = {(event) => {this.patientTemplateWithStage(patientInfo.authId, \"form\", event.target.value)}} required>\r\n                                              <option value=\"\">Select</option>\r\n                                              {\r\n                                                this.state.patientTemplateInfo[patientInfo.authId] !== undefined && Array.isArray(this.state.patientTemplateInfo[patientInfo.authId].selectedTemplate) && \r\n                                                  <>{ this.state.patientTemplateInfo[patientInfo.authId].selectedTemplate.map((templateInfo, temaplateIndex) => \r\n                                                      <option value={temaplateIndex}>{templateInfo.templateName}</option>\r\n                                                    )}</>\r\n                                                \r\n                                              }\r\n                                            </Input>\r\n                                          </FormGroup>\r\n                                        </Col>\r\n                                        \r\n                                        <Col md={\"2\"}>  \r\n                                        <div className=\"btn profie-btn addBtn-1\" onClick = {() => {this.assignSTageInfoToPatient(patientInfo.authId)}}>Add</div></Col>\r\n                                        {\r\n                                          this.state.patientTemplateInfo[patientInfo.authId] !== undefined && Array.isArray(this.state.patientTemplateInfo[patientInfo.authId].stageInfo) && this.state.patientTemplateInfo[patientInfo.authId].stageInfo.length > 0 && <Col md = {\"12\"}>\r\n                                          <div className=\"addDrs\">\r\n                                             <Row>\r\n                                                {this.state.patientTemplateInfo[patientInfo.authId].stageInfo.map((stageDetails, stageIndex) =>\r\n                                                   <Col md={\"4\"} key = {stageIndex}>\r\n                                                      <div className=\"select-user-info\">\r\n                                                         <span>Visit {parseInt(stageDetails.stage) + 1}</span>\r\n                                                         <span>{stageDetails.form.templateName}</span>\r\n                                                         <button className=\"remove-selected-user-info\" onClick = {(event) => {this.removePatientAssignedTemplateStage(patientInfo.authId, stageIndex, event)}}><i className=\"fa fa-times\"></i></button>\r\n                                                      </div>\r\n                                                   </Col>\r\n                                                )}\r\n                                                    \r\n                                                    \r\n                                             </Row>\r\n                                          </div>\r\n                                          </Col>\r\n                                          }\r\n                                      </Row>\r\n                                  </Col>\r\n                                  <Col md = {\"12\"}>\r\n                                      <FormGroup> \r\n                                        <Label htmlFor=\"Type\">Description</Label>\r\n                                        <Input type =\"textarea\" rows = \"3\" value={this.state.patientTemplateInfo[patientInfo.authId] !== undefined ? this.state.patientTemplateInfo[patientInfo.authId].description  : \"\"} onChange = {(event) => {this.patientTemplateWithStage(patientInfo.authId, \"description\", event.target.value)}} cols=\"50\" placeholder=\"Description\" required  />\r\n                                               \r\n                                      </FormGroup>\r\n                                  </Col>\r\n                                  <Col md = {\"12\"}>\r\n                                      \r\n                                      <Row className=\"mt-2\">\r\n                                        <Col md={\"3\"}>\r\n                                             <p className=\"pateint-Assign\">Assign Doctor:</p>\r\n                                        </Col>\r\n                                        {\r\n                                          assignDoctorToPatientData[patientInfo.authId] !== undefined && assignDoctorToPatientData[patientInfo.authId].map((assignDocotorInfo, assignDoctorIndex) =>\r\n                                              <Col md={\"3\"}>\r\n                                                <p className=\"pateint-name\">{assignDocotorInfo.firstName} {assignDocotorInfo.lastName}</p>\r\n                                            </Col>\r\n                                        \r\n                                          )\r\n                                        }\r\n                                        \r\n                                      </Row>\r\n                                  </Col>\r\n                                 </Row>\r\n                              </div>\r\n\r\n                              )*/\r\n                          }\r\n                                    \r\n                                    \r\n                      </Col>\r\n\r\n                         <Col md={\"3\"} className=\"card-calender\"> \r\n                           <FormGroup> \r\n                             <Label htmlFor=\"Type\">Doctor Calendar</Label>\r\n                             <Input type=\"select\" placeholder=\"select doctor *\" value = {this.state.selectedDoctorCalendarIndex} id=\"doctor\" onChange = {(event) => { this.setState({selectedDoctorCalendarIndex: event.target.value })}}  name=\"doctor\" required>\r\n                                <option value=\"\">Select</option>\r\n                                {doctorList.map((userInfo, index) =>\r\n                                  <option value = {index} key={index}>{userInfo.firstName} {userInfo.lastName}</option>\r\n                                )}\r\n                              </Input>      \r\n                           </FormGroup>\r\n                           {this.state.selectedDoctorCalendarIndex !== \"\" && <FormGroup>\r\n                              <Label>{doctorList[this.state.selectedDoctorCalendarIndex].firstName} {doctorList[this.state.selectedDoctorCalendarIndex].lastName}</Label>\r\n                           </FormGroup> }\r\n                           <Calendar\r\n                           localizer={localizer}\r\n                           events={myEventsList}\r\n                           startAccessor=\"start\"\r\n                           views = {['month']}\r\n                           endAccessor=\"end\"                         \r\n                           popup = {true}/>\r\n\r\n                         <div className=\"MissedDates\">\r\n                           <p>Missed Appointment</p>\r\n                           <div className=\"Missed-numbers\">\r\n                              <p>13</p>\r\n                              <p>17</p>\r\n                              <p>21</p>\r\n                              <p>25</p>\r\n                              <p>29</p>\r\n                           </div>\r\n                        </div>\r\n                           <p>Previous form History</p>\r\n\r\n                           <Row className=\"FormDownload\">\r\n                           <Col md={\"9\"}> \r\n                              <div className=\"DrName-form\">Jerry Dew</div>  \r\n                              Download Form\r\n                           </Col>\r\n                           <Col md={\"3\"}>\r\n                              <p className=\"download-ic\"><i class=\"nav-icon icon-docs\"></i></p>\r\n                           </Col>\r\n                           </Row>\r\n\r\n                           <Row className=\"FormDownload\">\r\n                           <Col md={\"9\"}> \r\n                              <div className=\"DrName-form\">Jerry Dew</div>  \r\n                              Download Form\r\n                           </Col>\r\n                           <Col md={\"3\"}>\r\n                              <p className=\"download-ic\"><i class=\"nav-icon icon-docs\"></i></p>\r\n                           </Col>\r\n                           </Row>\r\n\r\n                           <Row className=\"FormDownload\">\r\n                           <Col md={\"9\"}> \r\n                              <div className=\"DrName-form\">Jerry Dew</div>  \r\n                              Download Form\r\n                           </Col>\r\n                           <Col md={\"3\"}>\r\n                              <p className=\"download-ic\"><i class=\"nav-icon icon-docs\"></i></p>\r\n                           </Col>\r\n                           </Row>\r\n                         </Col>\r\n                         {/*<div className=\"btn addBtn btn-next\" onClick = {() => { this.setStepComleted(2)}}>Next</div>*/}\r\n                  </Row>\r\n              </div>}\r\n               {activeTab !== 0 && <div className=\"btn addBtn btn-next\" onClick = {() => { this.setStepComleted(activeTab-1)}}>Back</div>}  \r\n               {activeTab !== 2 ? <div className=\"btn addBtn btn-next\" onClick = {() => { this.setStepComleted(activeTab+1)}}>Next</div> : <div className=\"btn addBtn btn-next\" onClick = {this.finishAddClinicalTrial}>Submit</div>}\r\n        </div>\r\n        \r\n    </div>\r\n    <Modal isOpen={this.state.modal} toggle={this.toggleModal} className=\"Popup-Modal-YesNo full-width-modal-section organization-modal\">\r\n          <ModalBody>\r\n            <Row>\r\n              <Col md = {\"12\"}>\r\n              <div className=\"popup-head-img\">\r\n               <img src= {popupImgUrl} className=\"imghead\" alt =\"img\" width = \"100px\" height = \"100px\"/>\r\n              </div>\r\n              <div className=\"popup-C\">              \r\n                <h2>Clinical Trial Created Successfully</h2>\r\n                {/*<p className=\"color-grey\">It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters.</p>*/}\r\n                <Link to = {`/admin/manage-trial/clinical-trial/${this.state.clinicalTrialId}`} className=\"btn addBtn btn-next\">View Saved Details</Link>\r\n              </div>\r\n              </Col>\r\n            </Row>           \r\n          </ModalBody>\r\n      </Modal>\r\n    \r\n    </div>\r\n  )\r\n  }\r\n}\r\n\r\nfunction SetCategoryDropDownItem (props) {\r\n  const categoryItem = props.categoryItem;\r\n  return (<option value={categoryItem.categoryId} >{categoryItem.categoryName}</option>)\r\n}\r\n\r\nexport default ClinicalTrial;\r\n\r\nexport class StepsIcon  extends Component {\r\nrender() {\r\nreturn (<i className={`${this.props.iconName}`}></i>);\r\n}\r\n}","import React from 'react';\nimport \"./Loader.css\"\nconst Loader = () => {\n    return (\n        <div className=\"loaderSection\">\n             <div className=\"spinner-border text-primary\" role=\"status\">\n                  <span className=\"sr-only\">Loading...</span>\n              </div>\n        </div>\n    );\n}\n\nexport default Loader;"],"sourceRoot":""}
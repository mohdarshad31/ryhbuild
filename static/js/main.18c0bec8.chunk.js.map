{"version":3,"sources":["App.js","serviceWorker.js","index.js","core/services/commonService.js"],"names":["Login","React","lazy","ResetPassword","AdminLayout","CommonLayout","App","basename","Suspense","fallback","className","path","name","component","Component","PrivateRoute","rest","render","routeProps","commonService","getAuth","getLocalStorageValue","renderMergedProps","to","pathname","state","from","location","finalProps","Object","assign","createElement","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","CryptoJS","require","API_BASE_URL","ApiService","urlSegment","axios","this","isSubscribed","localStorage","getItem","AES","decrypt","toString","enc","Utf8","isSubscribe","setItem","encrypt","key","data","decyptdata","JSON","parse","value","stringify","getAccessToken","formdata","post","put","accessToken","delete","d","Date","month","getMonth","day","getDate","getFullYear","length","startDate","endDate","date1","getTime","statusText"],"mappings":"kmBAQMA,EAAQC,IAAMC,MAAK,kBAAM,uEACzBC,EAAgBF,IAAMC,MAAK,kBAAM,yDACjCE,EAAcH,IAAMC,MAAK,kBAAM,wEAC/BG,EAAeJ,IAAMC,MAAK,kBAAM,8EAIhCI,E,uKAGF,OACE,kBAAC,gBAAD,CAAQC,SAAS,+BACb,kBAAC,IAAMC,SAAP,CAAgBC,SAPJ,yBAAKC,UAAU,oCAAf,eAQV,kBAAC,IAAD,KAEE,kBAAC,EAAD,CAAcC,KAAK,SAASC,KAAK,QAAQC,UAAWT,IACpD,kBAAC,IAAD,CAAOO,KAAK,UAAUC,KAAK,SAASC,UAAWR,IAC/C,kBAAC,IAAD,CAAOM,KAAK,SAASC,KAAK,QAAQC,UAAWb,IAC7C,kBAAC,IAAD,CAAOW,KAAK,kBAAkBC,KAAK,iBAAiBC,UAAWV,IAC/D,kBAAC,IAAD,CAAOQ,KAAK,IAAIC,KAAK,QAAQC,UAAWb,W,GAZpCc,aAmBZC,EAAe,SAAC,GAA4B,IAA1BF,EAAyB,EAAzBA,UAAcG,EAAW,6BAC/C,OACE,kBAAC,IAAD,iBAAWA,EAAX,CAAiBC,OAAQ,SAAAC,GACvB,OAAOC,IAAcC,WAA4D,UAA/CD,IAAcE,qBAAqB,QACnEC,EAAkBT,EAAWK,EAAYF,GAEzC,kBAAC,IAAD,CAAUO,GAAI,CACZC,SAAU,SACVC,MAAO,CAAEC,KAAMR,EAAWS,kBAO9BL,EAAoB,SAACT,GAAwB,IAAD,uBAATG,EAAS,iCAATA,EAAS,kBAChD,IAAMY,EAAaC,OAAOC,OAAP,MAAAD,OAAM,CAAQ,IAAR,OAAeb,IACxC,OACEf,IAAM8B,cAAclB,EAAWe,IAGpBtB,IC3CT0B,EAAcC,QACW,cAA7BC,OAAOP,SAASQ,UAEe,UAA7BD,OAAOP,SAASQ,UAEhBD,OAAOP,SAASQ,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrB,QACfe,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCvFjEC,IAASvC,OAAO,kBAAC,EAAD,MAASwC,SAASC,eAAe,SDa1C,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,8DAAwB1B,OAAOP,SAASkC,MACpDC,SAAW5B,OAAOP,SAASmC,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,8DAAN,sBAEP5B,IAgEV,SAAiCM,EAAOC,GAEtCyB,MAAM1B,GACHK,MAAK,SAAAsB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAM5B,MAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,MAAK,WAC7BT,OAAOP,SAAS8C,eAKpBpC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEArFAuB,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM5B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OCpC/BE,I,qECbIkC,EAAWC,EAAQ,KACjBC,EAAe,6CAIfC,E,uGAGaC,GACX,OAAOC,IAAMZ,IAAIW,K,6BAIdA,GACH,OAAOC,IAAMZ,IAAIS,EAAaE,K,uCAI9B,OAAOE,KAAK5D,qBAAqB,iB,uCAKjC,IAAI6D,EAAeC,aAAaC,QAAQ,gBACxC,MAAoB,KAAjBF,GAAwC,OAAjBA,EACjB,GAEmH,SAAlHP,EAASU,IAAIC,QAAQH,aAAaC,QAAQ,gBAAiB,uBAAuBG,SAASZ,EAASa,IAAIC,Q,uCAE/E,IAAxBC,EAAuB,uDAAT,QACzBA,EAAcA,EAAYH,WAC1BJ,aAAaQ,QAAS,eAAgBhB,EAASU,IAAIO,QAAQF,EAAa,uBAAuBH,c,2CAG9EM,GACjB,IAAIC,EAAOX,aAAaC,QAAQS,GAChC,GAAY,KAATC,GAAwB,OAATA,EAChB,MAAO,GAEP,IAAIC,EAAcpB,EAASU,IAAIC,QAAQH,aAAaC,QAAQS,GAAM,uBAAuBN,SAASZ,EAASa,IAAIC,MAC/G,OAAOO,KAAKC,MAAMF,K,2CAGHF,EAAKK,GACtB,IAAIJ,EAAOE,KAAKG,UAAUD,GAC1Bf,aAAaQ,QAASE,EAAKlB,EAASU,IAAIO,QAAQE,EAAM,uBAAuBP,c,kCAG7E,IAAIL,EAAeC,aAAaC,QAAQ,UACxC,MAAoB,KAAjBF,GAAwC,OAAjBA,EACjB,GAEAP,EAASU,IAAIC,QAAQH,aAAaC,QAAQ,UAAW,uBAAuBG,SAASZ,EAASa,IAAIC,Q,4CAGzFV,GAClB,IACMZ,EAAU,CACZ,cAAiB,OAFDc,KAAKmB,kBAIzB,OAAOpB,IAAMZ,IAAIS,EAAaE,EAAY,CAACZ,QAASA,M,8BAGhDY,EAAYsB,GAKhB,OAAOrB,IAAMsB,KAAKzB,EAAaE,EAAYsB,EAAU,CAAClC,QAJtC,CACZ,eAAgB,mBAChB,8BAA+B,S,6CAKhBY,EAAYsB,GAC/B,IACMlC,EAAU,CACZ,eAAgB,mBAChB,cAAiB,OAHDc,KAAKmB,kBAKzB,OAAOpB,IAAMsB,KAAKzB,EAAaE,EAAYsB,EAAU,CAAClC,QAASA,M,4CAI7CY,EAAYsB,GAC9B,IACMlC,EAAU,CACZ,eAAgB,mBAChB,cAAiB,OAHDc,KAAKmB,kBAKzB,OAAOpB,IAAMuB,IAAI1B,EAAaE,EAAYsB,EAAU,CAAClC,QAASA,M,+CAIzCY,GAA2B,IAAfsB,EAAc,uDAAH,GACtCG,EAAcvB,KAAKmB,iBACnBjC,EAAU,CACZ,eAAgB,mBAChB,cAAiB,OAAOqC,GAE5B,OAAOxB,IAAMyB,OAAO5B,EAAaE,EAAY,CAACZ,QAASA,EAAS2B,KAAMO,M,gCAItE,IAAIG,EAAcrB,aAAaC,QAAQ,eACvC,MAAmB,KAAhBoB,GAAsC,OAAhBA,I,kCAOzB,MA1G8B,0C,wCA8G9B,MA7Ga,4C,uCAgHb,IAAIE,EAAI,IAAIC,KAERC,EAAQF,EAAEG,WAAW,EACrBC,EAAMJ,EAAEK,UAKZ,OAHaL,EAAEM,cAAgB,MACzB,GAAGJ,GAAOK,OAAO,EAAI,IAAM,IAAML,EAAQ,MACzC,GAAGE,GAAKG,OAAO,EAAI,IAAM,IAAMH,I,uCAIxBI,EAAWC,GAC3B,IAAIC,EAAQ,IAAIT,KAAKO,GAQxB,OAPY,IAAIP,KAAKQ,GAGUE,UAAYD,EAAMC,WAGN,Q,kCAInB,IAAZhD,EAAW,uDAAF,EAEbiD,EAAa,SAOjB,OANc,IAAXjD,EACDiD,EAAa,WACI,IAAXjD,EACNiD,EAAa,UACI,IAAXjD,IACNiD,EAAa,qBACRA,I,qCAGwB,IAApBjD,EAAmB,uDAAV,SACdiD,EAAa,EAOjB,MANc,aAAXjD,EACDiD,EAAa,EACI,YAAXjD,EACNiD,EAAa,EACI,sBAAXjD,GAA6C,UAAXA,IACxCiD,EAAa,GACRA,I,sCAEe,IAAZjD,EAAW,uDAAF,EAEjBiD,EAAa,SAOjB,OANc,IAAXjD,EACDiD,EAAa,WACI,IAAXjD,EACNiD,EAAa,UACI,IAAXjD,IACNiD,EAAa,SACRA,M,KAIE,QAAIxC,I","file":"static/js/main.18c0bec8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\n// import { renderRoutes } from 'react-router-config';\nimport './App.scss';\n/*Common Service*/\nimport commonService from './core/services/commonService';\n\n// Containers\nconst Login = React.lazy(() => import('./views/Login/Login'));\nconst ResetPassword = React.lazy(() => import('./views/Login/ResetPassword'));\nconst AdminLayout = React.lazy(() => import('./containers/AdminLayout'));\nconst CommonLayout = React.lazy(() => import('./containers/CommonLayout/CommonLayout'));\n\nconst loading = () => <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>;\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Router basename=\"projects/researchyourhealth\">\n          <React.Suspense fallback={loading()}>\n            <Switch>\n              \n              <PrivateRoute path=\"/admin\" name=\"Admin\" component={AdminLayout} />\n              <Route path=\"/common\" name=\"Common\" component={CommonLayout} />\n              <Route path=\"/login\" name=\"Login\" component={Login} />\n              <Route path=\"/reset-password\" name=\"Reset Password\" component={ResetPassword} />\n              <Route path=\"/\" name=\"Login\" component={Login} />\n            </Switch>\n          </React.Suspense>\n      </Router>\n    );\n  }\n}\nconst PrivateRoute = ({ component, ...rest }) => {\n  return (\n    <Route {...rest} render={routeProps => {\n      return commonService.getAuth() && commonService.getLocalStorageValue(\"role\") === \"admin\" ? (\n        renderMergedProps(component, routeProps, rest)\n      ) : (\n        <Redirect to={{\n          pathname: '/login',\n          state: { from: routeProps.location }\n        }}/>\n      );\n    }}/>\n  );\n};\n\nconst renderMergedProps = (component, ...rest) => {\n  const finalProps = Object.assign({}, ...rest);\n  return (\n    React.createElement(component, finalProps)\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import axios from 'axios';\nvar CryptoJS = require(\"crypto-js\");\nconst API_BASE_URL = 'https://researchhealth.herokuapp.com/v0.0/';\n//const API_BASE_URL = 'http://localhost:8083/v0.0/';\nconst API_BASE_URL_WITH_OUT_VERSION = 'https://researchhealth.herokuapp.com/';\nconst googleAPIKey = 'AIzaSyBmyGVmnHPHZp2eC1XNMx-GaBRC20g9Tck';\nclass ApiService {\n\n    /*Externale API*/\n    getExternalAPI(urlSegment) {\n        return axios.get(urlSegment);\n    }\n\n    /*Get API*/\n    getAPI(urlSegment) {\n        return axios.get(API_BASE_URL+urlSegment);\n    }\n    /*Get AccessToken*/\n    getAccessToken() {\n        return this.getLocalStorageValue(\"accessToken\");\n    }\n\n    /*Get Organization Subscribe*/\n    getIsSubscribe() {\n        let isSubscribed = localStorage.getItem(\"isSubscribed\");        \n        if(isSubscribed === '' || isSubscribed === null)\n          return \"\";\n        else\n          return (CryptoJS.AES.decrypt(localStorage.getItem(\"isSubscribed\"), 'OEPENCRYPTION@12345').toString(CryptoJS.enc.Utf8) === \"true\") ? true : false;\n    }\n    setIsSubscribe(isSubscribe = \"false\") {\n        isSubscribe = isSubscribe.toString();\n        localStorage.setItem( 'isSubscribed', CryptoJS.AES.encrypt(isSubscribe, 'OEPENCRYPTION@12345').toString());\n    }\n\n    getLocalStorageValue(key) {\n        let data = localStorage.getItem(key);        \n        if(data === '' || data === null)\n          return \"\";\n        else{\n          let decyptdata =  CryptoJS.AES.decrypt(localStorage.getItem(key), 'OEPENCRYPTION@12345').toString(CryptoJS.enc.Utf8);\n          return JSON.parse(decyptdata);\n        }\n    }\n    setLocalStorageValue(key, value) {\n        let data = JSON.stringify(value);\n        localStorage.setItem( key, CryptoJS.AES.encrypt(data, 'OEPENCRYPTION@12345').toString());\n    }\n    getAuthId() {\n        let isSubscribed = localStorage.getItem(\"authId\");        \n        if(isSubscribed === '' || isSubscribed === null)\n          return \"\";\n        else\n          return CryptoJS.AES.decrypt(localStorage.getItem(\"authId\"), 'OEPENCRYPTION@12345').toString(CryptoJS.enc.Utf8);\n    }\n    /*Get API With Authentication header */\n    getAPIWithAccessToken(urlSegment) {\n        const accessToken = this.getAccessToken();\n        const headers = {\n            'Authorization': 'JWT '+accessToken\n        }\n        return axios.get(API_BASE_URL+urlSegment, {headers: headers});\n    }\n    /*Post API Without Authentication header */\n    postAPI(urlSegment, formdata) {        \n        const headers = {\n            'Content-Type': 'application/json',\n            \"Access-Control-Allow-Origin\": \"*\"         \n        }\n        return axios.post(API_BASE_URL+urlSegment, formdata, {headers: headers});\n    }\n    /*Post API With Authentication header */\n    postAPIWithAccessToken(urlSegment, formdata){\n        const accessToken = this.getAccessToken();\n        const headers = {\n            'Content-Type': 'application/json',\n            'Authorization': 'JWT '+accessToken\n        }\n        return axios.post(API_BASE_URL+urlSegment, formdata, {headers: headers});\n    } \n\n    /*PUt API With Authentication header */\n    putAPIWithAccessToken(urlSegment, formdata){\n        const accessToken = this.getAccessToken();\n        const headers = {\n            'Content-Type': 'application/json',\n            'Authorization': 'JWT '+accessToken\n        }\n        return axios.put(API_BASE_URL+urlSegment, formdata, {headers: headers});\n    } \n\n    /*Delete API With Authentication header and Without parameter */\n    deleteAPIWithAccessToken(urlSegment, formdata = {}){\n        const accessToken = this.getAccessToken();\n        const headers = {\n            'Content-Type': 'application/json',\n            'Authorization': 'JWT '+accessToken\n        }\n        return axios.delete(API_BASE_URL+urlSegment, {headers: headers, data: formdata});\n    } \n    /* Check user logged in or not */\n    getAuth(){\n        let accessToken = localStorage.getItem(\"accessToken\");        \n        if(accessToken === '' || accessToken === null)\n          return false;\n        else\n          return true;\n    }\n    /*Get API Url*/\n    getAPIUrl(){\n        return API_BASE_URL_WITH_OUT_VERSION;\n    }\n\n    getGoogleAPIKey() {\n        return googleAPIKey;\n    }\n    getCurrentDate(){\n        var d = new Date();\n\n        var month = d.getMonth()+1;\n        var day = d.getDate();\n\n        var output = d.getFullYear() + '_' +\n            ((''+month).length<2 ? '0' : '') + month + '_' +\n            ((''+day).length<2 ? '0' : '') + day;\n        return output;\n    }\n\n    getDaysDiffernce(startDate, endDate) {\n    \tlet date1 = new Date(startDate); \n\t\tlet date2 = new Date(endDate); \n\t\t  \n\t\t// To calculate the time difference of two dates \n\t\tlet Difference_In_Time = date2.getTime() - date1.getTime(); \n\t\t  \n\t\t// To calculate the no. of days between two dates \n\t\tlet Difference_In_Days = Difference_In_Time / (1000 * 3600 * 24);\n\t\treturn Difference_In_Days;\n    }\n\n    getStatus(status = 1){\n        \n      let statusText = \"Active\"\n      if(status === 0)\n        statusText = \"Inactive\";\n      else if(status === 2)\n        statusText = \"Pending\";\n      else if(status === 3)\n        statusText = \"Under Negotiation\";\n      return statusText;\n    }\n\n    getStatusVal(status = \"Active\") {\n        let statusText = 1;\n        if(status === \"Inactive\")\n          statusText = 0;\n        else if(status === \"Pending\")\n          statusText = 2;\n        else if(status === \"Under Negotiation\" || status === \"Block\")\n          statusText = 3;\n        return statusText;\n    }\n    getUserStatus(status = 1){\n        \n      let statusText = \"Active\"\n      if(status === 0)\n        statusText = \"Inactive\";\n      else if(status === 2)\n        statusText = \"Pending\";\n      else if(status === 3)\n        statusText = \"Block\";\n      return statusText;\n    }\n}\n\nexport default new ApiService();\n"],"sourceRoot":""}